{"version":3,"sources":["../../../src/Controller/CodeMove/CustomerDashboard.controller.ts"],"sourcesContent":["import { Controller, Get, Query, Req } from '@nestjs/common';\nimport { ApiTags } from '@nestjs/swagger';\nimport { CustomerDashboardService } from '@Root/Service/CodeMove/CustomerDashboard.service';\nimport { JWTAuthController } from '../JWTAuth.controller';\nimport { CurrentUser } from '@Root/Helper/Common.helper';\nimport { customer } from '@Root/Database/Table/CodeMove/customer';\n\n@ApiTags('Customer Dashboard')\n@Controller({ path: 'CustomerDashboard', version: '1' })\nexport class CustomerDashboardController extends JWTAuthController {\n    constructor(private readonly CustomerDashboardService: CustomerDashboardService) {\n        super();\n    }\n\n    @Get('stats')\n    async getCustomerDashboardStats(@CurrentUser() UserId: string) {\n        const CustomerData = await customer.findOne({ where: { user_id: UserId } })\n        return await this.CustomerDashboardService.getStats(CustomerData.id);\n    }\n\n    @Get('recent-requirements')\n    async getRecentRequirements(@CurrentUser() UserId: string, @Query('startDate') startDate?: string, @Query('endDate') endDate?: string) {\n        const CustomerData = await customer.findOne({ where: { user_id: UserId } })\n        return await this.CustomerDashboardService.getRecentOrders(CustomerData.id, startDate, endDate);\n    }\n\n    @Get('delivery-tracking')\n    async getDeliveryTracking(@CurrentUser() UserId: string, @Query('startDate') startDate?: string) {\n        const CustomerData = await customer.findOne({ where: { user_id: UserId } })\n        return await this.CustomerDashboardService.getDeliveryTracking(CustomerData.id, startDate);\n    }\n}\n"],"names":["CustomerDashboardController","JWTAuthController","getCustomerDashboardStats","UserId","CustomerData","customer","findOne","where","user_id","CustomerDashboardService","getStats","id","getRecentRequirements","startDate","endDate","getRecentOrders","getDeliveryTracking","path","version"],"mappings":";;;;+BASaA;;;eAAAA;;;wBAT+B;yBACpB;0CACiB;mCACP;8BACN;0BACH;;;;;;;;;;;;;;;AAIlB,IAAA,AAAMA,8BAAN,MAAMA,oCAAoCC,oCAAiB;IAK9D,MACMC,0BAA0B,AAAeC,MAAc,EAAE;QAC3D,MAAMC,eAAe,MAAMC,kBAAQ,CAACC,OAAO,CAAC;YAAEC,OAAO;gBAAEC,SAASL;YAAO;QAAE;QACzE,OAAO,MAAM,IAAI,CAACM,wBAAwB,CAACC,QAAQ,CAACN,aAAaO,EAAE;IACvE;IAEA,MACMC,sBAAsB,AAAeT,MAAc,EAAE,AAAoBU,SAAkB,EAAE,AAAkBC,OAAgB,EAAE;QACnI,MAAMV,eAAe,MAAMC,kBAAQ,CAACC,OAAO,CAAC;YAAEC,OAAO;gBAAEC,SAASL;YAAO;QAAE;QACzE,OAAO,MAAM,IAAI,CAACM,wBAAwB,CAACM,eAAe,CAACX,aAAaO,EAAE,EAAEE,WAAWC;IAC3F;IAEA,MACME,oBAAoB,AAAeb,MAAc,EAAE,AAAoBU,SAAkB,EAAE;QAC7F,MAAMT,eAAe,MAAMC,kBAAQ,CAACC,OAAO,CAAC;YAAEC,OAAO;gBAAEC,SAASL;YAAO;QAAE;QACzE,OAAO,MAAM,IAAI,CAACM,wBAAwB,CAACO,mBAAmB,CAACZ,aAAaO,EAAE,EAAEE;IACpF;IApBA,YAAY,AAAiBJ,wBAAkD,CAAE;QAC7E,KAAK,SADoBA,2BAAAA;IAE7B;AAmBJ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;QAvBcQ,MAAM;QAAqBC,SAAS"}