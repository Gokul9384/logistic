{"version":3,"sources":["../../../src/Controller/CodeMove/Notification.controller.ts"],"sourcesContent":["import { Body, Controller, Delete, Get, Param, Post, Put } from '@nestjs/common';\nimport { ApiTags } from '@nestjs/swagger';\nimport { NotificationService } from '@Root/Service/CodeMove/Notification.service';\nimport { NotificationModel } from '@Model/CodeMove/Notification.model';\nimport { CurrentUser, UserIp } from '@Helper/Common.helper';\nimport { JWTAuthController } from '@Controller/JWTAuth.controller';\nimport { ResponseEnum } from '@Helper/Enum/ResponseEnum';\n\n@Controller({ path: 'Notification', version: '1' })\n@ApiTags('Notification')\nexport class NotificationController extends JWTAuthController {\n    constructor(private _NotificationService: NotificationService) {\n        super();\n    }\n\n    // Get all notifications by user\n    @Get('List')\n    async List(@CurrentUser() UserId: string) {\n        const data = await this._NotificationService.GetAllByUserId(UserId);\n        return this.SendResponseData(data);\n    }\n\n    // Insert a new notification\n    @Post('Insert')\n    async Insert(\n        @Body() body: NotificationModel,\n        @CurrentUser() UserId: string,\n        @UserIp() ip: string\n    ) {\n        await this._NotificationService.Insert(body, UserId, ip);\n        return this.SendResponse(ResponseEnum.Success, ResponseEnum.Created);\n    }\n\n    // Optional: Mark notification as read\n    @Put('MarkAsRead/:Id')\n    async MarkAsRead(@Param('Id') Id: string, @CurrentUser() UserId: string) {\n        const data = await this._NotificationService.MarkAsRead(Id, UserId);\n        return this.SendResponseData(data);\n    }\n\n    // Optional: Delete a notification\n    @Delete('Delete/:Id')\n    async Delete(@Param('Id') Id: string, @CurrentUser() UserId: string, @UserIp() ip: string) {\n        await this._NotificationService.Delete(Id, UserId, ip);\n        return this.SendResponse(ResponseEnum.Success, ResponseEnum.Deleted);\n    }\n\n}"],"names":["NotificationController","JWTAuthController","List","UserId","data","_NotificationService","GetAllByUserId","SendResponseData","Insert","body","ip","SendResponse","ResponseEnum","Success","Created","MarkAsRead","Id","Delete","Deleted","path","version"],"mappings":";;;;+BAUaA;;;eAAAA;;;wBAVmD;yBACxC;qCACY;mCACF;8BACE;mCACF;8BACL;;;;;;;;;;;;;;;AAItB,IAAA,AAAMA,yBAAN,MAAMA,+BAA+BC,oCAAiB;IAKzD,gCAAgC;IAChC,MACMC,KAAK,AAAeC,MAAc,EAAE;QACtC,MAAMC,OAAO,MAAM,IAAI,CAACC,oBAAoB,CAACC,cAAc,CAACH;QAC5D,OAAO,IAAI,CAACI,gBAAgB,CAACH;IACjC;IAEA,4BAA4B;IAC5B,MACMI,OACF,AAAQC,IAAuB,EAC/B,AAAeN,MAAc,EAC7B,AAAUO,EAAU,EACtB;QACE,MAAM,IAAI,CAACL,oBAAoB,CAACG,MAAM,CAACC,MAAMN,QAAQO;QACrD,OAAO,IAAI,CAACC,YAAY,CAACC,0BAAY,CAACC,OAAO,EAAED,0BAAY,CAACE,OAAO;IACvE;IAEA,sCAAsC;IACtC,MACMC,WAAW,AAAaC,EAAU,EAAE,AAAeb,MAAc,EAAE;QACrE,MAAMC,OAAO,MAAM,IAAI,CAACC,oBAAoB,CAACU,UAAU,CAACC,IAAIb;QAC5D,OAAO,IAAI,CAACI,gBAAgB,CAACH;IACjC;IAEA,kCAAkC;IAClC,MACMa,OAAO,AAAaD,EAAU,EAAE,AAAeb,MAAc,EAAE,AAAUO,EAAU,EAAE;QACvF,MAAM,IAAI,CAACL,oBAAoB,CAACY,MAAM,CAACD,IAAIb,QAAQO;QACnD,OAAO,IAAI,CAACC,YAAY,CAACC,0BAAY,CAACC,OAAO,EAAED,0BAAY,CAACM,OAAO;IACvE;IAlCA,YAAY,AAAQb,oBAAyC,CAAE;QAC3D,KAAK,SADWA,uBAAAA;IAEpB;AAkCJ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;QAvCcc,MAAM;QAAgBC,SAAS"}