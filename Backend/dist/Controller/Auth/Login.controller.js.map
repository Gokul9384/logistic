{"version":3,"sources":["../../../src/Controller/Auth/Login.controller.ts"],"sourcesContent":["import { Controller, Post, Body, Delete } from '@nestjs/common';\r\nimport { ApiTags } from '@nestjs/swagger';\r\nimport { ResponseEnum } from '@Helper/Enum/ResponseEnum';\r\nimport { ForgotPasswordModel, ResetPasswordModel } from '@Model/Admin/User.model';\r\nimport { UserLoginModel } from '@Model/Admin/UserLogin.model';\r\nimport { UserService } from '@Service/Admin/User.service';\r\nimport { AuthService } from '@Service/Auth/Auth.service';\r\nimport { AuthBaseController } from '@Controller/AuthBase.controller';\r\nimport { SignUpService } from '@Root/Service/Auth/SignUpService.service';\r\nimport { CustomerModel } from '@Model/CodeMove/Customer.model';\r\nimport { UserIp } from '@Root/Helper/Common.helper';\r\nimport { VendorModel } from '@Model/CodeMove/Vendor.model';\r\nimport { CacheService } from '@Root/Service/Cache.service';\r\n\r\n@Controller({ path: \"Auth\", version: '1' })\r\n@ApiTags(\"Auth\")\r\nexport class LoginController extends AuthBaseController {\r\n  constructor(\r\n    private _AuthService: AuthService,\r\n    private _UserService: UserService,\r\n    private _SignUpService: SignUpService,\r\n    private _CacheService: CacheService\r\n  ) {\r\n    super();\r\n  }\r\n\r\n  @Post('Login')\r\n  async UserLogin(@Body() UserLogin: UserLoginModel) {\r\n    const result = await this._AuthService.ValidateUser(UserLogin.email, UserLogin.password);\r\n    return { Type: ResponseEnum.Success, Message: 'Login Successfully', result };\r\n  }\r\n\r\n  @Post('ForgotPassword')\r\n  async ForgotPassword(@Body() ForgotPasswordData: ForgotPasswordModel) {\r\n    const Result = await this._UserService.ForgotPassword(ForgotPasswordData.email);\r\n    if (Result.status) {\r\n      return this.SendResponse(ResponseEnum.Success, \"Forgot password request accepted, please check mail\");\r\n    }\r\n    else {\r\n      return this.SendResponse(ResponseEnum.Error, Result.message);\r\n    }\r\n  }\r\n\r\n  @Post('ResetPassword')\r\n  async ResetPassword(@Body() ResetPasswordData: ResetPasswordModel) {\r\n    await this._UserService.ResetPassword(ResetPasswordData);\r\n    return this.SendResponse(ResponseEnum.Success, \"Password reseted successfully\");\r\n  }\r\n\r\n  @Post('CustomerSignUp')\r\n  async CustomerSignUp(@Body() CustomerData: CustomerModel, @UserIp() UserIp: string) {\r\n    await this._SignUpService.CustomerSignUp(CustomerData, UserIp);\r\n    return this.SendResponse(ResponseEnum.Success, ResponseEnum.Created);\r\n  }\r\n\r\n  @Post('VendorSignUp')\r\n  async VendorSignUp(@Body() VendorData: VendorModel, @UserIp() UserIp: string) {\r\n    await this._SignUpService.VendorSignUp(VendorData, UserIp);\r\n    return this.SendResponse(ResponseEnum.Success, ResponseEnum.Created);\r\n  }\r\n\r\n  @Delete('ClearCache')\r\n  async ClearCache() {\r\n    await this._CacheService.Flush();\r\n    return this.SendResponse(ResponseEnum.Success, \"Cache cleared successfully\");\r\n  }\r\n}\r\n"],"names":["LoginController","AuthBaseController","UserLogin","result","_AuthService","ValidateUser","email","password","Type","ResponseEnum","Success","Message","ForgotPassword","ForgotPasswordData","Result","_UserService","status","SendResponse","Error","message","ResetPassword","ResetPasswordData","CustomerSignUp","CustomerData","UserIp","_SignUpService","Created","VendorSignUp","VendorData","ClearCache","_CacheService","Flush","path","version"],"mappings":";;;;+BAgBaA;;;eAAAA;;;wBAhBkC;yBACvB;8BACK;2BAC2B;gCACzB;6BACH;6BACA;oCACO;sCACL;+BACA;8BACP;6BACK;8BACC;;;;;;;;;;;;;;;AAItB,IAAA,AAAMA,kBAAN,MAAMA,wBAAwBC,sCAAkB;IAUrD,MACMC,UAAU,AAAQA,SAAyB,EAAE;QACjD,MAAMC,SAAS,MAAM,IAAI,CAACC,YAAY,CAACC,YAAY,CAACH,UAAUI,KAAK,EAAEJ,UAAUK,QAAQ;QACvF,OAAO;YAAEC,MAAMC,0BAAY,CAACC,OAAO;YAAEC,SAAS;YAAsBR;QAAO;IAC7E;IAEA,MACMS,eAAe,AAAQC,kBAAuC,EAAE;QACpE,MAAMC,SAAS,MAAM,IAAI,CAACC,YAAY,CAACH,cAAc,CAACC,mBAAmBP,KAAK;QAC9E,IAAIQ,OAAOE,MAAM,EAAE;YACjB,OAAO,IAAI,CAACC,YAAY,CAACR,0BAAY,CAACC,OAAO,EAAE;QACjD,OACK;YACH,OAAO,IAAI,CAACO,YAAY,CAACR,0BAAY,CAACS,KAAK,EAAEJ,OAAOK,OAAO;QAC7D;IACF;IAEA,MACMC,cAAc,AAAQC,iBAAqC,EAAE;QACjE,MAAM,IAAI,CAACN,YAAY,CAACK,aAAa,CAACC;QACtC,OAAO,IAAI,CAACJ,YAAY,CAACR,0BAAY,CAACC,OAAO,EAAE;IACjD;IAEA,MACMY,eAAe,AAAQC,YAA2B,EAAE,AAAUC,MAAc,EAAE;QAClF,MAAM,IAAI,CAACC,cAAc,CAACH,cAAc,CAACC,cAAcC;QACvD,OAAO,IAAI,CAACP,YAAY,CAACR,0BAAY,CAACC,OAAO,EAAED,0BAAY,CAACiB,OAAO;IACrE;IAEA,MACMC,aAAa,AAAQC,UAAuB,EAAE,AAAUJ,MAAc,EAAE;QAC5E,MAAM,IAAI,CAACC,cAAc,CAACE,YAAY,CAACC,YAAYJ;QACnD,OAAO,IAAI,CAACP,YAAY,CAACR,0BAAY,CAACC,OAAO,EAAED,0BAAY,CAACiB,OAAO;IACrE;IAEA,MACMG,aAAa;QACjB,MAAM,IAAI,CAACC,aAAa,CAACC,KAAK;QAC9B,OAAO,IAAI,CAACd,YAAY,CAACR,0BAAY,CAACC,OAAO,EAAE;IACjD;IAhDA,YACE,AAAQN,YAAyB,EACjC,AAAQW,YAAyB,EACjC,AAAQU,cAA6B,EACrC,AAAQK,aAA2B,CACnC;QACA,KAAK,SALG1B,eAAAA,mBACAW,eAAAA,mBACAU,iBAAAA,qBACAK,gBAAAA;IAGV;AA0CF;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;QApDcE,MAAM;QAAQC,SAAS"}