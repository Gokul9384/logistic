{"version":3,"sources":["../src/app.module.ts"],"sourcesContent":["import { Module } from '@nestjs/common';\r\nimport { ConfigModule, ConfigService } from '@nestjs/config';\r\nimport { APP_FILTER } from '@nestjs/core';\r\nimport { JwtModule } from '@nestjs/jwt';\r\nimport { PassportModule } from '@nestjs/passport';\r\nimport { ServeStaticModule } from '@nestjs/serve-static';\r\nimport { TypeOrmModule } from '@nestjs/typeorm';\r\nimport { UserController } from '@Controller/Admin/User.controller';\r\nimport { UserRoleController } from '@Controller/Admin/UserRole.controller';\r\nimport { LoginController } from '@Controller/Auth/Login.controller';\r\nimport { ExceptionHelper } from '@Helper/Exception.helper';\r\nimport { UserService } from '@Service/Admin/User.service';\r\nimport { UserRoleService } from '@Service/Admin/UserRole.service';\r\nimport { AuthService } from '@Service/Auth/Auth.service';\r\nimport { JwtStrategy } from '@Service/Auth/JwtStrategy.service';\r\nimport { EmailService } from '@Service/Email.service';\r\nimport { EmailConfigController } from '@Controller/Admin/EmailConfig.controller';\r\nimport { EmailConfigService } from '@Service/Admin/EmailConfig.service';\r\nimport { CountryController } from '@Controller/Admin/Country.controller';\r\nimport { CurrencyController } from '@Controller/Admin/Currency.controller';\r\nimport { CountryService } from '@Service/Admin/Country.service';\r\nimport { CurrencyService } from '@Service/Admin/Currency.service';\r\nimport { CompanyController } from '@Controller/Admin/Company.controller';\r\nimport { CompanyService } from '@Service/Admin/Company.service';\r\nimport { CommonService } from '@Service/Common.service';\r\nimport Configuration from './Config/Configuration';\r\nimport { EncryptionService } from '@Service/Encryption.service';\r\nimport { CommonSeederService } from '@Database/Seeds/CommonSeeder.service';\r\nimport { MailerService } from '@Service/Mailer.service';\r\nimport { ErrorLogService } from '@Service/Admin/ErrorLog.service';\r\nimport { ErrorLogController } from '@Controller/Admin/ErrorLog.controller';\r\nimport { EventEmitterModule } from '@nestjs/event-emitter';\r\nimport { AuditLogService } from '@Service/Admin/AuditLog.service';\r\nimport { AuditLogController } from '@Controller/Admin/AuditLog.controller';\r\nimport { MulterModule } from '@nestjs/platform-express';\r\nimport { AutoNumberController } from '@Controller/Admin/AutoNumber.controller';\r\nimport { Redis } from 'ioredis';\r\nimport { CacheService } from '@Service/Cache.service';\r\nimport { StateService } from './Service/Admin/State.service';\r\nimport { CityService } from './Service/Admin/City.service';\r\nimport { StateController } from './Controller/Admin/State.controller';\r\nimport { CityController } from './Controller/Admin/City.controller';\r\nimport { VendorController } from './Controller/CodeMove/Vendor.controller';\r\nimport { VendorService } from './Service/CodeMove/Vendor.service';\r\nimport { CustomerService } from './Service/CodeMove/Customer.service';\r\nimport { CustomerController } from './Controller/CodeMove/Customer.controller';\r\nimport { OrderController } from './Controller/CodeMove/Order.controller';\r\nimport { OrderService } from './Service/CodeMove/Order.service';\r\nimport { DriverService } from './Service/CodeMove/Driver.service';\r\nimport { DeliveryService } from './Service/CodeMove/Delivery.service';\r\nimport { DriverController } from './Controller/CodeMove/Driver.controller';\r\nimport { DeliveryController } from './Controller/CodeMove/Delivery.controller';\r\nimport { QuoteController } from './Controller/CodeMove/Quote.controller';\r\nimport { QuoteService } from './Service/CodeMove/Quote.service';\r\nimport { SignUpService } from './Service/Auth/SignUpService.service';\r\nimport { NotificationController } from './Controller/CodeMove/Notification.controller';\r\nimport { NotificationService } from './Service/CodeMove/Notification.service';\r\nimport { RequirementController } from './Controller/CodeMove/Requirement.controller';\r\nimport { RequirementService } from './Service/CodeMove/Requirement.service';\r\nimport { BookingController } from './Controller/CodeMove/Booking.controller';\r\nimport { BookingService } from './Service/CodeMove/Booking.service';\r\nimport { CustomerQuoteController } from './Controller/CodeMove/CustomerQuote.controller';\r\nimport { CustomerQuoteService } from './Service/CodeMove/CustomerQuote.service';\r\nimport { DashboardController } from './Controller/CodeMove/Dashboard.controller';\r\nimport { DashboardService } from './Service/CodeMove/Dashboard.service';\r\nimport { VehicleTypeService } from './Service/CodeMove/VehicleType.service';\r\nimport { VehicleTypeController } from './Controller/CodeMove/VehicleType.controller';\r\nimport { ServiceAreaController } from './Controller/CodeMove/ServiceArea.controller';\r\nimport { ServiceAreaService } from './Service/CodeMove/ServiceArea.service';\r\nimport { VendorDashboardService } from './Service/CodeMove/VendorDashboard.service';\r\nimport { VendorDashboardController } from './Controller/CodeMove/VendorDashboard.controller';\r\nimport { CustomerDashboardController } from './Controller/CodeMove/CustomerDashboard.controller';\r\nimport { CustomerDashboardService } from './Service/CodeMove/CustomerDashboard.service';\r\nimport { DriverDashboardController } from './Controller/CodeMove/DriverDashboard.controller';\r\nimport { DriverDashboardService } from './Service/CodeMove/DriverDashboard.service';\r\n\r\n\r\n@Module({\r\n  imports: [\r\n    ServeStaticModule.forRoot({\r\n      rootPath: __dirname + '/client',\r\n      exclude: ['/api/*', 'swagger'],\r\n    }),\r\n    EventEmitterModule.forRoot({ maxListeners: 0 }),\r\n    ConfigModule.forRoot({ isGlobal: true, load: [Configuration] }),\r\n    MulterModule.register(),\r\n    TypeOrmModule.forRootAsync({\r\n      imports: [ConfigModule],\r\n      useFactory: (_ConfigService: ConfigService) => ({\r\n        type: 'mysql',\r\n        host: _ConfigService.get(\"Database.Host\"),\r\n        port: _ConfigService.get(\"Database.Port\"),\r\n        username: _ConfigService.get(\"Database.User\"),\r\n        password: _ConfigService.get(\"Database.Password\"),\r\n        database: _ConfigService.get(\"Database.Name\"),\r\n        synchronize: _ConfigService.get(\"Database.Sync\"),\r\n        keepConnectionAlive: true,\r\n        entities: [__dirname + '/Database/**/*.{ts,js}'],\r\n        logger: \"advanced-console\",\r\n        logging: _ConfigService.get(\"Database.LOG\"),\r\n        bigNumberStrings: false,\r\n        supportBigNumbers: true,\r\n        dateStrings: true,\r\n        timezone: \"local\",\r\n        ssl: {\r\n          rejectUnauthorized: false\r\n        }\r\n      }),\r\n      inject: [ConfigService]\r\n    }),\r\n    PassportModule.register({\r\n      defaultStrategy: 'jwt',\r\n      session: true,\r\n      property: 'user',\r\n    }),\r\n    JwtModule.registerAsync({\r\n      imports: [ConfigModule],\r\n      useFactory: (_ConfigService: ConfigService) => ({\r\n        secret: _ConfigService.get(\"JWT.SecertToken\"),\r\n        signOptions: { expiresIn: _ConfigService.get(\"JWT.ExpiresIn\") },\r\n      }),\r\n      inject: [ConfigService]\r\n\r\n    }),\r\n  ],\r\n  controllers: [\r\n    LoginController,\r\n    UserController,\r\n    UserRoleController,\r\n    EmailConfigController,\r\n    CountryController,\r\n    CurrencyController,\r\n    CompanyController,\r\n    ErrorLogController,\r\n    AuditLogController,\r\n    AutoNumberController,\r\n    StateController,\r\n    CityController,\r\n    VendorController,\r\n    CustomerController,\r\n    OrderController,\r\n    DriverController,\r\n    DeliveryController,\r\n    QuoteController,\r\n    NotificationController,\r\n    RequirementController,\r\n    BookingController,\r\n    CustomerQuoteController,\r\n    DashboardController,\r\n    VehicleTypeController,\r\n    ServiceAreaController,\r\n    VendorDashboardController,\r\n    CustomerDashboardController,\r\n    DriverDashboardController\r\n  ],\r\n  providers: [\r\n    AuthService,\r\n    UserService,\r\n    UserRoleService,\r\n    EmailService,\r\n    EmailConfigService,\r\n    CountryService,\r\n    CurrencyService,\r\n    CompanyService,\r\n    CommonService,\r\n    JwtStrategy,\r\n    ErrorLogService,\r\n    AuditLogService,\r\n    StateService,\r\n    CityService,\r\n    VendorService,\r\n    CustomerService,\r\n    OrderService,\r\n    DriverService,\r\n    DeliveryService,\r\n    QuoteService,\r\n    SignUpService,\r\n    NotificationService,\r\n    RequirementService,\r\n    BookingService,\r\n    CustomerQuoteService,\r\n    DashboardService,\r\n    VehicleTypeService,\r\n    ServiceAreaService,\r\n    VendorDashboardService,\r\n    CustomerDashboardService,\r\n    DriverDashboardService,\r\n    {\r\n      provide: APP_FILTER,\r\n      useClass: ExceptionHelper,\r\n    },\r\n    MailerService,\r\n    EncryptionService,\r\n    CommonSeederService,\r\n    CacheService,\r\n    {\r\n      provide: \"REDIS_CLIENT\",\r\n      useFactory: () => {\r\n        return new Redis({\r\n          host: process.env.REDIS_HOST,\r\n          port: Number(process.env.REDIS_PORT),\r\n        });\r\n      },\r\n    },\r\n    CacheService\r\n  ],\r\n  exports: [AuthService, EncryptionService],\r\n})\r\nexport class AppModule {\r\n}\r\n"],"names":["AppModule","imports","ServeStaticModule","forRoot","rootPath","__dirname","exclude","EventEmitterModule","maxListeners","ConfigModule","isGlobal","load","Configuration","MulterModule","register","TypeOrmModule","forRootAsync","useFactory","_ConfigService","type","host","get","port","username","password","database","synchronize","keepConnectionAlive","entities","logger","logging","bigNumberStrings","supportBigNumbers","dateStrings","timezone","ssl","rejectUnauthorized","inject","ConfigService","PassportModule","defaultStrategy","session","property","JwtModule","registerAsync","secret","signOptions","expiresIn","controllers","LoginController","UserController","UserRoleController","EmailConfigController","CountryController","CurrencyController","CompanyController","ErrorLogController","AuditLogController","AutoNumberController","StateController","CityController","VendorController","CustomerController","OrderController","DriverController","DeliveryController","QuoteController","NotificationController","RequirementController","BookingController","CustomerQuoteController","DashboardController","VehicleTypeController","ServiceAreaController","VendorDashboardController","CustomerDashboardController","DriverDashboardController","providers","AuthService","UserService","UserRoleService","EmailService","EmailConfigService","CountryService","CurrencyService","CompanyService","CommonService","JwtStrategy","ErrorLogService","AuditLogService","StateService","CityService","VendorService","CustomerService","OrderService","DriverService","DeliveryService","QuoteService","SignUpService","NotificationService","RequirementService","BookingService","CustomerQuoteService","DashboardService","VehicleTypeService","ServiceAreaService","VendorDashboardService","CustomerDashboardService","DriverDashboardService","provide","APP_FILTER","useClass","ExceptionHelper","MailerService","EncryptionService","CommonSeederService","CacheService","Redis","process","env","REDIS_HOST","Number","REDIS_PORT","exports"],"mappings":"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"}