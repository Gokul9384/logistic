{"version":3,"sources":["../../src/Service/Email.service.ts"],"sourcesContent":["import { Injectable } from '@nestjs/common';\r\nimport { MailerService } from './Mailer.service';\r\nimport { CommonService } from './Common.service';\r\nimport { Any } from 'typeorm';\r\n\r\n@Injectable()\r\nexport class EmailService {\r\n  constructor(\r\n    private readonly _MailerService: MailerService,\r\n    private readonly _CommonService: CommonService,\r\n  ) {\r\n  }\r\n\r\n\r\n  async ForgotPassword(EmailId: string, ResetOTP: number, EncryptedUserId: string) {\r\n    const Res = await this._MailerService.SendMail({\r\n      to: EmailId,\r\n      subject: \"Forgot password request\",\r\n      template: \"ForgotPassword\",\r\n      html: true,\r\n      attachments: [\r\n        {\r\n          filename: 'logo.png',\r\n          content: this._CommonService.GetBase64(`dist/Assets/Logo.jpg`),\r\n          cid: 'logo',\r\n          encoding: 'base64'\r\n        }],\r\n      context: {\r\n        logo: \"cid:logo\",\r\n        domain_name: process.env.DOMAIN_NAME + \"/auth/cover-password-reset/\" + EncryptedUserId,\r\n        otp: ResetOTP\r\n      },\r\n    });\r\n    return Res;\r\n  }\r\n\r\n  async SendWarrantyCertificate(EmailId: string, CertificatePath: string, CustomerName: string, ProductName: string, WarrantyStartDate: string, WarrantyEndDate: string) {\r\n    const Res = await this._MailerService.SendMail({\r\n      to: EmailId,\r\n      subject: \"Your Warranty Registration Certificate\",\r\n      template: \"WarrantyRegistration\",\r\n      html: true,\r\n      attachments: [\r\n        {\r\n          filename: 'logo.png',\r\n          content: this._CommonService.GetBase64(`dist/Assets/Logo.jpg`),\r\n          cid: 'logo',\r\n          encoding: 'base64'\r\n        },\r\n        {\r\n          filename: `Warranty_Certificate.pdf`,\r\n          path: CertificatePath\r\n        }\r\n      ],\r\n      context: {\r\n        logo: \"cid:logo\",\r\n        customer_name: CustomerName,\r\n        product_name: ProductName,\r\n        warranty_start_date: WarrantyStartDate,\r\n        warranty_end_date: WarrantyEndDate,\r\n        domain_name: process.env.DOMAIN_NAME\r\n      },\r\n    });\r\n\r\n    return Res;\r\n  }\r\n\r\n  async VerificationOtp(CustomerEmailData: string, VerificationOTP: number) {\r\n    const Res = await this._MailerService.SendMail({\r\n      to: CustomerEmailData,\r\n      subject: \"Account Verification OTP\",\r\n      template: \"VerificationOTP\",\r\n      html: true,\r\n      attachments: [\r\n        {\r\n          filename: 'logo.png',\r\n          content: this._CommonService.GetBase64(`dist/Assets/Logo.jpg`),\r\n          cid: 'logo',\r\n          encoding: 'base64'\r\n        }],\r\n      context: {\r\n        logo: \"cid:logo\",\r\n        otp: VerificationOTP\r\n      },\r\n    });\r\n    return Res;\r\n  }\r\n\r\n  async SendRegistrationOtp(CustomerVerificationData: string, CustomerOTP: number) {\r\n    const Res = await this._MailerService.SendMail({\r\n      to: CustomerVerificationData,\r\n      subject: \"Customer Registration OTP\",\r\n      template: \"CustomerRegistrationOtp\",\r\n      html: true,\r\n      attachments: [\r\n        {\r\n          filename: 'logo.png',\r\n          content: this._CommonService.GetBase64(`dist/Assets/Logo.jpg`),\r\n          cid: 'logo',\r\n          encoding: 'base64'\r\n        }],\r\n      context: {\r\n        logo: \"cid:logo\",\r\n        otp: CustomerOTP\r\n      },\r\n    });\r\n    return Res;\r\n  }\r\n\r\n}\r\n"],"names":["EmailService","ForgotPassword","EmailId","ResetOTP","EncryptedUserId","Res","_MailerService","SendMail","to","subject","template","html","attachments","filename","content","_CommonService","GetBase64","cid","encoding","context","logo","domain_name","process","env","DOMAIN_NAME","otp","SendWarrantyCertificate","CertificatePath","CustomerName","ProductName","WarrantyStartDate","WarrantyEndDate","path","customer_name","product_name","warranty_start_date","warranty_end_date","VerificationOtp","CustomerEmailData","VerificationOTP","SendRegistrationOtp","CustomerVerificationData","CustomerOTP"],"mappings":";;;;+BAMaA;;;eAAAA;;;wBANc;+BACG;+BACA;;;;;;;;;;AAIvB,IAAA,AAAMA,eAAN,MAAMA;IAQX,MAAMC,eAAeC,OAAe,EAAEC,QAAgB,EAAEC,eAAuB,EAAE;QAC/E,MAAMC,MAAM,MAAM,IAAI,CAACC,cAAc,CAACC,QAAQ,CAAC;YAC7CC,IAAIN;YACJO,SAAS;YACTC,UAAU;YACVC,MAAM;YACNC,aAAa;gBACX;oBACEC,UAAU;oBACVC,SAAS,IAAI,CAACC,cAAc,CAACC,SAAS,CAAC,CAAC,oBAAoB,CAAC;oBAC7DC,KAAK;oBACLC,UAAU;gBACZ;aAAE;YACJC,SAAS;gBACPC,MAAM;gBACNC,aAAaC,QAAQC,GAAG,CAACC,WAAW,GAAG,gCAAgCpB;gBACvEqB,KAAKtB;YACP;QACF;QACA,OAAOE;IACT;IAEA,MAAMqB,wBAAwBxB,OAAe,EAAEyB,eAAuB,EAAEC,YAAoB,EAAEC,WAAmB,EAAEC,iBAAyB,EAAEC,eAAuB,EAAE;QACrK,MAAM1B,MAAM,MAAM,IAAI,CAACC,cAAc,CAACC,QAAQ,CAAC;YAC7CC,IAAIN;YACJO,SAAS;YACTC,UAAU;YACVC,MAAM;YACNC,aAAa;gBACX;oBACEC,UAAU;oBACVC,SAAS,IAAI,CAACC,cAAc,CAACC,SAAS,CAAC,CAAC,oBAAoB,CAAC;oBAC7DC,KAAK;oBACLC,UAAU;gBACZ;gBACA;oBACEL,UAAU,CAAC,wBAAwB,CAAC;oBACpCmB,MAAML;gBACR;aACD;YACDR,SAAS;gBACPC,MAAM;gBACNa,eAAeL;gBACfM,cAAcL;gBACdM,qBAAqBL;gBACrBM,mBAAmBL;gBACnBV,aAAaC,QAAQC,GAAG,CAACC,WAAW;YACtC;QACF;QAEA,OAAOnB;IACT;IAEA,MAAMgC,gBAAgBC,iBAAyB,EAAEC,eAAuB,EAAE;QACxE,MAAMlC,MAAM,MAAM,IAAI,CAACC,cAAc,CAACC,QAAQ,CAAC;YAC7CC,IAAI8B;YACJ7B,SAAS;YACTC,UAAU;YACVC,MAAM;YACNC,aAAa;gBACX;oBACEC,UAAU;oBACVC,SAAS,IAAI,CAACC,cAAc,CAACC,SAAS,CAAC,CAAC,oBAAoB,CAAC;oBAC7DC,KAAK;oBACLC,UAAU;gBACZ;aAAE;YACJC,SAAS;gBACPC,MAAM;gBACNK,KAAKc;YACP;QACF;QACA,OAAOlC;IACT;IAEA,MAAMmC,oBAAoBC,wBAAgC,EAAEC,WAAmB,EAAE;QAC/E,MAAMrC,MAAM,MAAM,IAAI,CAACC,cAAc,CAACC,QAAQ,CAAC;YAC7CC,IAAIiC;YACJhC,SAAS;YACTC,UAAU;YACVC,MAAM;YACNC,aAAa;gBACX;oBACEC,UAAU;oBACVC,SAAS,IAAI,CAACC,cAAc,CAACC,SAAS,CAAC,CAAC,oBAAoB,CAAC;oBAC7DC,KAAK;oBACLC,UAAU;gBACZ;aAAE;YACJC,SAAS;gBACPC,MAAM;gBACNK,KAAKiB;YACP;QACF;QACA,OAAOrC;IACT;IApGA,YACE,AAAiBC,cAA6B,EAC9C,AAAiBS,cAA6B,CAC9C;aAFiBT,iBAAAA;aACAS,iBAAAA;IAEnB;AAkGF"}