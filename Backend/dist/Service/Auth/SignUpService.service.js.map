{"version":3,"sources":["../../../src/Service/Auth/SignUpService.service.ts"],"sourcesContent":["import { Injectable } from \"@nestjs/common\";\nimport { LogActionEnum } from \"@Root/Helper/Enum/AuditLogEnum\";\nimport { AuditLogService } from \"../Admin/AuditLog.service\";\nimport { customer } from \"@Root/Database/Table/CodeMove/customer\";\nimport { ResponseEnum } from \"@Root/Helper/Enum/ResponseEnum\";\nimport { CustomerModel } from \"@Model/CodeMove/Customer.model\";\nimport { user } from \"@Root/Database/Table/Admin/user\";\nimport { user_role } from \"@Root/Database/Table/Admin/user_role\";\nimport _ from \"lodash\";\nimport { VendorModel } from \"@Model/CodeMove/Vendor.model\";\nimport { vendor } from \"@Root/Database/Table/CodeMove/vendor\";\nimport { EncryptionService } from \"../Encryption.service\";\n\n@Injectable()\nexport class SignUpService {\n    constructor(private _AuditLogService: AuditLogService, private _EncryptionService: EncryptionService) { }\n\n\n\n    async CustomerSignUp(CustomerData: CustomerModel, UserIp: string) {\n        const UserRoleData = await user_role.findOne({ where: { name: \"Customer\" } });\n        if (!UserRoleData) {\n            throw new Error(ResponseEnum.NotFound);\n        }\n        const _userData = new user();\n        _userData.first_name = CustomerData.name;\n        _userData.user_role_id = UserRoleData.id;\n        _userData.email = CustomerData.email;\n        _userData.password = this._EncryptionService.Encrypt(CustomerData.password);\n        _userData.mobile = CustomerData.mobile;\n        _userData.created_by_id = \"1\";\n        _userData.created_on = new Date();\n        await user.insert(_userData);\n\n\n        const _CustomerData = new customer();\n        _CustomerData.user_id = _userData.id;\n        _CustomerData.name = CustomerData.name;\n        _CustomerData.email = CustomerData.email;\n        _CustomerData.mobile = CustomerData.mobile;\n        _CustomerData.gst_number = CustomerData.gst_number;\n        _CustomerData.created_by_id = _userData.id;\n        _CustomerData.created_on = new Date();\n\n        await customer.insert(_CustomerData);\n        this._AuditLogService.AuditEmitEvent({\n            PerformedType: customer.name,\n            ActionType: LogActionEnum.SignUp,\n            PrimaryId: [_CustomerData.id],\n            UserIp: UserIp\n        });\n\n        return _CustomerData;\n    }\n\n    async VendorSignUp(VendorData: VendorModel, UserIp: string) {\n        const UserRoleData = await user_role.findOne({ where: { name: \"Vendor\" } });\n        if (!UserRoleData) {\n            throw new Error(ResponseEnum.NotFound);\n        }\n        const _userData = new user();\n        _userData.first_name = VendorData.company_name;\n        _userData.user_role_id = UserRoleData.id;\n        _userData.email = VendorData.email;\n        _userData.password = this._EncryptionService.Encrypt(VendorData.password);\n        _userData.mobile = VendorData.mobile;\n        _userData.created_by_id = '1';\n        _userData.created_on = new Date();\n        await user.insert(_userData);\n\n        const _VendorData = new vendor();\n        _VendorData.user_id = _userData.id;\n        _VendorData.company_name = VendorData.company_name;\n        _VendorData.address = VendorData.address;\n        _VendorData.email = VendorData.email;\n        _VendorData.mobile = VendorData.mobile;\n        _VendorData.created_by_id = _userData.id;\n        _VendorData.created_on = new Date();\n\n        await vendor.insert(_VendorData);\n        this._AuditLogService.AuditEmitEvent({\n            PerformedType: vendor.name,\n            ActionType: LogActionEnum.SignUp,\n            PrimaryId: [_VendorData.id],\n            UserIp: UserIp\n        });\n        return _VendorData;\n    }\n\n}\n"],"names":["SignUpService","CustomerSignUp","CustomerData","UserIp","UserRoleData","user_role","findOne","where","name","Error","ResponseEnum","NotFound","_userData","user","first_name","user_role_id","id","email","password","_EncryptionService","Encrypt","mobile","created_by_id","created_on","Date","insert","_CustomerData","customer","user_id","gst_number","_AuditLogService","AuditEmitEvent","PerformedType","ActionType","LogActionEnum","SignUp","PrimaryId","VendorSignUp","VendorData","company_name","_VendorData","vendor","address"],"mappings":"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"}