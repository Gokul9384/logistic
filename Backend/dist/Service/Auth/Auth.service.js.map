{"version":3,"sources":["../../../src/Service/Auth/Auth.service.ts"],"sourcesContent":["import { Injectable } from '@nestjs/common';\r\nimport { JwtService } from '@nestjs/jwt';\r\nimport { company } from '@Database/Table/Admin/company';\r\nimport { user } from '@Database/Table/Admin/user';\r\nimport { EncryptionService } from '../Encryption.service';\r\n\r\n@Injectable()\r\nexport class AuthService {\r\n  constructor(private _JwtService: JwtService, private _EncryptionService: EncryptionService) { }\r\n\r\n  async ValidateUser(username: string, password: string): Promise<any> {\r\n    const UserData = await user.findOne({ where: { email: username }, relations: ['user_role'] });\r\n    const CompanyData = await company.find({ relations: [\"currency\"] });\r\n    if (!UserData) {\r\n      throw new Error('Invalid email id');\r\n    }\r\n    if (UserData.status == false) {\r\n      throw new Error('User suspended, contanct administration');\r\n    }\r\n    if (this._EncryptionService.Decrypt(UserData.password) != password) {\r\n      throw new Error('Invalid password');\r\n    }\r\n    const payload = {\r\n      email: UserData.email,\r\n      user_id: UserData.id,\r\n      user_role_id: UserData.user_role_id,\r\n      user_role_name: UserData.user_role.name,\r\n      user_role_code: UserData.user_role.code,\r\n      user_role_landing_page: UserData.user_role.landing_page,\r\n      user_role_permissions: UserData.user_role.permissions,\r\n      is_profile_updated: UserData.is_profile_updated,\r\n      company: CompanyData[0],\r\n    };\r\n    const api_token = this._JwtService.sign(payload);\r\n    return { api_token };\r\n  }\r\n\r\n}\r\n"],"names":["AuthService","ValidateUser","username","password","UserData","user","findOne","where","email","relations","CompanyData","company","find","Error","status","_EncryptionService","Decrypt","payload","user_id","id","user_role_id","user_role_name","user_role","name","user_role_code","code","user_role_landing_page","landing_page","user_role_permissions","permissions","is_profile_updated","api_token","_JwtService","sign"],"mappings":";;;;+BAOaA;;;eAAAA;;;wBAPc;qBACA;yBACH;sBACH;mCACa;;;;;;;;;;AAG3B,IAAA,AAAMA,cAAN,MAAMA;IAGX,MAAMC,aAAaC,QAAgB,EAAEC,QAAgB,EAAgB;QACnE,MAAMC,WAAW,MAAMC,UAAI,CAACC,OAAO,CAAC;YAAEC,OAAO;gBAAEC,OAAON;YAAS;YAAGO,WAAW;gBAAC;aAAY;QAAC;QAC3F,MAAMC,cAAc,MAAMC,gBAAO,CAACC,IAAI,CAAC;YAAEH,WAAW;gBAAC;aAAW;QAAC;QACjE,IAAI,CAACL,UAAU;YACb,MAAM,IAAIS,MAAM;QAClB;QACA,IAAIT,SAASU,MAAM,IAAI,OAAO;YAC5B,MAAM,IAAID,MAAM;QAClB;QACA,IAAI,IAAI,CAACE,kBAAkB,CAACC,OAAO,CAACZ,SAASD,QAAQ,KAAKA,UAAU;YAClE,MAAM,IAAIU,MAAM;QAClB;QACA,MAAMI,UAAU;YACdT,OAAOJ,SAASI,KAAK;YACrBU,SAASd,SAASe,EAAE;YACpBC,cAAchB,SAASgB,YAAY;YACnCC,gBAAgBjB,SAASkB,SAAS,CAACC,IAAI;YACvCC,gBAAgBpB,SAASkB,SAAS,CAACG,IAAI;YACvCC,wBAAwBtB,SAASkB,SAAS,CAACK,YAAY;YACvDC,uBAAuBxB,SAASkB,SAAS,CAACO,WAAW;YACrDC,oBAAoB1B,SAAS0B,kBAAkB;YAC/CnB,SAASD,WAAW,CAAC,EAAE;QACzB;QACA,MAAMqB,YAAY,IAAI,CAACC,WAAW,CAACC,IAAI,CAAChB;QACxC,OAAO;YAAEc;QAAU;IACrB;IA3BA,YAAY,AAAQC,WAAuB,EAAE,AAAQjB,kBAAqC,CAAE;aAAxEiB,cAAAA;aAAiCjB,qBAAAA;IAAyC;AA6BhG"}