{"version":3,"sources":["../../src/Service/Cache.service.ts"],"sourcesContent":["import { Inject, Injectable } from '@nestjs/common';\r\nimport { Redis } from 'ioredis';\r\n\r\n@Injectable()\r\nexport class CacheService {\r\n  private ProjectName = \"eca_boilers:\"\r\n  constructor(\r\n    @Inject(\"REDIS_CLIENT\") private readonly redisClient: Redis\r\n  ) { }\r\n\r\n\r\n  async Get(Key: string) {\r\n    if (process.env.REDIS_ENABLE == \"false\") {\r\n      return [];\r\n    }\r\n    const Keys = await this.redisClient.keys(this.ProjectName + Key);\r\n    if (Keys.length > 0) {\r\n      const ResultData = await this.redisClient.mget(...Keys);\r\n      return ResultData.map((data) => JSON.parse(data));\r\n    }\r\n    else {\r\n      return [];\r\n    }\r\n  }\r\n\r\n  async Store(Key: string, DataList: any) {\r\n    if (process.env.REDIS_ENABLE == \"false\") {\r\n      return;\r\n    }\r\n    for (const Data of DataList) {\r\n      if (Data.Type == \"E\") {\r\n        return;\r\n      }\r\n      await this.redisClient.set(`${this.ProjectName + Key}:${Data.id}`, JSON.stringify(Data));\r\n    }\r\n  }\r\n\r\n  async SetExpiration(Key: string, ttl: number) {\r\n    if (process.env.REDIS_ENABLE == \"false\") {\r\n      return;\r\n    }\r\n    // Set expiration for the given key\r\n    await this.redisClient.expire(`${this.ProjectName + Key}`, ttl);\r\n  }\r\n\r\n  async Remove(Key: string, DataList: any) {\r\n    if (process.env.REDIS_ENABLE == \"false\") {\r\n      return;\r\n    }\r\n    if (DataList.Type == \"E\") {\r\n      return;\r\n    }\r\n    await this.redisClient.del(`${this.ProjectName + Key}`);\r\n  }\r\n\r\n  async Flush() {\r\n    const Keys = await this.redisClient.keys(this.ProjectName + '*');\r\n    console.log(Keys);\r\n    await this.redisClient.del(Keys);\r\n  }\r\n\r\n\r\n}\r\n"],"names":["CacheService","Get","Key","process","env","REDIS_ENABLE","Keys","redisClient","keys","ProjectName","length","ResultData","mget","map","data","JSON","parse","Store","DataList","Data","Type","set","id","stringify","SetExpiration","ttl","expire","Remove","del","Flush","console","log"],"mappings":";;;;+BAIaA;;;eAAAA;;;wBAJsB;yBACb;;;;;;;;;;;;;;;AAGf,IAAA,AAAMA,eAAN,MAAMA;IAOX,MAAMC,IAAIC,GAAW,EAAE;QACrB,IAAIC,QAAQC,GAAG,CAACC,YAAY,IAAI,SAAS;YACvC,OAAO,EAAE;QACX;QACA,MAAMC,OAAO,MAAM,IAAI,CAACC,WAAW,CAACC,IAAI,CAAC,IAAI,CAACC,WAAW,GAAGP;QAC5D,IAAII,KAAKI,MAAM,GAAG,GAAG;YACnB,MAAMC,aAAa,MAAM,IAAI,CAACJ,WAAW,CAACK,IAAI,IAAIN;YAClD,OAAOK,WAAWE,GAAG,CAAC,CAACC,OAASC,KAAKC,KAAK,CAACF;QAC7C,OACK;YACH,OAAO,EAAE;QACX;IACF;IAEA,MAAMG,MAAMf,GAAW,EAAEgB,QAAa,EAAE;QACtC,IAAIf,QAAQC,GAAG,CAACC,YAAY,IAAI,SAAS;YACvC;QACF;QACA,KAAK,MAAMc,QAAQD,SAAU;YAC3B,IAAIC,KAAKC,IAAI,IAAI,KAAK;gBACpB;YACF;YACA,MAAM,IAAI,CAACb,WAAW,CAACc,GAAG,CAAC,GAAG,IAAI,CAACZ,WAAW,GAAGP,IAAI,CAAC,EAAEiB,KAAKG,EAAE,EAAE,EAAEP,KAAKQ,SAAS,CAACJ;QACpF;IACF;IAEA,MAAMK,cAActB,GAAW,EAAEuB,GAAW,EAAE;QAC5C,IAAItB,QAAQC,GAAG,CAACC,YAAY,IAAI,SAAS;YACvC;QACF;QACA,mCAAmC;QACnC,MAAM,IAAI,CAACE,WAAW,CAACmB,MAAM,CAAC,GAAG,IAAI,CAACjB,WAAW,GAAGP,KAAK,EAAEuB;IAC7D;IAEA,MAAME,OAAOzB,GAAW,EAAEgB,QAAa,EAAE;QACvC,IAAIf,QAAQC,GAAG,CAACC,YAAY,IAAI,SAAS;YACvC;QACF;QACA,IAAIa,SAASE,IAAI,IAAI,KAAK;YACxB;QACF;QACA,MAAM,IAAI,CAACb,WAAW,CAACqB,GAAG,CAAC,GAAG,IAAI,CAACnB,WAAW,GAAGP,KAAK;IACxD;IAEA,MAAM2B,QAAQ;QACZ,MAAMvB,OAAO,MAAM,IAAI,CAACC,WAAW,CAACC,IAAI,CAAC,IAAI,CAACC,WAAW,GAAG;QAC5DqB,QAAQC,GAAG,CAACzB;QACZ,MAAM,IAAI,CAACC,WAAW,CAACqB,GAAG,CAACtB;IAC7B;IArDA,YACE,AAAyCC,WAAkB,CAC3D;aADyCA,cAAAA;aAFnCE,cAAc;IAGlB;AAsDN"}