{"version":3,"sources":["../../src/Service/Mailer.service.ts"],"sourcesContent":["import { Injectable, Logger } from '@nestjs/common';\r\nimport { email_config } from '@Database/Table/Admin/email_config';\r\nimport nodemailer from \"nodemailer\";\r\nimport { EncryptionService } from './Encryption.service';\r\nimport handlebars from \"handlebars\";\r\nimport path from \"path\";\r\nimport fs from 'fs';\r\nimport utils from 'util';\r\nimport { Attachment } from 'nodemailer/lib/mailer';\r\nconst readFile = utils.promisify(fs.readFile)\r\n\r\ninterface SendMailData {\r\n  to: string,\r\n  subject: string,\r\n  template: string,\r\n  context: {},\r\n  html: boolean,\r\n  bcc?: string[],\r\n  attachments?: Attachment[] | undefined\r\n}\r\n\r\n@Injectable()\r\nexport class MailerService {\r\n  private readonly logger = new Logger(MailerService.name);\r\n  constructor(\r\n    private readonly _EncryptionService: EncryptionService\r\n  ) {\r\n  }\r\n\r\n  private async Configuration() {\r\n    const Email = await email_config.find();\r\n    if (Email.length == 0) {\r\n      this.logger.error(\"Email config don't have data\");\r\n      return null;\r\n    }\r\n    var smtpTransport = nodemailer.createTransport({\r\n      host: Email[0].host,\r\n      auth: {\r\n        user: Email[0].email_id,\r\n        pass: this._EncryptionService.Decrypt(Email[0].password)\r\n      }\r\n    });\r\n    this.logger.error(\"Email configurated successfully\");\r\n    return { smtpTransport, Email };\r\n  }\r\n\r\n  async SendMail(_SendMailData: SendMailData) {\r\n    try {\r\n      const SmtpTransport = await this.Configuration();\r\n      if (!SmtpTransport.smtpTransport) {\r\n        this.logger.error(\"Email not configured yet.\");\r\n        return { status: false, message: \"Email not configured yet.\" };\r\n      }\r\n      const mail = {\r\n        from: { name: SmtpTransport.Email[0].mailer_name, address: SmtpTransport.Email[0].email_id },\r\n        to: _SendMailData.to,\r\n        subject: _SendMailData.subject,\r\n        text: _SendMailData.template,\r\n        bcc: _SendMailData.bcc,\r\n        attachments: _SendMailData.attachments\r\n      }\r\n      if (_SendMailData.template && _SendMailData.html) {\r\n        const MailTemplatePath = path.resolve(`dist/Assets/MailTemplate/${_SendMailData.template}.hbs`);\r\n        const ContentResult = await readFile(MailTemplatePath, 'utf8');\r\n        const Template = handlebars.compile(ContentResult, { strict: true });\r\n        mail[\"html\"] = Template(_SendMailData.context);\r\n      }\r\n      else {\r\n        mail[\"text\"] = _SendMailData.template;\r\n      }\r\n      let SendMailPromise = new Promise<{ status: boolean, message: string }>((resolve, _reject) => {\r\n        SmtpTransport.smtpTransport.sendMail(mail, async (error: any, _response: any) => {\r\n          if (error) {\r\n            this.logger.error(error);\r\n            SmtpTransport.smtpTransport.close();\r\n            resolve({ status: false, message: JSON.stringify(error) });\r\n          } else {\r\n            SmtpTransport.smtpTransport.close();\r\n            resolve({ status: true, message: 'Message has been sent' });\r\n          }\r\n        });\r\n      });\r\n      return await SendMailPromise;\r\n    }\r\n    catch (e) {\r\n      return { status: false, message: e.message };\r\n    }\r\n  }\r\n}\r\n"],"names":["MailerService","readFile","utils","promisify","fs","Configuration","Email","email_config","find","length","logger","error","smtpTransport","nodemailer","createTransport","host","auth","user","email_id","pass","_EncryptionService","Decrypt","password","SendMail","_SendMailData","SmtpTransport","status","message","mail","from","name","mailer_name","address","to","subject","text","template","bcc","attachments","html","MailTemplatePath","path","resolve","ContentResult","Template","handlebars","compile","strict","context","SendMailPromise","Promise","_reject","sendMail","_response","close","JSON","stringify","e","Logger"],"mappings":";;;;+BAsBaA;;;eAAAA;;;wBAtBsB;8BACN;mEACN;mCACW;mEACX;6DACN;2DACF;6DACG;;;;;;;;;;;;;;;AAElB,MAAMC,WAAWC,aAAK,CAACC,SAAS,CAACC,WAAE,CAACH,QAAQ;AAarC,IAAA,AAAMD,gBAAN,MAAMA;IAOX,MAAcK,gBAAgB;QAC5B,MAAMC,QAAQ,MAAMC,0BAAY,CAACC,IAAI;QACrC,IAAIF,MAAMG,MAAM,IAAI,GAAG;YACrB,IAAI,CAACC,MAAM,CAACC,KAAK,CAAC;YAClB,OAAO;QACT;QACA,IAAIC,gBAAgBC,mBAAU,CAACC,eAAe,CAAC;YAC7CC,MAAMT,KAAK,CAAC,EAAE,CAACS,IAAI;YACnBC,MAAM;gBACJC,MAAMX,KAAK,CAAC,EAAE,CAACY,QAAQ;gBACvBC,MAAM,IAAI,CAACC,kBAAkB,CAACC,OAAO,CAACf,KAAK,CAAC,EAAE,CAACgB,QAAQ;YACzD;QACF;QACA,IAAI,CAACZ,MAAM,CAACC,KAAK,CAAC;QAClB,OAAO;YAAEC;YAAeN;QAAM;IAChC;IAEA,MAAMiB,SAASC,aAA2B,EAAE;QAC1C,IAAI;YACF,MAAMC,gBAAgB,MAAM,IAAI,CAACpB,aAAa;YAC9C,IAAI,CAACoB,cAAcb,aAAa,EAAE;gBAChC,IAAI,CAACF,MAAM,CAACC,KAAK,CAAC;gBAClB,OAAO;oBAAEe,QAAQ;oBAAOC,SAAS;gBAA4B;YAC/D;YACA,MAAMC,OAAO;gBACXC,MAAM;oBAAEC,MAAML,cAAcnB,KAAK,CAAC,EAAE,CAACyB,WAAW;oBAAEC,SAASP,cAAcnB,KAAK,CAAC,EAAE,CAACY,QAAQ;gBAAC;gBAC3Fe,IAAIT,cAAcS,EAAE;gBACpBC,SAASV,cAAcU,OAAO;gBAC9BC,MAAMX,cAAcY,QAAQ;gBAC5BC,KAAKb,cAAca,GAAG;gBACtBC,aAAad,cAAcc,WAAW;YACxC;YACA,IAAId,cAAcY,QAAQ,IAAIZ,cAAce,IAAI,EAAE;gBAChD,MAAMC,mBAAmBC,aAAI,CAACC,OAAO,CAAC,CAAC,yBAAyB,EAAElB,cAAcY,QAAQ,CAAC,IAAI,CAAC;gBAC9F,MAAMO,gBAAgB,MAAM1C,SAASuC,kBAAkB;gBACvD,MAAMI,WAAWC,mBAAU,CAACC,OAAO,CAACH,eAAe;oBAAEI,QAAQ;gBAAK;gBAClEnB,IAAI,CAAC,OAAO,GAAGgB,SAASpB,cAAcwB,OAAO;YAC/C,OACK;gBACHpB,IAAI,CAAC,OAAO,GAAGJ,cAAcY,QAAQ;YACvC;YACA,IAAIa,kBAAkB,IAAIC,QAA8C,CAACR,SAASS;gBAChF1B,cAAcb,aAAa,CAACwC,QAAQ,CAACxB,MAAM,OAAOjB,OAAY0C;oBAC5D,IAAI1C,OAAO;wBACT,IAAI,CAACD,MAAM,CAACC,KAAK,CAACA;wBAClBc,cAAcb,aAAa,CAAC0C,KAAK;wBACjCZ,QAAQ;4BAAEhB,QAAQ;4BAAOC,SAAS4B,KAAKC,SAAS,CAAC7C;wBAAO;oBAC1D,OAAO;wBACLc,cAAcb,aAAa,CAAC0C,KAAK;wBACjCZ,QAAQ;4BAAEhB,QAAQ;4BAAMC,SAAS;wBAAwB;oBAC3D;gBACF;YACF;YACA,OAAO,MAAMsB;QACf,EACA,OAAOQ,GAAG;YACR,OAAO;gBAAE/B,QAAQ;gBAAOC,SAAS8B,EAAE9B,OAAO;YAAC;QAC7C;IACF;IA/DA,YACE,AAAiBP,kBAAqC,CACtD;aADiBA,qBAAAA;aAFFV,SAAS,IAAIgD,cAAM,CAAC1D,cAAc8B,IAAI;IAIvD;AA6DF"}