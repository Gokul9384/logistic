{"version":3,"sources":["../../src/Service/Common.service.ts"],"sourcesContent":["import { ModuleTypeEnum } from \"@Helper/Enum/ModuleTypeEnum\";\r\nimport { Injectable } from \"@nestjs/common\";\r\nimport fs from 'fs';\r\nimport path from 'path';\r\nimport { CacheService } from \"./Cache.service\";\r\n@Injectable()\r\nexport class CommonService {\r\n  constructor(\r\n    private _CacheService: CacheService) {\r\n  }\r\n\r\n\r\n  async TransactionRunningNumber(ModuleType: ModuleTypeEnum) {\r\n    let ModuleNumberData: any = {};\r\n    let LastNumber: string = \"1\";\r\n    // if (ModuleType == ModuleTypeEnum.Quotation) {\r\n    //   ModuleNumberData = await getManager().query(`SELECT qo_number AS module_number FROM quotation ORDER BY DATE(created_on) DESC, id DESC, CAST(REGEXP_REPLACE(qo_number,'[^0-9]','0') as unsigned) DESC LIMIT 1`);\r\n    //   if (ModuleNumberData.length > 0) {\r\n    //     return this.AutoGenerateNumber(ModuleNumberData[0].module_number)\r\n    //   }\r\n    //   else {\r\n    //     return \"1\";\r\n    //   }\r\n    // }\r\n  }\r\n\r\n  async ClearAllCache() {\r\n    await this._CacheService.Flush();\r\n  }\r\n\r\n\r\n  RoundDecimal(value: number, scale: number = 2) {\r\n    return Number(value.toFixed(scale));\r\n  }\r\n\r\n\r\n  GetBase64(FilePath: string) {\r\n    var bitmap = fs.readFileSync(path.resolve(FilePath), 'base64');\r\n    return bitmap;\r\n  }\r\n\r\n  AutoGenerateNumber(value: string) {\r\n    let last_charater = value.charAt(value.length - 1);\r\n    let parsedvalue = parseInt(last_charater);\r\n    if (parsedvalue == null || parsedvalue == undefined || isNaN(parsedvalue)) {\r\n      value = value + \"0\";\r\n    }\r\n    return this.InvoiceAutoGenerateNext(value);\r\n  }\r\n\r\n  private InvoiceAutoGenerateNext(invoiceNumber: string) {\r\n    const array = invoiceNumber.split(/[_/:\\/\\W/;\\\\]+/);\r\n    const lastSegment = array.pop() || '';\r\n    const priorSegment = invoiceNumber.substring(0, invoiceNumber.lastIndexOf(lastSegment));\r\n    const nextNumber = this.alphaNumericIncrementer(lastSegment);\r\n    return priorSegment + nextNumber;\r\n  }\r\n\r\n  private alphaNumericIncrementer(str: string) {\r\n    if (str && str.length > 0) {\r\n      let invNum = str.replace(/([^a-z0-9]+)/gi, '');\r\n      invNum = invNum.toUpperCase();\r\n      let index = invNum.length - 1;\r\n      while (index >= 0) {\r\n        if (invNum.substring(index, index + 1) === '9') {\r\n          if (Number(invNum.substring(0, index)) > 0 || invNum.substring(0, index) == '') {\r\n            invNum = (invNum.substring(0, index) ? invNum.substring(0, index) : '1') + '0' + invNum.substring(index + 1)\r\n          }\r\n          else {\r\n            invNum = (invNum.substring(0, index) ? invNum.substring(0, index) + (!(Number(invNum.substring(index - 1, index)) >= 0) ? '1' : '') : '1') + '0' + invNum.substring(index + 1)\r\n          }\r\n        }\r\n        else if (invNum.substring(index, index + 1) === 'Z') {\r\n          invNum = invNum.substring(0, index) + 'A' + invNum.substring(index + 1);\r\n        } else {\r\n          const char = String.fromCharCode(invNum.charCodeAt(index) + 1)\r\n          if (Number(char) >= 0) {\r\n            invNum = invNum.substring(0, index) + char + invNum.substring(index + 1);\r\n          }\r\n          index = 0;\r\n        }\r\n        index--;\r\n      }\r\n      return invNum;\r\n    } else {\r\n      throw new Error('str cannot be empty')\r\n    }\r\n  }\r\n\r\n}\r\n"],"names":["CommonService","TransactionRunningNumber","ModuleType","ModuleNumberData","LastNumber","ClearAllCache","_CacheService","Flush","RoundDecimal","value","scale","Number","toFixed","GetBase64","FilePath","bitmap","fs","readFileSync","path","resolve","AutoGenerateNumber","last_charater","charAt","length","parsedvalue","parseInt","undefined","isNaN","InvoiceAutoGenerateNext","invoiceNumber","array","split","lastSegment","pop","priorSegment","substring","lastIndexOf","nextNumber","alphaNumericIncrementer","str","invNum","replace","toUpperCase","index","char","String","fromCharCode","charCodeAt","Error"],"mappings":"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"}