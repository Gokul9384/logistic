{"version":3,"sources":["../../../src/Service/Admin/Company.service.ts"],"sourcesContent":["import { Injectable } from '@nestjs/common';\r\nimport { company } from '@Database/Table/Admin/company';\r\nimport { LogActionEnum } from '@Helper/Enum/AuditLogEnum';\r\nimport { CompanyModel } from '@Model/Admin/Company.model';\r\nimport { DataSource } from 'typeorm';\r\nimport { AuditLogService } from '@Service/Admin/AuditLog.service';\r\nimport { CacheService } from '@Service/Cache.service';\r\nimport { CacheEnum } from '@Helper/Enum/CacheEnum';\r\n\r\n@Injectable()\r\nexport class CompanyService {\r\n  constructor(\r\n    private _AuditLogService: AuditLogService,\r\n    private _DataSource: DataSource,\r\n    private _CacheService: CacheService\r\n  ) {\r\n  }\r\n\r\n  async Get() {\r\n    const ResultData = await this._CacheService.Get(`${CacheEnum.Company}:*`);\r\n    if (ResultData.length > 0) {\r\n      return ResultData[0];\r\n    }\r\n    else {\r\n      const CompanyData = await company.find();\r\n      await this._CacheService.Store(`${CacheEnum.Company}`, CompanyData);\r\n      return CompanyData[0];\r\n    }\r\n  }\r\n\r\n  async Update(Id: string, CompanyData: CompanyModel, UserId: string, UserIp: string) {\r\n    const CompanyUpdateData = await company.findOne({ where: { id: Id } });\r\n    if (!CompanyUpdateData) {\r\n      throw new Error('Record not found')\r\n    }\r\n    CompanyUpdateData.name = CompanyData.name;\r\n    CompanyUpdateData.address = CompanyData.address;\r\n    CompanyUpdateData.country_id = CompanyData.country_id;\r\n    CompanyUpdateData.currency_id = CompanyData.currency_id;\r\n    CompanyUpdateData.postal_code = CompanyData.postal_code;\r\n    CompanyUpdateData.email = CompanyData.email;\r\n    CompanyUpdateData.website = CompanyData.website;\r\n    CompanyUpdateData.uen_no = CompanyData.uen_no;\r\n    CompanyUpdateData.bank_name = CompanyData.bank_name;\r\n    CompanyUpdateData.bank_acct_no = CompanyData.bank_acct_no;\r\n    CompanyUpdateData.telephone_no = CompanyData.telephone_no;\r\n    CompanyUpdateData.fax_no = CompanyData.fax_no;\r\n    CompanyUpdateData.invoice_footer = CompanyData.invoice_footer;\r\n    CompanyUpdateData.updated_by_id = UserId;\r\n    CompanyUpdateData.updated_on = new Date();\r\n    await company.update(Id, CompanyUpdateData);\r\n    this._AuditLogService.AuditEmitEvent({ UserIp: UserIp, PerformedType: company.name, ActionType: LogActionEnum.Update, PrimaryId: [CompanyUpdateData.id] });\r\n    await this._CacheService.Store(`${CacheEnum.Company}`, [{ ...CompanyUpdateData, id: Id }]);\r\n    return CompanyUpdateData;\r\n  }\r\n\r\n  async Insert(CompanyData: CompanyModel, UserId: string, UserIp: string) {\r\n    const _CompanyData = new company();\r\n    _CompanyData.name = CompanyData.name;\r\n    _CompanyData.address = CompanyData.address;\r\n    _CompanyData.country_id = CompanyData.country_id;\r\n    _CompanyData.currency_id = CompanyData.currency_id;\r\n    _CompanyData.postal_code = CompanyData.postal_code;\r\n    _CompanyData.email = CompanyData.email;\r\n    _CompanyData.website = CompanyData.website;\r\n    _CompanyData.uen_no = CompanyData.uen_no;\r\n    _CompanyData.bank_name = CompanyData.bank_name;\r\n    _CompanyData.bank_acct_no = CompanyData.bank_acct_no;\r\n    _CompanyData.telephone_no = CompanyData.telephone_no;\r\n    _CompanyData.fax_no = CompanyData.fax_no;\r\n    _CompanyData.invoice_footer = CompanyData.invoice_footer;\r\n    _CompanyData.created_by_id = UserId;\r\n    _CompanyData.created_on = new Date();\r\n    await company.insert(_CompanyData);\r\n    this._AuditLogService.AuditEmitEvent({ UserIp: UserIp, PerformedType: company.name, ActionType: LogActionEnum.Insert, PrimaryId: [_CompanyData.id] });\r\n    await this._CacheService.Store(`${CacheEnum.Company}`, [_CompanyData]);\r\n    return _CompanyData;\r\n  }\r\n\r\n}\r\n\r\n"],"names":["CompanyService","Get","ResultData","_CacheService","CacheEnum","Company","length","CompanyData","company","find","Store","Update","Id","UserId","UserIp","CompanyUpdateData","findOne","where","id","Error","name","address","country_id","currency_id","postal_code","email","website","uen_no","bank_name","bank_acct_no","telephone_no","fax_no","invoice_footer","updated_by_id","updated_on","Date","update","_AuditLogService","AuditEmitEvent","PerformedType","ActionType","LogActionEnum","PrimaryId","Insert","_CompanyData","created_by_id","created_on","insert","_DataSource"],"mappings":"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"}