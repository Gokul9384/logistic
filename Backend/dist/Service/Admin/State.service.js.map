{"version":3,"sources":["../../../src/Service/Admin/State.service.ts"],"sourcesContent":["import { Injectable } from \"@nestjs/common\";\r\nimport { AuditLogService } from \"./AuditLog.service\";\r\nimport { CacheService } from \"../Cache.service\";\r\nimport { CacheEnum } from \"@Root/Helper/Enum/CacheEnum\";\r\nimport { state } from \"@Root/Database/Table/Admin/state\";\r\nimport { StateModel } from \"@Model/Admin/State.model\";\r\nimport { LogActionEnum } from \"@Root/Helper/Enum/AuditLogEnum\";\r\nimport { ResponseEnum } from \"@Root/Helper/Enum/ResponseEnum\";\r\n\r\n\r\n@Injectable()\r\nexport class StateService {\r\n    constructor(private _AuditLogService: AuditLogService,\r\n        private _CacheService: CacheService) {\r\n    }\r\n\r\n    async GetAll() {\r\n        const ResultData = await this._CacheService.Get(`${CacheEnum.State}:*`);\r\n        if (ResultData.length > 0) {\r\n            return ResultData;\r\n        }\r\n        else {\r\n            const StateList = await state.find({ relations: [\"country\"] });\r\n            await this._CacheService.Store(`${CacheEnum.Currency}`, StateList);\r\n            return StateList;\r\n        }\r\n    }\r\n\r\n    async GetById(StateId: string) {\r\n        const ResultData = await this._CacheService.Get(`${CacheEnum.State}:${StateId}`);\r\n        if (ResultData.length > 0) {\r\n            return ResultData[0];\r\n        }\r\n        else {\r\n            const StateData = await state.findOne({ relations: [\"country\"], where: { id: StateId } });\r\n            await this._CacheService.Store(`${CacheEnum.Currency}:${StateId}`, [StateData]);\r\n            return StateData;\r\n        }\r\n    }\r\n\r\n    async Insert(StateData: StateModel, UserId: string, UserIp: string) {\r\n        const _StateData = new state();\r\n        _StateData.name = StateData.name;\r\n        _StateData.code = StateData.code;\r\n        _StateData.country_id = StateData.country_id;\r\n        _StateData.created_by_id = UserId;\r\n        _StateData.created_on = new Date();\r\n        await state.insert(_StateData);\r\n        this._AuditLogService.AuditEmitEvent({ PerformedType: state.name, ActionType: LogActionEnum.Insert, PrimaryId: [_StateData.id], UserIp: UserIp });\r\n        await this._CacheService.Store(`${CacheEnum.Currency}`, [_StateData]);\r\n        return _StateData\r\n    }\r\n\r\n    async Update(Id: string, StateData: StateModel, UserId: string, UserIp: string) {\r\n        const StateUpdateData = await state.findOne({ where: { id: Id } });\r\n        if (!StateUpdateData) {\r\n            throw new Error('Record not found')\r\n        }\r\n        StateUpdateData.name = StateData.name;\r\n        StateUpdateData.code = StateData.code;\r\n        StateUpdateData.country_id = StateData.country_id;\r\n        StateUpdateData.updated_by_id = UserId;\r\n        StateUpdateData.updated_on = new Date();\r\n        await state.update(Id, StateUpdateData);\r\n        this._AuditLogService.AuditEmitEvent({ PerformedType: state.name, ActionType: LogActionEnum.Update, PrimaryId: [StateUpdateData.id], UserIp: UserIp });\r\n        await this._CacheService.Store(`${CacheEnum.State}`, [{ ...StateUpdateData, id: Id }]);\r\n        return StateUpdateData;\r\n    }\r\n\r\n    async Delete(Id: string, UserIp: string) {\r\n        const StateData = await state.findOne({ where: { id: Id } });\r\n        if (!StateData) {\r\n            throw new Error(ResponseEnum.NotFound);\r\n        }\r\n        await StateData.remove();\r\n        this._AuditLogService.AuditEmitEvent({ PerformedType: state.name, ActionType: LogActionEnum.Delete, PrimaryId: [StateData.id], UserIp: UserIp });\r\n        await this._CacheService.Remove(`${CacheEnum.State}:${Id}`, StateData);\r\n        return true;\r\n    }\r\n\r\n}\r\n"],"names":["StateService","GetAll","ResultData","_CacheService","Get","CacheEnum","State","length","StateList","state","find","relations","Store","Currency","GetById","StateId","StateData","findOne","where","id","Insert","UserId","UserIp","_StateData","name","code","country_id","created_by_id","created_on","Date","insert","_AuditLogService","AuditEmitEvent","PerformedType","ActionType","LogActionEnum","PrimaryId","Update","Id","StateUpdateData","Error","updated_by_id","updated_on","update","Delete","ResponseEnum","NotFound","remove","Remove"],"mappings":"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"}