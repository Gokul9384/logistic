{"version":3,"sources":["../../../src/Service/Admin/EmailConfig.service.ts"],"sourcesContent":["import { Injectable } from '@nestjs/common';\r\nimport { email_config } from '@Database/Table/Admin/email_config';\r\nimport { EmailConfigModel } from '@Model/Admin/EmailConfig.model';\r\nimport { EncryptionService } from '../Encryption.service';\r\nimport { CacheService } from '@Service/Cache.service';\r\nimport { CacheEnum } from '@Helper/Enum/CacheEnum';\r\n@Injectable()\r\nexport class EmailConfigService {\r\n  constructor(\r\n    private readonly _EncryptionService: EncryptionService,\r\n    private _CacheService: CacheService\r\n  ) {\r\n  }\r\n\r\n  // #region GetWithoutPasswordById\r\n  async GetWithoutPasswordById() {\r\n\r\n    const ResultData = await this._CacheService.Get(`${CacheEnum.EmailConfig}:*`);\r\n    if (ResultData.length > 0) {\r\n      return ResultData[0];\r\n    }\r\n    else {\r\n      const EmailConfigData = await email_config.find();\r\n      if (EmailConfigData.length == 1) {\r\n        delete EmailConfigData[0].password;\r\n      }\r\n      await this._CacheService.Store(`${CacheEnum.EmailConfig}`, EmailConfigData);\r\n      return EmailConfigData[0];\r\n    }\r\n  }\r\n\r\n  async Update(Id: string, EmailConfigData: EmailConfigModel, UserId: string) {\r\n    const EmailConfigUpdateData = await email_config.findOne({ where: { id: Id } });\r\n    if (!EmailConfigUpdateData) {\r\n      throw new Error('Record not found')\r\n    }\r\n    EmailConfigUpdateData.email_id = EmailConfigData.email_id;\r\n    EmailConfigUpdateData.password = EmailConfigData.password;\r\n    EmailConfigUpdateData.mailer_name = EmailConfigData.mailer_name;\r\n    EmailConfigUpdateData.host = EmailConfigData.host;\r\n    EmailConfigUpdateData.password = this._EncryptionService.Encrypt(EmailConfigData.password);\r\n    EmailConfigUpdateData.updated_by_id = UserId;\r\n    EmailConfigUpdateData.updated_on = new Date();\r\n    await email_config.update(Id, EmailConfigUpdateData);\r\n    await this._CacheService.Store(`${CacheEnum.EmailConfig}`, [{ ...EmailConfigUpdateData, id: Id }]);\r\n    return EmailConfigUpdateData;\r\n  }\r\n\r\n  async Insert(EmailConfigData: EmailConfigModel, UserId: string) {\r\n    const _EmailConfigData = new email_config();\r\n    _EmailConfigData.email_id = EmailConfigData.email_id;\r\n    _EmailConfigData.password = EmailConfigData.password;\r\n    _EmailConfigData.mailer_name = EmailConfigData.mailer_name;\r\n    _EmailConfigData.host = EmailConfigData.host;\r\n    _EmailConfigData.password = this._EncryptionService.Encrypt(EmailConfigData.password);\r\n    _EmailConfigData.created_by_id = UserId;\r\n    _EmailConfigData.created_on = new Date();\r\n    await email_config.insert(_EmailConfigData);\r\n    await this._CacheService.Store(`${CacheEnum.EmailConfig}`, [_EmailConfigData]);\r\n    return _EmailConfigData;\r\n  }\r\n\r\n}\r\n\r\n"],"names":["EmailConfigService","GetWithoutPasswordById","ResultData","_CacheService","Get","CacheEnum","EmailConfig","length","EmailConfigData","email_config","find","password","Store","Update","Id","UserId","EmailConfigUpdateData","findOne","where","id","Error","email_id","mailer_name","host","_EncryptionService","Encrypt","updated_by_id","updated_on","Date","update","Insert","_EmailConfigData","created_by_id","created_on","insert"],"mappings":";;;;+BAOaA;;;eAAAA;;;wBAPc;8BACE;mCAEK;8BACL;2BACH;;;;;;;;;;AAEnB,IAAA,AAAMA,qBAAN,MAAMA;IAOX,iCAAiC;IACjC,MAAMC,yBAAyB;QAE7B,MAAMC,aAAa,MAAM,IAAI,CAACC,aAAa,CAACC,GAAG,CAAC,GAAGC,oBAAS,CAACC,WAAW,CAAC,EAAE,CAAC;QAC5E,IAAIJ,WAAWK,MAAM,GAAG,GAAG;YACzB,OAAOL,UAAU,CAAC,EAAE;QACtB,OACK;YACH,MAAMM,kBAAkB,MAAMC,0BAAY,CAACC,IAAI;YAC/C,IAAIF,gBAAgBD,MAAM,IAAI,GAAG;gBAC/B,OAAOC,eAAe,CAAC,EAAE,CAACG,QAAQ;YACpC;YACA,MAAM,IAAI,CAACR,aAAa,CAACS,KAAK,CAAC,GAAGP,oBAAS,CAACC,WAAW,EAAE,EAAEE;YAC3D,OAAOA,eAAe,CAAC,EAAE;QAC3B;IACF;IAEA,MAAMK,OAAOC,EAAU,EAAEN,eAAiC,EAAEO,MAAc,EAAE;QAC1E,MAAMC,wBAAwB,MAAMP,0BAAY,CAACQ,OAAO,CAAC;YAAEC,OAAO;gBAAEC,IAAIL;YAAG;QAAE;QAC7E,IAAI,CAACE,uBAAuB;YAC1B,MAAM,IAAII,MAAM;QAClB;QACAJ,sBAAsBK,QAAQ,GAAGb,gBAAgBa,QAAQ;QACzDL,sBAAsBL,QAAQ,GAAGH,gBAAgBG,QAAQ;QACzDK,sBAAsBM,WAAW,GAAGd,gBAAgBc,WAAW;QAC/DN,sBAAsBO,IAAI,GAAGf,gBAAgBe,IAAI;QACjDP,sBAAsBL,QAAQ,GAAG,IAAI,CAACa,kBAAkB,CAACC,OAAO,CAACjB,gBAAgBG,QAAQ;QACzFK,sBAAsBU,aAAa,GAAGX;QACtCC,sBAAsBW,UAAU,GAAG,IAAIC;QACvC,MAAMnB,0BAAY,CAACoB,MAAM,CAACf,IAAIE;QAC9B,MAAM,IAAI,CAACb,aAAa,CAACS,KAAK,CAAC,GAAGP,oBAAS,CAACC,WAAW,EAAE,EAAE;YAAC;gBAAE,GAAGU,qBAAqB;gBAAEG,IAAIL;YAAG;SAAE;QACjG,OAAOE;IACT;IAEA,MAAMc,OAAOtB,eAAiC,EAAEO,MAAc,EAAE;QAC9D,MAAMgB,mBAAmB,IAAItB,0BAAY;QACzCsB,iBAAiBV,QAAQ,GAAGb,gBAAgBa,QAAQ;QACpDU,iBAAiBpB,QAAQ,GAAGH,gBAAgBG,QAAQ;QACpDoB,iBAAiBT,WAAW,GAAGd,gBAAgBc,WAAW;QAC1DS,iBAAiBR,IAAI,GAAGf,gBAAgBe,IAAI;QAC5CQ,iBAAiBpB,QAAQ,GAAG,IAAI,CAACa,kBAAkB,CAACC,OAAO,CAACjB,gBAAgBG,QAAQ;QACpFoB,iBAAiBC,aAAa,GAAGjB;QACjCgB,iBAAiBE,UAAU,GAAG,IAAIL;QAClC,MAAMnB,0BAAY,CAACyB,MAAM,CAACH;QAC1B,MAAM,IAAI,CAAC5B,aAAa,CAACS,KAAK,CAAC,GAAGP,oBAAS,CAACC,WAAW,EAAE,EAAE;YAACyB;SAAiB;QAC7E,OAAOA;IACT;IApDA,YACE,AAAiBP,kBAAqC,EACtD,AAAQrB,aAA2B,CACnC;aAFiBqB,qBAAAA;aACTrB,gBAAAA;IAEV;AAkDF"}