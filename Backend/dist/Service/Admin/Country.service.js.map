{"version":3,"sources":["../../../src/Service/Admin/Country.service.ts"],"sourcesContent":["import { Injectable } from '@nestjs/common';\r\nimport { country } from '@Database/Table/Admin/country';\r\nimport { LogActionEnum } from '@Helper/Enum/AuditLogEnum';\r\nimport { ResponseEnum } from '@Helper/Enum/ResponseEnum';\r\nimport { CountryModel } from '@Model/Admin/Country.model';\r\nimport { AuditLogService } from '@Service/Admin/AuditLog.service';\r\nimport { CacheService } from '@Service/Cache.service';\r\nimport { CacheEnum } from '@Helper/Enum/CacheEnum';\r\n\r\n@Injectable()\r\nexport class CountryService {\r\n  constructor(private _AuditLogService: AuditLogService,\r\n    private _CacheService: CacheService) {\r\n  }\r\n\r\n  async GetAll() {\r\n    const ResultData = await this._CacheService.Get(`${CacheEnum.Country}:*`);\r\n    if (ResultData.length > 0) {\r\n      return ResultData;\r\n    }\r\n    else {\r\n      const CountryList = await country.find({ relations: [\"currency\"] });\r\n      await this._CacheService.Store(`${CacheEnum.Country}`, CountryList);\r\n      return CountryList;\r\n    }\r\n  }\r\n\r\n  async GetById(CountryId: string) {\r\n    const ResultData = await this._CacheService.Get(`${CacheEnum.UserRole}:${CountryId}`);\r\n    if (ResultData.length > 0) {\r\n      return ResultData[0];\r\n    }\r\n    else {\r\n      const CountryData = await country.findOne({ relations: [\"currency\"], where: { id: CountryId } });\r\n      await this._CacheService.Store(`${CacheEnum.Country}:${CountryId}`, [CountryData]);\r\n      return CountryData;\r\n    }\r\n  }\r\n\r\n  async Insert(CountryData: CountryModel, UserId: string, UserIp: string) {\r\n    const _CountryData = new country();\r\n    _CountryData.name = CountryData.name;\r\n    _CountryData.code = CountryData.code;\r\n    _CountryData.currency_id = CountryData.currency_id;\r\n    _CountryData.created_by_id = UserId;\r\n    _CountryData.created_on = new Date();\r\n    await country.insert(_CountryData);\r\n    this._AuditLogService.AuditEmitEvent({ UserIp: UserIp, PerformedType: country.name, ActionType: LogActionEnum.Insert, PrimaryId: [_CountryData.id] });\r\n    const CacheCountryData = await country.find({ relations: [\"currency\"] });\r\n    await this._CacheService.Store(`${CacheEnum.Country}`, [CacheCountryData])\r\n    return _CountryData;\r\n  }\r\n\r\n  async Update(Id: string, CountryData: CountryModel, UserId: string, UserIp: string) {\r\n    const CompanyUpdateData = await country.findOne({ where: { id: Id } });\r\n    if (!CompanyUpdateData) {\r\n      throw new Error('Record not found')\r\n    }\r\n    CompanyUpdateData.name = CountryData.name;\r\n    CompanyUpdateData.code = CountryData.code;\r\n    CompanyUpdateData.currency_id = CountryData.currency_id;\r\n    CompanyUpdateData.updated_by_id = UserId;\r\n    CompanyUpdateData.updated_on = new Date();\r\n    await country.update(Id, CompanyUpdateData);\r\n    this._AuditLogService.AuditEmitEvent({ UserIp: UserIp, PerformedType: country.name, ActionType: LogActionEnum.Update, PrimaryId: [CompanyUpdateData.id] });\r\n    await this._CacheService.Store(`${CacheEnum.Country}`, [{ ...CompanyUpdateData, id: Id }]);\r\n    return CompanyUpdateData;\r\n  }\r\n\r\n  async Delete(Id: string, UserIp: string) {\r\n    const CountryData = await country.findOne({ where: { id: Id } });\r\n    if (!CountryData) {\r\n      throw new Error(ResponseEnum.NotFound);\r\n    }\r\n    await CountryData.remove();\r\n    this._AuditLogService.AuditEmitEvent({ UserIp: UserIp, PerformedType: country.name, ActionType: LogActionEnum.Delete, PrimaryId: [Id] });\r\n    await this._CacheService.Remove(`${CacheEnum.Country}:${Id}`, CountryData);\r\n    return true;\r\n  }\r\n}\r\n"],"names":["CountryService","GetAll","ResultData","_CacheService","Get","CacheEnum","Country","length","CountryList","country","find","relations","Store","GetById","CountryId","UserRole","CountryData","findOne","where","id","Insert","UserId","UserIp","_CountryData","name","code","currency_id","created_by_id","created_on","Date","insert","_AuditLogService","AuditEmitEvent","PerformedType","ActionType","LogActionEnum","PrimaryId","CacheCountryData","Update","Id","CompanyUpdateData","Error","updated_by_id","updated_on","update","Delete","ResponseEnum","NotFound","remove","Remove"],"mappings":"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"}