{"version":3,"sources":["../../../src/Service/Admin/User.service.ts"],"sourcesContent":["import { Injectable } from '@nestjs/common';\r\nimport { user } from '@Database/Table/Admin/user';\r\nimport { RandomValue, UserIp } from '@Helper/Common.helper';\r\nimport { ChangePasswordModel, ResetPasswordModel, UserModel } from '@Model/Admin/User.model';\r\nimport { Not } from 'typeorm';\r\nimport { EmailService } from '../Email.service';\r\nimport { EncryptionService } from '../Encryption.service';\r\nimport { AuditLogService } from './AuditLog.service';\r\nimport { LogActionEnum } from '@Helper/Enum/AuditLogEnum';\r\n\r\n@Injectable()\r\nexport class UserService {\r\n  constructor(\r\n    private _EmailService: EmailService,\r\n    private _EncryptionService: EncryptionService,\r\n    private _AuditLogService: AuditLogService\r\n  ) {\r\n  }\r\n\r\n  async GetAllExpectSuperAdmin() {\r\n    const UserData = await user.find({ where: { created_by_id: Not('0'), status: true }, relations: ['user_role'] });\r\n    return UserData;\r\n  }\r\n\r\n  async GetById(UserId: string) {\r\n    return user.findOne({ where: { id: UserId } });\r\n  }\r\n\r\n  async Insert(UserData: UserModel, UserId: string, UserIp: string) {\r\n    const _UserData = new user();\r\n    _UserData.user_role_id = UserData.user_role_id;\r\n    _UserData.first_name = UserData.first_name;\r\n    _UserData.last_name = UserData.last_name;\r\n    _UserData.email = UserData.email;\r\n    _UserData.password = UserData.password;\r\n    _UserData.mobile = UserData.mobile;\r\n    _UserData.created_by_id = UserId;\r\n    _UserData.created_on = new Date();\r\n    _UserData.password = this._EncryptionService.Encrypt(UserData.password);\r\n    await user.insert(_UserData);\r\n    this._AuditLogService.AuditEmitEvent({ PerformedType: user.name, ActionType: LogActionEnum.Insert, PrimaryId: [_UserData.id], UserIp: UserIp });\r\n    return _UserData;\r\n  }\r\n\r\n  async Update(Id: string, UserData: UserModel, UserId: string, UserIp: string) {\r\n    const UserUpdateData = await user.findOne({ where: { id: Id } });\r\n    if (!UserUpdateData) {\r\n      throw new Error('Record not found')\r\n    }\r\n    UserUpdateData.user_role_id = UserData.user_role_id;\r\n    UserUpdateData.first_name = UserData.first_name;\r\n    UserUpdateData.last_name = UserData.last_name;\r\n    UserUpdateData.email = UserData.email;\r\n    UserUpdateData.password = UserData.password;\r\n    UserUpdateData.mobile = UserData.mobile;\r\n    UserUpdateData.updated_by_id = UserId;\r\n    UserUpdateData.updated_on = new Date();\r\n    delete UserUpdateData.password;\r\n    delete UserUpdateData.email;\r\n    await user.update(Id, UserUpdateData);\r\n    this._AuditLogService.AuditEmitEvent({ PerformedType: user.name, ActionType: LogActionEnum.Update, PrimaryId: [UserUpdateData.id], UserIp: UserIp });\r\n    return UserUpdateData;\r\n  }\r\n\r\n  async SuspendOrActivate(Id: string, UserId: string, UserIp: string) {\r\n    const UserData = await user.findOne({ where: { id: Id } });\r\n    if (!UserData) {\r\n      throw new Error('User not found');\r\n    }\r\n    UserData.updated_by_id = UserId;\r\n    UserData.updated_on = new Date();\r\n    UserData.status = !UserData.status;\r\n    await UserData.save();\r\n    if (UserData.status == true) {\r\n      this._AuditLogService.AuditEmitEvent({ PerformedType: user.name, ActionType: LogActionEnum.Active, PrimaryId: [UserData.id], UserIp: UserIp });\r\n    }\r\n    else {\r\n      this._AuditLogService.AuditEmitEvent({ PerformedType: user.name, ActionType: LogActionEnum.Suspend, PrimaryId: [UserData.id], UserIp: UserIp });\r\n    }\r\n    return UserData;\r\n  }\r\n\r\n  async ForgotPassword(EmailId: string) {\r\n    const UserData = await user.findOne({ where: { email: EmailId } });\r\n    if (!UserData) {\r\n      throw new Error(\"User not found\");\r\n    }\r\n    UserData.reset_otp = RandomValue(100000, 999999);\r\n    await UserData.save();\r\n    let EncryptedUserId = UserData.id;\r\n    return await this._EmailService.ForgotPassword(EmailId, UserData.reset_otp, EncryptedUserId);\r\n  }\r\n\r\n  async ResetPassword(ResetPasswordData: ResetPasswordModel) {\r\n    const UserData = await user.findOne({ where: { id: ResetPasswordData.user_id } });\r\n    if (!UserData) {\r\n      throw new Error(\"User not found\");\r\n    }\r\n    if (UserData.reset_otp != ResetPasswordData.reset_otp) {\r\n      throw new Error(\"Invalid Reset OTP\");\r\n    }\r\n    UserData.password = this._EncryptionService.Encrypt(ResetPasswordData.password);\r\n    UserData.reset_otp = null;\r\n    UserData.updated_by_id = UserData.id;\r\n    UserData.updated_on = new Date()\r\n    await UserData.save();\r\n    return true;\r\n  }\r\n\r\n  async ChangePassword(UserId: string, ChangePasswordData: ChangePasswordModel) {\r\n    const UserData = await user.findOne({ where: { id: UserId } });\r\n    if (!UserData) {\r\n      throw new Error(\"User not found\");\r\n    }\r\n    if (this._EncryptionService.Decrypt(UserData.password) != ChangePasswordData.old_password) {\r\n      throw new Error(\"Old password not matched\");\r\n    }\r\n    UserData.password = this._EncryptionService.Encrypt(ChangePasswordData.password);\r\n    UserData.updated_by_id = UserId;\r\n    UserData.updated_on = new Date();\r\n    await UserData.save();\r\n    return true;\r\n  }\r\n\r\n  async UserResetPassword(Id: string, UserData: UserModel, UserId: string, UserIp: string) {\r\n    UserData.updated_by_id = UserId;\r\n    UserData.updated_on = new Date();\r\n    UserData.password = this._EncryptionService.Encrypt(UserData.password);\r\n    await user.update(Id, UserData as any);\r\n    this._AuditLogService.AuditEmitEvent({ PerformedType: user.name, ActionType: LogActionEnum.ResetPassword, PrimaryId: [UserData.id], UserIp: UserIp });\r\n    return UserData as user;\r\n  }\r\n\r\n  async UserUnLock(UserId: string, UserData: any) {\r\n    const _UserData = await user.findOne({ where: { id: UserId } });\r\n    if (!_UserData) {\r\n      throw new Error(\"User not found\");\r\n    }\r\n    if (this._EncryptionService.Decrypt(_UserData.password) != UserData.password) {\r\n      throw new Error(\"Password not matched\");\r\n    }\r\n    return true;\r\n  }\r\n}\r\n"],"names":["UserService","GetAllExpectSuperAdmin","UserData","user","find","where","created_by_id","Not","status","relations","GetById","UserId","findOne","id","Insert","UserIp","_UserData","user_role_id","first_name","last_name","email","password","mobile","created_on","Date","_EncryptionService","Encrypt","insert","_AuditLogService","AuditEmitEvent","PerformedType","name","ActionType","LogActionEnum","PrimaryId","Update","Id","UserUpdateData","Error","updated_by_id","updated_on","update","SuspendOrActivate","save","Active","Suspend","ForgotPassword","EmailId","reset_otp","RandomValue","EncryptedUserId","_EmailService","ResetPassword","ResetPasswordData","user_id","ChangePassword","ChangePasswordData","Decrypt","old_password","UserResetPassword","UserUnLock"],"mappings":"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"}