{"version":3,"sources":["../../../src/Service/Admin/AuditLog.service.ts"],"sourcesContent":["import { Injectable } from \"@nestjs/common\";\r\nimport { EventEmitter2, OnEvent } from \"@nestjs/event-emitter\";\r\nimport { DataSource } from \"typeorm\";\r\nimport * as jsonDiff from 'json-diff';\r\nimport { InfluxDB, Point } from \"@influxdata/influxdb-client\";\r\nimport { EventNameEnum, LogActionEnum } from \"@Helper/Enum/AuditLogEnum\";\r\nimport { AuditLogFilterModel, AuditLogLazyLoadModel, AuditLogModel } from \"@Model/Admin/AuditLog.model\";\r\nimport { AuditLogChangeTableReferenceName, AuditLogIdentityName, AuditLogRemoveColumnsName, AuditLogRemoveColumnsNameByTable, AuditLogSameTableReferenceName } from \"@Helper/AuditLog.decorators\";\r\nimport { audit_log } from \"@Root/Database/Table/Admin/audit_log\";\r\n\r\n\r\n@Injectable()\r\nexport class AuditLogService {\r\n  private RemoveColumnsName = AuditLogRemoveColumnsName;\r\n  private RemoveColumnsNameByTable = AuditLogRemoveColumnsNameByTable;\r\n  private SameReferenceColumn = AuditLogSameTableReferenceName;\r\n  private LogTableIdentifierName = AuditLogIdentityName;\r\n  private ChangeTableReferenceName = AuditLogChangeTableReferenceName;\r\n  private DB = new InfluxDB({ url: process.env.INFLUX_URL, token: process.env.INFLUX_TOKEN });\r\n  private writeApi = this.DB.getWriteApi(process.env.INFLUX_ORG, process.env.INFLUX_BUCKET);\r\n  private queryApi = this.DB.getQueryApi(process.env.INFLUX_ORG);\r\n\r\n  constructor(\r\n    private _EventEmitter: EventEmitter2,\r\n    private _DataSource: DataSource\r\n  ) { }\r\n\r\n\r\n\r\n  AuditEmitEvent(AuditLogData: AuditLogModel) {\r\n    if (process.env.AUDIT_LOG === 'true') {\r\n      this._EventEmitter.emit(EventNameEnum.AuditLog, AuditLogData);\r\n    }\r\n  }\r\n\r\n  async getCoordinates(UserIp: string): Promise<string> {\r\n    try {\r\n      if (UserIp === \"127.0.0.1\" || UserIp === \"::1\") {\r\n        return JSON.stringify({ message: \"Local or private IP, no geolocation data available\" });\r\n      }\r\n\r\n      const response = await fetch(`https://ipapi.co/${UserIp}/json/`);\r\n      if (!response.ok) {\r\n        throw new Error(\"Failed to fetch geolocation data\");\r\n      }\r\n\r\n      const data = await response.json();\r\n\r\n      return JSON.stringify({\r\n        ip: UserIp,\r\n        latitude: data.latitude,\r\n        longitude: data.longitude,\r\n        country: data.country_name,\r\n        region: data.region,\r\n        city: data.city,\r\n        timezone: data.timezone\r\n      });\r\n    } catch (error) {\r\n      console.error(\"Error fetching coordinates:\", error);\r\n      return JSON.stringify({ error: \"Unable to fetch coordinates\" });\r\n    }\r\n  }\r\n\r\n  private async GenerateQuery(table: string, action_type: LogActionEnum, ids: string[], UserIp: string): Promise<string> {\r\n    // Ensure the environment variable is defined\r\n    const databaseName = process.env.DB_NAME;\r\n\r\n    // Retrieve the user's IP address\r\n    // const userIpAddress =\r\n    //   req.headers['x-forwarded-for']?.split(',').shift()?.trim() || // Handle cases where the IP is forwarded\r\n    //   req.socket?.remoteAddress ||\r\n    //   req.ip;\r\n\r\n    // if (!userIpAddress) {\r\n    //   throw new Error(\"Unable to retrieve the user's IP address.\");\r\n    // }\r\n\r\n    // Retrieve table columns\r\n    let TableColumns = await this._DataSource.manager.query(`\r\n      SELECT COLUMN_NAME AS columns\r\n      FROM INFORMATION_SCHEMA.COLUMNS\r\n      WHERE TABLE_SCHEMA = '${databaseName}'\r\n      AND TABLE_NAME = '${table}';\r\n    `);\r\n\r\n    // Handle the case where no columns are found\r\n    if (!TableColumns || TableColumns.length === 0) {\r\n      throw new Error(`No columns found for table '${table}' in schema '${databaseName}'.`);\r\n    }\r\n\r\n    // Validate `RemoveColumnsName` and `RemoveColumnsByTable`\r\n    const RemoveColumnsName = Array.isArray(this.RemoveColumnsName) ? this.RemoveColumnsName : [];\r\n    const RemoveColumnsByTable = Array.isArray(this.RemoveColumnsNameByTable?.[table]) ? this.RemoveColumnsNameByTable[table] : [];\r\n\r\n    // Filter out invalid table columns\r\n    TableColumns = TableColumns.filter((o: { columns: string }) => o.columns !== undefined);\r\n\r\n    // Filter columns for JSON object\r\n    const JsonObjectFilter = TableColumns.filter((o: { columns: string }) =>\r\n      !RemoveColumnsName.includes(o.columns) &&\r\n      !RemoveColumnsByTable.includes(o.columns)\r\n    );\r\n\r\n    // Handle empty JsonObjectFilter case\r\n    if (JsonObjectFilter.length === 0) {\r\n      throw new Error(`No valid columns found for JSON object generation for table '${table}'.`);\r\n    }\r\n\r\n    // Create JSON object data for all columns\r\n    const json_object = JsonObjectFilter.map((o: { columns: string }) =>\r\n      `'${o.columns}', COALESCE(main.${o.columns}, '')`\r\n    );\r\n\r\n    const json_object_query = `json_object(${json_object.join(', ')})`;\r\n\r\n    const tableIdentifier = this.LogTableIdentifierName?.[table];\r\n    if (!tableIdentifier) {\r\n      throw new Error(`LogTableIdentifierName for table '${table}' is not defined.`);\r\n    }\r\n\r\n    const isNestedColumn = tableIdentifier.includes('.');\r\n    const columnName = isNestedColumn ? tableIdentifier.split('.')[1] : tableIdentifier;\r\n    const coordinates = await this.getCoordinates(UserIp);\r\n\r\n    // Generate dynamic query\r\n    const DynamicQuery = `\r\n    SELECT\r\n        main.id AS performed_module_id,\r\n        '${table}' AS performed_type,\r\n        '${action_type}' AS performed_action,\r\n        ${tableIdentifier} AS performed_module_name,\r\n        '${columnName}' AS performed_module_header_name,\r\n        ${json_object_query} AS performed_parameter,\r\n        COALESCE(main.updated_by_id, main.created_by_id) AS performed_by_id,\r\n        COALESCE(main.updated_on, main.created_on) AS performed_on,\r\n        CASE\r\n            WHEN CONCAT(usr.first_name, ' ', IFNULL(usr.last_name, '')) IS NOT NULL THEN CONCAT(usr.first_name, ' ', IFNULL(usr.last_name, ''))\r\n            ELSE usr.email\r\n        END AS performed_by,\r\n        '${UserIp}' AS performed_ipaddress,\r\n    '${coordinates.replace(/'/g, \"\\\\'\")}' AS performed_coordinates\r\n    FROM\r\n        ${table} AS main\r\n    LEFT OUTER JOIN\r\n        user AS usr\r\n    ON usr.id = COALESCE(main.updated_by_id, main.created_by_id)\r\n    WHERE\r\n        main.id IN (${ids.map(id => `'${id}'`).join(',')});\r\n    `;\r\n\r\n    return DynamicQuery;\r\n  }\r\n\r\n\r\n  private async GetLastAddedLog(PerformedType: string, PrimaryId: string): Promise<any> {\r\n    try {\r\n      const GetLastEventLog = new Promise((resolve, reject) => {\r\n        const result: any = [];\r\n        const observerdata = {\r\n          next(row, tableMeta) {\r\n            const o = tableMeta.toObject(row);\r\n            result.push({\r\n              performed_action: o.performed_action,\r\n              performed_by: o.performed_by,\r\n              performed_by_id: o.performed_by_id,\r\n              performed_module_name: o.performed_module_name,\r\n              performed_module_header_name: o.performed_module_header_name,\r\n              performed_module_id: o.performed_module_id,\r\n              performed_on: o.performed_on,\r\n              performed_type: o.performed_type,\r\n              performed_ipaddress: o.performed_ipaddress,\r\n              performed_coordinates: o.performed_coordinates,\r\n              performed_parameter: JSON.parse(o._value)\r\n            });\r\n          },\r\n          error(error) {\r\n            reject(error);\r\n          },\r\n          complete() {\r\n            resolve(result[0] || null);\r\n          }\r\n        };\r\n        const startdate: Date = new Date();\r\n        startdate.setFullYear(startdate.getFullYear() - 100);\r\n        const query = `\r\n          from(bucket: \"${process.env.INFLUX_BUCKET}\")\r\n          |> range(start: ${startdate.toISOString()}, stop: ${new Date().toISOString()})\r\n          |> filter(fn: (r) => r[\"_measurement\"] == \"${process.env.INFLUX_DB}\")\r\n          |> filter(fn: (r) => r[\"performed_type\"] == \"${PerformedType}\")\r\n          |> filter(fn: (r) => r[\"performed_module_id\"] == \"${PrimaryId}\")\r\n          |> group()\r\n          |> sort(columns: [\"performed_on\"], desc: true)\r\n          |> limit(n: 1)\r\n        `;\r\n        this.queryApi.queryRows(query, observerdata);\r\n      });\r\n\r\n      return await GetLastEventLog;\r\n    } catch (e) {\r\n      throw new Error(e);\r\n    }\r\n  }\r\n\r\n  @OnEvent(EventNameEnum.AuditLog, { async: true })\r\n  private async Insert(AuditLogData: AuditLogModel, req: any) {\r\n    try {\r\n      if (AuditLogData.ActionType === LogActionEnum.Delete) {\r\n        for (const DeletedRecordId of AuditLogData.PrimaryId) {\r\n          const LastUpdatedOrInserted = await this.GetLastAddedLog(AuditLogData.PerformedType, DeletedRecordId);\r\n          if (LastUpdatedOrInserted) {\r\n            for (const key of Object.keys(LastUpdatedOrInserted['performed_parameter'])) {\r\n              if (typeof LastUpdatedOrInserted['performed_parameter'][key] === 'object') {\r\n                LastUpdatedOrInserted['performed_parameter'][key] = LastUpdatedOrInserted['performed_parameter'][key]?.__new;\r\n              }\r\n            }\r\n            const dataPoint = new Point(process.env.INFLUX_DB)\r\n              .tag('performed_by', LastUpdatedOrInserted.performed_by)\r\n              .tag('performed_by_id', LastUpdatedOrInserted.performed_by_id)\r\n              .tag('performed_on', new Date().toISOString())\r\n              .tag('performed_module_name', LastUpdatedOrInserted.performed_module_name)\r\n              .tag('performed_module_header_name', LastUpdatedOrInserted.performed_module_header_name)\r\n              .tag('performed_module_id', LastUpdatedOrInserted.performed_module_id)\r\n              .tag('performed_type', LastUpdatedOrInserted.performed_type)\r\n              .tag('performed_action', LogActionEnum.Delete)\r\n              .stringField('performed_parameter', JSON.stringify(LastUpdatedOrInserted.performed_parameter))\r\n              .tag('performed_ipaddress', LastUpdatedOrInserted.performed_ipaddress)\r\n              .tag('performed_coordinates', LastUpdatedOrInserted.performed_coordinates);\r\n\r\n            // Write the point to InfluxDB and flush\r\n            this.writeApi.writePoint(dataPoint);\r\n            await this.writeApi.flush();\r\n\r\n            //Insert to mysql\r\n            const LogData = {\r\n              performed_by: LastUpdatedOrInserted.performed_by,\r\n              performed_by_id: LastUpdatedOrInserted.performed_by_id,\r\n              performed_on: new Date().toISOString(),\r\n              performed_module_name: LastUpdatedOrInserted.performed_module_name,\r\n              performed_module_header_name: LastUpdatedOrInserted.performed_module_header_name,\r\n              performed_module_id: LastUpdatedOrInserted.performed_module_id,\r\n              performed_type: LastUpdatedOrInserted.performed_type,\r\n              performed_action: LogActionEnum.Delete,\r\n              performed_parameter: JSON.stringify(LastUpdatedOrInserted.performed_parameter),\r\n              performed_ipaddress: LastUpdatedOrInserted.performed_ipaddress,\r\n              performed_coordinates: LastUpdatedOrInserted.performed_coordinates,\r\n              created_by_id: LastUpdatedOrInserted.performed_by_id,\r\n              created_on: new Date(LastUpdatedOrInserted.performed_on).toISOString(),\r\n            };\r\n            // Save to MySQL\r\n            try {\r\n              await audit_log.save(LogData);\r\n              console.log('Audit log saved to MySQL successfully.');\r\n            } catch (error) {\r\n              console.error('Error saving audit log to MySQL:', error.message);\r\n            }\r\n          } else {\r\n            console.log(\"Step break: No log found for Deleted Record ID:\", DeletedRecordId);\r\n            break;\r\n          }\r\n        }\r\n      }\r\n      // Handle Update action\r\n      else if (AuditLogData.ActionType === LogActionEnum.Update) {\r\n        const ResultData = await this._DataSource.manager.query(\r\n          `${await this.GenerateQuery(AuditLogData.PerformedType, AuditLogData.ActionType, AuditLogData.PrimaryId, AuditLogData.UserIp)}`\r\n        );\r\n\r\n        for (const Result of ResultData) {\r\n          if (typeof Result.performed_parameter === 'object') {\r\n            Result.performed_parameter = JSON.stringify(Result.performed_parameter);\r\n          }\r\n          if (typeof Result.performed_parameter !== 'string') {\r\n            console.error('performed_parameter is not a valid JSON string:', Result.performed_parameter);\r\n            throw new Error('Invalid performed_parameter format');\r\n          }\r\n          let parsedParameter: any;\r\n          try {\r\n            parsedParameter = JSON.parse(Result.performed_parameter);\r\n          } catch (error) {\r\n            console.error('Error parsing performed_parameter:', error, Result.performed_parameter);\r\n            throw new SyntaxError('Invalid JSON in performed_parameter');\r\n          }\r\n          const LastUpdatedOrInserted = await this.GetLastAddedLog(Result.performed_type, Result.performed_module_id);\r\n\r\n          if (LastUpdatedOrInserted) {\r\n            for (const key of Object.keys(LastUpdatedOrInserted['performed_parameter'])) {\r\n              if (typeof LastUpdatedOrInserted['performed_parameter'][key] === 'object') {\r\n                LastUpdatedOrInserted['performed_parameter'][key] =\r\n                  LastUpdatedOrInserted['performed_parameter'][key]?.__new;\r\n              }\r\n            }\r\n            const diffRecord = jsonDiff.diff(\r\n              LastUpdatedOrInserted.performed_parameter,\r\n              parsedParameter,\r\n              { full: true }\r\n            );\r\n\r\n            if (diffRecord) {\r\n              for (const key of Object.keys(diffRecord)) {\r\n                if (typeof diffRecord[key] === 'object') {\r\n                  if (diffRecord[key] === null) {\r\n                    diffRecord[key] = \"\";\r\n                  } else if (!diffRecord[key][\"__old\"]) {\r\n                    diffRecord[key][\"__old\"] = \"\";\r\n                  }\r\n                }\r\n              }\r\n              Result.performed_parameter = JSON.stringify(diffRecord);\r\n            } else {\r\n              break;\r\n            }\r\n          }\r\n\r\n          // Create InfluxDB data point for Update\r\n          const dataPoint = new Point(process.env.INFLUX_DB)\r\n            .tag('performed_by', Result.performed_by)\r\n            .tag('performed_by_id', Result.performed_by_id)\r\n            .tag('performed_on', new Date(Result.performed_on).toISOString())\r\n            .tag('performed_module_name', Result.performed_module_name)\r\n            .tag('performed_module_header_name', Result.performed_module_header_name)\r\n            .tag('performed_module_id', Result.performed_module_id)\r\n            .tag('performed_type', Result.performed_type)\r\n            .tag('performed_action', Result.performed_action)\r\n            .stringField('performed_parameter', Result.performed_parameter)\r\n            .tag('performed_ipaddress', Result.performed_ipaddress)\r\n            .tag('performed_coordinates', Result.performed_coordinates);\r\n\r\n          // Write the point to InfluxDB and flush\r\n          this.writeApi.writePoint(dataPoint);\r\n          await this.writeApi.flush();\r\n\r\n          // Insert to MySQL DB\r\n          const LogData = {\r\n            performed_by: Result.performed_by,\r\n            performed_by_id: Result.performed_by_id,\r\n            performed_on: new Date(Result.performed_on).toISOString(),\r\n            performed_module_name: Result.performed_module_name,\r\n            performed_module_header_name: Result.performed_module_header_name,\r\n            performed_module_id: Result.performed_module_id,\r\n            performed_type: Result.performed_type,\r\n            performed_action: Result.performed_action,\r\n            performed_parameter: Result.performed_parameter,\r\n            performed_ipaddress: Result.performed_ipaddress,\r\n            performed_coordinates: Result.performed_coordinates,\r\n            created_by_id: Result.performed_by_id,\r\n            created_on: new Date(Result.performed_on).toISOString(),\r\n          };\r\n\r\n          try {\r\n            await audit_log.save(LogData);\r\n            console.log('Audit log saved to MySQL successfully.');\r\n          } catch (error) {\r\n            console.error('Error saving audit log to MySQL:', error.message);\r\n          }\r\n\r\n        }\r\n      }\r\n      // Handle Insert action\r\n      else if (AuditLogData.ActionType === LogActionEnum.Insert) {\r\n        const ResultData = await this._DataSource.manager.query(`${await this.GenerateQuery(AuditLogData.PerformedType, AuditLogData.ActionType, AuditLogData.PrimaryId, AuditLogData.UserIp)}`);\r\n\r\n        for (const Result of ResultData) {\r\n          const dataPoint = new Point(process.env.INFLUX_DB)\r\n            .tag('performed_by', Result.performed_by)\r\n            .tag('performed_by_id', Result.performed_by_id)\r\n            .tag('performed_on', new Date(Result.performed_on).toISOString())\r\n            .tag('performed_module_name', Result.performed_module_name)\r\n            .tag('performed_module_header_name', Result.performed_module_header_name)\r\n            .tag('performed_module_id', Result.performed_module_id)\r\n            .tag('performed_type', Result.performed_type)\r\n            .tag('performed_action', Result.performed_action)\r\n            .stringField('performed_parameter', JSON.stringify(Result.performed_parameter))\r\n            .tag('performed_ipaddress', Result.performed_ipaddress)\r\n            .tag('performed_coordinates', Result.performed_coordinates);\r\n\r\n          // Write the point to InfluxDB and flush\r\n          this.writeApi.writePoint(dataPoint);\r\n          await this.writeApi.flush();\r\n          // Insert to MySQL DB\r\n          const LogData = {\r\n            performed_by: Result.performed_by,\r\n            performed_by_id: Result.performed_by_id,\r\n            performed_on: new Date(Result.performed_on).toISOString(),\r\n            performed_module_name: Result.performed_module_name,\r\n            performed_module_header_name: Result.performed_module_header_name,\r\n            performed_module_id: Result.performed_module_id,\r\n            performed_type: Result.performed_type,\r\n            performed_action: Result.performed_action,\r\n            performed_parameter: Result.performed_parameter,\r\n            performed_ipaddress: Result.performed_ipaddress,\r\n            performed_coordinates: Result.performed_coordinates,\r\n            created_by_id: Result.performed_by_id,\r\n            created_on: new Date(Result.performed_on).toISOString(),\r\n          };\r\n          try {\r\n            await audit_log.save(LogData);\r\n            console.log('Audit log saved to MySQL successfully.');\r\n          } catch (error) {\r\n            console.error('Error saving audit log to MySQL:', error.message);\r\n          }\r\n\r\n        }\r\n      }\r\n    } catch (e) {\r\n      console.error('Error in Insert method:', e);\r\n    }\r\n  }\r\n\r\n\r\n  async LazyLoadList(AuditLogLazyLoadData: AuditLogLazyLoadModel) {\r\n    let WhereCondition: string[] = [];\r\n    let searchKey = AuditLogLazyLoadData.keyword?.length || 0 > 0 ? AuditLogLazyLoadData.keyword : \"\";\r\n    WhereCondition[\"performed_on\"] = { $gte: AuditLogLazyLoadData.start_date, $lt: AuditLogLazyLoadData.end_date }\r\n    if (AuditLogLazyLoadData.user_id > \"0\") {\r\n      WhereCondition.push(`|> filter(fn: (r) => r[\"performed_by_id\"] == \"${AuditLogLazyLoadData.user_id}\")`);\r\n    }\r\n    if (AuditLogLazyLoadData.action?.length > 0) {\r\n      WhereCondition.push(`|> filter(fn: (r) => r[\"performed_action\"] == \"${AuditLogLazyLoadData.action}\")`);\r\n    }\r\n    if (AuditLogLazyLoadData.module?.length > 0) {\r\n      WhereCondition.push(`|> filter(fn: (r) => r[\"performed_type\"] == \"${AuditLogLazyLoadData.module}\")`);\r\n    }\r\n    if (searchKey) {\r\n      WhereCondition.push(`|> filter(fn: (r) => strings.containsStr(v : strings.toLower(v : r[\"performed_module_name_string\"]), substr: strings.toLower(v : \"${searchKey}\")))`);\r\n    }\r\n    const GetEventLogList = await new Promise((resolve, reject) => {\r\n      const result: any = [];\r\n      const observerdata = {\r\n        next(row, tableMeta) {\r\n          const o = tableMeta.toObject(row);\r\n          result.push({\r\n            performed_action: o.performed_action,\r\n            performed_by: o.performed_by,\r\n            performed_by_id: o.performed_by_id,\r\n            performed_module_name: o.performed_module_name,\r\n            performed_module_header_name: o.performed_module_header_name,\r\n            performed_module_id: o.performed_module_id,\r\n            performed_on: new Date(o.performed_on).toLocaleString(),\r\n            performed_type: o.performed_type,\r\n            performed_ipaddress: o.performed_ipaddress,\r\n            performed_coordinates: o.performed_coordinates,\r\n            performed_parameter: JSON.parse(o._value)\r\n          });\r\n        },\r\n        error(error) {\r\n          reject(error);\r\n        },\r\n        complete() {\r\n          resolve(result);\r\n        }\r\n      }\r\n\r\n      const query = `\r\n  import \"strings\"\r\n  from(bucket: \"${process.env.INFLUX_BUCKET}\")\r\n      |> range(start: ${new Date(AuditLogLazyLoadData.start_date).toISOString()}, stop: ${new Date(AuditLogLazyLoadData.end_date).toISOString()})\r\n      |> filter(fn: (r) => r[\"_measurement\"] == \"${process.env.INFLUX_DB}\")\r\n      |> filter(fn: (r) => r[\"_field\"] == \"performed_parameter\")\r\n      |> fill(column: \"performed_module_name\", value: \"\")\r\n      |> map(fn: (r) => ({ r with performed_module_name_string: string(v: r.performed_module_name) }))\r\n      ${WhereCondition.join('\\n')}\r\n      |> group()\r\n      |> sort(columns: [\"performed_on\"], desc: true)\r\n      |> limit(n: ${AuditLogLazyLoadData.take}, offset: ${AuditLogLazyLoadData.skip})\r\n`;\r\n\r\n      this.queryApi.queryRows(query, observerdata);\r\n\r\n    });\r\n    const GetEventLogCount = await new Promise((resolve, reject) => {\r\n      let total_count: number = 0;\r\n      const observercount = {\r\n        next(row, tableMeta) {\r\n          const o = tableMeta.toObject(row);\r\n          total_count = o._value;\r\n        },\r\n        error(error) {\r\n          reject(error);\r\n        },\r\n        complete() {\r\n          resolve(total_count);\r\n        }\r\n      }\r\n      const countquery = `\r\n  import \"strings\"\r\n  from(bucket: \"${process.env.INFLUX_BUCKET}\")\r\n      |> range(start: ${new Date(AuditLogLazyLoadData.start_date).toISOString()}, stop: ${new Date(AuditLogLazyLoadData.end_date).toISOString()})\r\n      |> filter(fn: (r) => r[\"_measurement\"] == \"${process.env.INFLUX_DB}\")\r\n      |> fill(column: \"performed_module_name\", value: \"\")\r\n      |> map(fn: (r) => ({ r with performed_module_name_string: string(v: r.performed_module_name) }))\r\n      ${WhereCondition.join('\\n')}\r\n      |> group()\r\n      |> count(column: \"_value\")\r\n`;\r\n      this.queryApi.queryRows(countquery, observercount);\r\n    });\r\n    const Result: any = {};\r\n    Result['data'] = GetEventLogList;\r\n    Result['total_record'] = GetEventLogCount;\r\n    return Result;\r\n  }\r\n\r\n  async AuditLogList(AuditLogFilterDate: AuditLogFilterModel): Promise<any[]> {\r\n    try {\r\n      let GetAllAuditLogs: any = new Promise<any[]>((resolve, reject) => {\r\n        const result: any[] = [];\r\n        const observerdata = {\r\n          next(row: any, tableMeta: any) {\r\n            const o = tableMeta.toObject(row);\r\n            let parsedValue = o._value;\r\n\r\n            result.push({\r\n              performed_action: o.performed_action,\r\n              performed_by: o.performed_by,\r\n              performed_by_id: o.performed_by_id,\r\n              performed_module_name: o.performed_module_name,\r\n              performed_module_header_name: o.performed_module_header_name,\r\n              performed_module_id: o.performed_module_id,\r\n              performed_on: o.performed_on,\r\n              performed_type: o.performed_type,\r\n              performed_ipaddress: o.performed_ipaddress,\r\n              performed_coordinates: o.performed_coordinates,\r\n              performed_parameter: parsedValue,\r\n            });\r\n          },\r\n          error(error: any) {\r\n            reject(error);\r\n          },\r\n          complete() {\r\n            resolve(result);\r\n          },\r\n        };\r\n\r\n        let query: string;\r\n\r\n        if (AuditLogFilterDate.Start_date && AuditLogFilterDate.end_date) {\r\n          const startdate = new Date(AuditLogFilterDate.Start_date);\r\n          const Enddate = new Date(AuditLogFilterDate.end_date);\r\n\r\n          // Validate the date range\r\n          if (isNaN(startdate.getTime()) || isNaN(Enddate.getTime())) {\r\n            throw new Error(\"Invalid date format in Start_date or end_date.\");\r\n          }\r\n\r\n          if (startdate >= Enddate) {\r\n            throw new Error(\"Start_date must be earlier than end_date.\");\r\n          }\r\n          query = `\r\n          from(bucket: \"${process.env.INFLUX_BUCKET}\")\r\n          |> range(start: ${startdate.toISOString()}, stop: ${Enddate.toISOString()})\r\n          |> filter(fn: (r) => r[\"_measurement\"] == \"${process.env.INFLUX_DB}\")\r\n          |> group()\r\n          |> sort(columns: [\"performed_on\"], desc: true)\r\n        `;\r\n        }\r\n        else {\r\n          const startdate: Date = new Date();\r\n          startdate.setFullYear(startdate.getFullYear() - 100);\r\n          query = `\r\n          from(bucket: \"${process.env.INFLUX_BUCKET}\")\r\n          |> range(start: ${startdate.toISOString()}, stop: ${new Date().toISOString()})\r\n          |> filter(fn: (r) => r[\"_measurement\"] == \"${process.env.INFLUX_DB}\")\r\n          |> group()\r\n          |> sort(columns: [\"performed_on\"], desc: true)\r\n        `;\r\n        }\r\n        this.queryApi.queryRows(query, observerdata);\r\n      });\r\n      let ResultData: any = [];\r\n      ResultData = await GetAllAuditLogs;\r\n      ResultData = ResultData?.map((o, i) => ({\r\n        ...o,\r\n        id: i + 1\r\n      }));\r\n      return await ResultData;\r\n    } catch (e) {\r\n      console.error(\"Error fetching audit logs:\", e.message);\r\n      throw new Error(`Error fetching audit logs: ${e.message}`);\r\n    }\r\n  }\r\n\r\n  async DetailList(EventLog: any) {\r\n    const BooleanColumns = ['is_', 'status'];\r\n    EventLog[\"audit_log_events\"] = [];\r\n    for (const AuditLogEvents of Object.keys(EventLog.performed_parameter).filter(o => !AuditLogRemoveColumnsName.includes(o))) {\r\n      if (EventLog.performed_action == LogActionEnum.Insert || EventLog.performed_action == LogActionEnum.Delete) {\r\n        if (typeof EventLog.performed_parameter[AuditLogEvents] == 'object') {\r\n          if (AuditLogEvents == EventLog.performed_module_header_name) {\r\n            EventLog[\"audit_log_events\"].push(`User <b>${EventLog.performed_by}</b> ${EventLog.performed_action.toUpperCase()} a  <b>${EventLog.performed_type.split('_').join(' ')}</b> ${AuditLogEvents.split('_').join(' ')} to <b>${BooleanColumns.some(o => AuditLogEvents.includes(o)) ? (EventLog.performed_parameter[AuditLogEvents]?.__old == 1 ? 'Yes' : 'No') : EventLog.performed_parameter[AuditLogEvents]?.__old} </b>`);\r\n          }\r\n          else {\r\n            EventLog[\"audit_log_events\"].push(`User <b>${EventLog.performed_by}</b> ${EventLog.performed_action.toUpperCase()} a  <b>${EventLog.performed_type.split('_').join(' ')}</b> ${AuditLogEvents.split('_').join(' ')} of <b>${BooleanColumns.some(o => AuditLogEvents.includes(o)) ? (EventLog.performed_parameter[AuditLogEvents]?.__old == 1 ? 'Yes' : 'No') : EventLog.performed_parameter[AuditLogEvents]?.__old} </b>`);\r\n          }\r\n        }\r\n        else {\r\n          if (AuditLogEvents == EventLog.performed_module_header_name) {\r\n            EventLog[\"audit_log_events\"].push(`User <b>${EventLog.performed_by}</b> ${EventLog.performed_action.toUpperCase()} a  <b>${EventLog.performed_type.split('_').join(' ')}</b> ${AuditLogEvents.split('_').join(' ')} to <b>${BooleanColumns.some(o => AuditLogEvents.includes(o)) ? (EventLog.performed_parameter[AuditLogEvents] == 1 ? 'Yes' : 'No') : EventLog.performed_parameter[AuditLogEvents]}</b>`);\r\n          }\r\n          else {\r\n            EventLog[\"audit_log_events\"].push(`User <b>${EventLog.performed_by}</b> ${EventLog.performed_action.toUpperCase()} a  <b>${EventLog.performed_type.split('_').join(' ')}</b> ${AuditLogEvents.split('_').join(' ')} of <b>${BooleanColumns.some(o => AuditLogEvents.includes(o)) ? (EventLog.performed_parameter[AuditLogEvents] == 1 ? 'Yes' : 'No') : EventLog.performed_parameter[AuditLogEvents]}</b>`);\r\n          }\r\n        }\r\n      }\r\n      else {\r\n        if (typeof EventLog.performed_parameter[AuditLogEvents] == 'object') {\r\n          if (AuditLogEvents == EventLog.performed_module_header_name) {\r\n            EventLog[\"audit_log_events\"].push(`User <b>${EventLog.performed_by}</b> ${EventLog.performed_action.toUpperCase()} a  <b>${EventLog.performed_type.split('_').join(' ')}</b> ${AuditLogEvents.split('_').join(' ')} to <b>${BooleanColumns.some(o => AuditLogEvents.includes(o)) ? (EventLog.performed_parameter[AuditLogEvents]?.__old == 1 ? 'Yes' : 'No') : EventLog.performed_parameter[AuditLogEvents]?.__old}</b> to <b>${BooleanColumns.some(o => AuditLogEvents.includes(o)) ? (EventLog.performed_parameter[AuditLogEvents]?.__new == 1 ? 'Yes' : 'No') : EventLog.performed_parameter[AuditLogEvents]?.__new}</b>`);\r\n          }\r\n          else {\r\n            EventLog[\"audit_log_events\"].push(`User <b>${EventLog.performed_by}</b> ${EventLog.performed_action.toUpperCase()} a  <b>${EventLog.performed_type.split('_').join(' ')}</b> ${AuditLogEvents.split('_').join(' ')} of <b>${BooleanColumns.some(o => AuditLogEvents.includes(o)) ? (EventLog.performed_parameter[AuditLogEvents]?.__old == 1 ? 'Yes' : 'No') : EventLog.performed_parameter[AuditLogEvents]?.__old}</b> to <b>${BooleanColumns.some(o => AuditLogEvents.includes(o)) ? (EventLog.performed_parameter[AuditLogEvents]?.__new == 1 ? 'Yes' : 'No') : EventLog.performed_parameter[AuditLogEvents]?.__new}</b>`);\r\n          }\r\n        }\r\n        else {\r\n          if (AuditLogEvents == EventLog.performed_module_header_name) {\r\n            EventLog[\"audit_log_events\"].push(`User <b>${EventLog.performed_by}</b> ${EventLog.performed_action.toUpperCase()} a  <b>${EventLog.performed_type.split('_').join(' ')}</b> ${AuditLogEvents.split('_').join(' ')} to <b>${BooleanColumns.some(o => AuditLogEvents.includes(o)) ? (EventLog.performed_parameter[AuditLogEvents] == 1 ? 'Yes' : 'No') : EventLog.performed_parameter[AuditLogEvents]}</b>`);\r\n          }\r\n          else {\r\n            EventLog[\"audit_log_events\"].push(`User <b>${EventLog.performed_by}</b> ${EventLog.performed_action.toUpperCase()} a  <b>${EventLog.performed_type.split('_').join(' ')}</b> ${AuditLogEvents.split('_').join(' ')} of <b>${BooleanColumns.some(o => AuditLogEvents.includes(o)) ? (EventLog.performed_parameter[AuditLogEvents] == 1 ? 'Yes' : 'No') : EventLog.performed_parameter[AuditLogEvents]}</b>`);\r\n          }\r\n        }\r\n      }\r\n    }\r\n    return EventLog;\r\n  }\r\n\r\n  GetColumneName(table: string, columns: string) {\r\n    let tablename: string = \"\";\r\n    if (!this.ChangeTableReferenceName[table]) {\r\n      tablename = columns.replace('_id', '');\r\n    }\r\n    else if (this.ChangeTableReferenceName[table][1]?.find(f => f.includes(columns))) {\r\n      tablename = this.ChangeTableReferenceName[table][0].table;\r\n    }\r\n    else {\r\n      tablename = columns.replace('_id', '');\r\n    }\r\n    return this.LogTableIdentifierName[tablename]?.replace(\"main.\", \"\");\r\n  }\r\n\r\n  GetTableName(table: string, columns: string) {\r\n    let tablename = \"\";\r\n    if (!this.ChangeTableReferenceName[table]) {\r\n      tablename = columns.replace('_id', '');\r\n    }\r\n    else if (this.ChangeTableReferenceName[table][1]?.find(f => f.includes(columns))) {\r\n      tablename = this.ChangeTableReferenceName[table][0].table;\r\n    }\r\n    else {\r\n      tablename = columns.replace('_id', '');\r\n    }\r\n    return tablename;\r\n  }\r\n\r\n\r\n}\r\n"],"names":["AuditLogService","AuditEmitEvent","AuditLogData","process","env","AUDIT_LOG","_EventEmitter","emit","EventNameEnum","AuditLog","getCoordinates","UserIp","JSON","stringify","message","response","fetch","ok","Error","data","json","ip","latitude","longitude","country","country_name","region","city","timezone","error","console","GenerateQuery","table","action_type","ids","databaseName","DB_NAME","TableColumns","_DataSource","manager","query","length","RemoveColumnsName","Array","isArray","RemoveColumnsByTable","RemoveColumnsNameByTable","filter","o","columns","undefined","JsonObjectFilter","includes","json_object","map","json_object_query","join","tableIdentifier","LogTableIdentifierName","isNestedColumn","columnName","split","coordinates","DynamicQuery","replace","id","GetLastAddedLog","PerformedType","PrimaryId","GetLastEventLog","Promise","resolve","reject","result","observerdata","next","row","tableMeta","toObject","push","performed_action","performed_by","performed_by_id","performed_module_name","performed_module_header_name","performed_module_id","performed_on","performed_type","performed_ipaddress","performed_coordinates","performed_parameter","parse","_value","complete","startdate","Date","setFullYear","getFullYear","INFLUX_BUCKET","toISOString","INFLUX_DB","queryApi","queryRows","e","Insert","req","ActionType","LogActionEnum","Delete","DeletedRecordId","LastUpdatedOrInserted","key","Object","keys","__new","dataPoint","Point","tag","stringField","writeApi","writePoint","flush","LogData","created_by_id","created_on","audit_log","save","log","Update","ResultData","Result","parsedParameter","SyntaxError","diffRecord","jsonDiff","diff","full","LazyLoadList","AuditLogLazyLoadData","WhereCondition","searchKey","keyword","$gte","start_date","$lt","end_date","user_id","action","module","GetEventLogList","toLocaleString","take","skip","GetEventLogCount","total_count","observercount","countquery","AuditLogList","AuditLogFilterDate","GetAllAuditLogs","parsedValue","Start_date","Enddate","isNaN","getTime","i","DetailList","EventLog","BooleanColumns","AuditLogEvents","AuditLogRemoveColumnsName","toUpperCase","some","__old","GetColumneName","tablename","ChangeTableReferenceName","find","f","GetTableName","AuditLogRemoveColumnsNameByTable","SameReferenceColumn","AuditLogSameTableReferenceName","AuditLogIdentityName","AuditLogChangeTableReferenceName","DB","InfluxDB","url","INFLUX_URL","token","INFLUX_TOKEN","getWriteApi","INFLUX_ORG","getQueryApi","async"],"mappings":"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"}