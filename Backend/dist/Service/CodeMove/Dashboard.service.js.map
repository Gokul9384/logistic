{"version":3,"sources":["../../../src/Service/CodeMove/Dashboard.service.ts"],"sourcesContent":["// src/services/DashboardService.ts\nimport { Injectable } from \"@nestjs/common\";\nimport { DataSource } from \"typeorm\";\n\n@Injectable()\nexport class DashboardService {\n    constructor(\n        private readonly _DataSource: DataSource\n    ) { }\n\n    async DashboardStats() {\n        const order_count = await this._DataSource.query(\n            `SELECT COUNT(id) AS order_count FROM \\`order\\` o;`\n        );\n\n        const quote_count = await this._DataSource.query(\n            `SELECT COUNT(id) AS quote_count FROM quote q where q.quote_status = 'Sent'`\n        );\n\n        const active_booking = await this._DataSource.query(\n            `SELECT COUNT(id) AS active_booking \n             FROM bookings b \n             WHERE b.booking_status = 'Confirmed';`\n        );\n\n        const pending_delivery = await this._DataSource.query(\n            `SELECT COUNT(id) AS pending_delivery \n             FROM delivery d \n             WHERE d.delivery_status != 'Delivered';`\n        );\n\n        return {\n            order_count: order_count[0]?.order_count || 0,\n            quote_count: quote_count[0]?.quote_count || 0,\n            active_booking: active_booking[0]?.active_booking || 0,\n            pending_delivery: pending_delivery[0]?.pending_delivery || 0\n        };\n    }\n\n    async DashboardOrderList(startDate?: string, endDate?: string) {\n        let query = `\n        SELECT \n            o.id AS order_id,\n            o.order_number,\n            o.order_date,\n            o.source_location,\n            o.destination_location,\n            o.order_status\n        FROM \\`order\\` o\n    `;\n        const params: any[] = [];\n\n        if (startDate && endDate) {\n            query += ` WHERE o.order_date BETWEEN ? AND ? `;\n            params.push(startDate, endDate);\n        }\n\n        query += ` ORDER BY o.order_date DESC;`;\n\n        return await this._DataSource.query(query, params);\n    }\n\n}\n"],"names":["DashboardService","DashboardStats","order_count","_DataSource","query","quote_count","active_booking","pending_delivery","DashboardOrderList","startDate","endDate","params","push"],"mappings":"AAAA,mCAAmC;;;;;+BAKtBA;;;eAAAA;;;wBAJc;yBACA;;;;;;;;;;AAGpB,IAAA,AAAMA,mBAAN,MAAMA;IAKT,MAAMC,iBAAiB;QACnB,MAAMC,cAAc,MAAM,IAAI,CAACC,WAAW,CAACC,KAAK,CAC5C,CAAC,iDAAiD,CAAC;QAGvD,MAAMC,cAAc,MAAM,IAAI,CAACF,WAAW,CAACC,KAAK,CAC5C,CAAC,0EAA0E,CAAC;QAGhF,MAAME,iBAAiB,MAAM,IAAI,CAACH,WAAW,CAACC,KAAK,CAC/C,CAAC;;kDAEqC,CAAC;QAG3C,MAAMG,mBAAmB,MAAM,IAAI,CAACJ,WAAW,CAACC,KAAK,CACjD,CAAC;;oDAEuC,CAAC;QAG7C,OAAO;YACHF,aAAaA,WAAW,CAAC,EAAE,EAAEA,eAAe;YAC5CG,aAAaA,WAAW,CAAC,EAAE,EAAEA,eAAe;YAC5CC,gBAAgBA,cAAc,CAAC,EAAE,EAAEA,kBAAkB;YACrDC,kBAAkBA,gBAAgB,CAAC,EAAE,EAAEA,oBAAoB;QAC/D;IACJ;IAEA,MAAMC,mBAAmBC,SAAkB,EAAEC,OAAgB,EAAE;QAC3D,IAAIN,QAAQ,CAAC;;;;;;;;;IASjB,CAAC;QACG,MAAMO,SAAgB,EAAE;QAExB,IAAIF,aAAaC,SAAS;YACtBN,SAAS,CAAC,oCAAoC,CAAC;YAC/CO,OAAOC,IAAI,CAACH,WAAWC;QAC3B;QAEAN,SAAS,CAAC,4BAA4B,CAAC;QAEvC,OAAO,MAAM,IAAI,CAACD,WAAW,CAACC,KAAK,CAACA,OAAOO;IAC/C;IAtDA,YACI,AAAiBR,WAAuB,CAC1C;aADmBA,cAAAA;IACjB;AAsDR"}