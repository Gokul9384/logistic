{"version":3,"sources":["../../../src/Service/CodeMove/ServiceArea.service.ts"],"sourcesContent":["import { Injectable } from \"@nestjs/common\";\nimport { AuditLogService } from \"../Admin/AuditLog.service\";\nimport { LogActionEnum } from \"@Root/Helper/Enum/AuditLogEnum\";\nimport { ResponseEnum } from \"@Root/Helper/Enum/ResponseEnum\";\nimport { service_area } from \"@Root/Database/Table/CodeMove/service_area\";\nimport { ServiceAreaModel } from \"@Model/CodeMove/ServiceArea.model\";\n\n@Injectable()\nexport class ServiceAreaService {\n    constructor(private _AuditLogService: AuditLogService) { }\n\n    // Get all vehicle types\n    async GetAll() {\n        return await service_area.find();\n    }\n\n    // Get vehicle type by ID\n    async GetById(Id: string) {\n        const data = await service_area.findOne({ where: { id: Id } });\n        if (!data) {\n            throw new Error(ResponseEnum.NotFound);\n        }\n        return data;\n    }\n\n    // Insert a new vehicle type\n    async Insert(data: ServiceAreaModel, UserId: string, UserIp: string) {\n        const _ServiceArea = new service_area();\n        _ServiceArea.name = data.name;\n        _ServiceArea.description = data.description;\n        _ServiceArea.created_by_id = UserId;\n        _ServiceArea.created_on = new Date();\n\n        await service_area.insert(_ServiceArea);\n        this._AuditLogService.AuditEmitEvent({\n            PerformedType: service_area.name,\n            ActionType: LogActionEnum.Insert,\n            PrimaryId: [_ServiceArea.id],\n            UserIp: UserIp\n        });\n\n        return _ServiceArea;\n    }\n\n    // Update existing vehicle type\n    async Update(Id: string, data: ServiceAreaModel, UserId: string, UserIp: string) {\n        const existing = await service_area.findOne({ where: { id: Id } });\n        if (!existing) {\n            throw new Error(ResponseEnum.NotFound);\n        }\n\n        existing.name = data.name;\n        existing.description = data.description;\n        existing.updated_by_id = UserId;\n        existing.updated_on = new Date();\n\n        await service_area.update(Id, existing);\n        this._AuditLogService.AuditEmitEvent({\n            PerformedType: service_area.name,\n            ActionType: LogActionEnum.Update,\n            PrimaryId: [existing.id],\n            UserIp: UserIp\n        });\n\n        return existing;\n    }\n\n    // Delete vehicle type\n    async Delete(Id: string, UserIp: string) {\n        const existing = await service_area.findOne({ where: { id: Id } });\n        if (!existing) {\n            throw new Error(ResponseEnum.NotFound);\n        }\n\n        await existing.remove();\n        this._AuditLogService.AuditEmitEvent({\n            PerformedType: service_area.name,\n            ActionType: LogActionEnum.Delete,\n            PrimaryId: [existing.id],\n            UserIp: UserIp\n        });\n\n        return true;\n    }\n}\n"],"names":["ServiceAreaService","GetAll","service_area","find","GetById","Id","data","findOne","where","id","Error","ResponseEnum","NotFound","Insert","UserId","UserIp","_ServiceArea","name","description","created_by_id","created_on","Date","insert","_AuditLogService","AuditEmitEvent","PerformedType","ActionType","LogActionEnum","PrimaryId","Update","existing","updated_by_id","updated_on","update","Delete","remove"],"mappings":";;;;+BAQaA;;;eAAAA;;;wBARc;iCACK;8BACF;8BACD;8BACA;;;;;;;;;;AAItB,IAAA,AAAMA,qBAAN,MAAMA;IAGT,wBAAwB;IACxB,MAAMC,SAAS;QACX,OAAO,MAAMC,0BAAY,CAACC,IAAI;IAClC;IAEA,yBAAyB;IACzB,MAAMC,QAAQC,EAAU,EAAE;QACtB,MAAMC,OAAO,MAAMJ,0BAAY,CAACK,OAAO,CAAC;YAAEC,OAAO;gBAAEC,IAAIJ;YAAG;QAAE;QAC5D,IAAI,CAACC,MAAM;YACP,MAAM,IAAII,MAAMC,0BAAY,CAACC,QAAQ;QACzC;QACA,OAAON;IACX;IAEA,4BAA4B;IAC5B,MAAMO,OAAOP,IAAsB,EAAEQ,MAAc,EAAEC,MAAc,EAAE;QACjE,MAAMC,eAAe,IAAId,0BAAY;QACrCc,aAAaC,IAAI,GAAGX,KAAKW,IAAI;QAC7BD,aAAaE,WAAW,GAAGZ,KAAKY,WAAW;QAC3CF,aAAaG,aAAa,GAAGL;QAC7BE,aAAaI,UAAU,GAAG,IAAIC;QAE9B,MAAMnB,0BAAY,CAACoB,MAAM,CAACN;QAC1B,IAAI,CAACO,gBAAgB,CAACC,cAAc,CAAC;YACjCC,eAAevB,0BAAY,CAACe,IAAI;YAChCS,YAAYC,2BAAa,CAACd,MAAM;YAChCe,WAAW;gBAACZ,aAAaP,EAAE;aAAC;YAC5BM,QAAQA;QACZ;QAEA,OAAOC;IACX;IAEA,+BAA+B;IAC/B,MAAMa,OAAOxB,EAAU,EAAEC,IAAsB,EAAEQ,MAAc,EAAEC,MAAc,EAAE;QAC7E,MAAMe,WAAW,MAAM5B,0BAAY,CAACK,OAAO,CAAC;YAAEC,OAAO;gBAAEC,IAAIJ;YAAG;QAAE;QAChE,IAAI,CAACyB,UAAU;YACX,MAAM,IAAIpB,MAAMC,0BAAY,CAACC,QAAQ;QACzC;QAEAkB,SAASb,IAAI,GAAGX,KAAKW,IAAI;QACzBa,SAASZ,WAAW,GAAGZ,KAAKY,WAAW;QACvCY,SAASC,aAAa,GAAGjB;QACzBgB,SAASE,UAAU,GAAG,IAAIX;QAE1B,MAAMnB,0BAAY,CAAC+B,MAAM,CAAC5B,IAAIyB;QAC9B,IAAI,CAACP,gBAAgB,CAACC,cAAc,CAAC;YACjCC,eAAevB,0BAAY,CAACe,IAAI;YAChCS,YAAYC,2BAAa,CAACE,MAAM;YAChCD,WAAW;gBAACE,SAASrB,EAAE;aAAC;YACxBM,QAAQA;QACZ;QAEA,OAAOe;IACX;IAEA,sBAAsB;IACtB,MAAMI,OAAO7B,EAAU,EAAEU,MAAc,EAAE;QACrC,MAAMe,WAAW,MAAM5B,0BAAY,CAACK,OAAO,CAAC;YAAEC,OAAO;gBAAEC,IAAIJ;YAAG;QAAE;QAChE,IAAI,CAACyB,UAAU;YACX,MAAM,IAAIpB,MAAMC,0BAAY,CAACC,QAAQ;QACzC;QAEA,MAAMkB,SAASK,MAAM;QACrB,IAAI,CAACZ,gBAAgB,CAACC,cAAc,CAAC;YACjCC,eAAevB,0BAAY,CAACe,IAAI;YAChCS,YAAYC,2BAAa,CAACO,MAAM;YAChCN,WAAW;gBAACE,SAASrB,EAAE;aAAC;YACxBM,QAAQA;QACZ;QAEA,OAAO;IACX;IA1EA,YAAY,AAAQQ,gBAAiC,CAAE;aAAnCA,mBAAAA;IAAqC;AA2E7D"}