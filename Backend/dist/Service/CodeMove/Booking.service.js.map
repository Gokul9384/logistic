{"version":3,"sources":["../../../src/Service/CodeMove/Booking.service.ts"],"sourcesContent":["import { Injectable } from \"@nestjs/common\";\nimport { BookingModel } from \"@Model/CodeMove/Booking.model\";\nimport { bookings } from \"@Root/Database/Table/CodeMove/bookings\";\nimport { AuditLogService } from \"../Admin/AuditLog.service\";\nimport { LogActionEnum } from \"@Root/Helper/Enum/AuditLogEnum\";\nimport { ResponseEnum } from \"@Root/Helper/Enum/ResponseEnum\";\nimport { delivery } from \"@Root/Database/Table/CodeMove/delivery\";\nimport { DeliveryStatusEnum } from \"@Root/Helper/Enum/DeliveryStatusEnum\";\nimport { CommonService } from \"../Common.service\";\nimport { DataSource } from \"typeorm\";\nimport { notification } from \"@Root/Database/Table/CodeMove/notification\";\nimport { BookingStatusEnum } from \"@Root/Helper/Enum/BookingStatusEnum\";\nimport { OrderStatusEnum } from \"@Root/Helper/Enum/OrderStatusEnum\";\n\n@Injectable()\nexport class BookingService {\n    constructor(\n        private _AuditLogService: AuditLogService,\n        private _CommonService: CommonService,\n        private _DataSource: DataSource\n    ) { }\n\n    async GetAll() {\n        return await bookings.find({ relations: [\"order\", \"vendor\", \"quote\", \"driver\", \"customer\"] });\n    }\n\n    async GetById(Id: string) {\n        const data = await bookings.findOne({ where: { id: Id }, relations: [\"order\", \"vendor\", \"quote\"] });\n        if (!data) throw new Error(ResponseEnum.NotFound);\n        return data;\n    }\n\n    // async Insert(BookingData: BookingModel, UserId: string, UserIp: string) {\n    //     let BookingNumber = await this._DataSource.query(`SELECT b.booking_number FROM \\`bookings\\` AS b ORDER BY CAST(REGEXP_REPLACE(b.booking_number, '[^0-9]', '') AS UNSIGNED) DESC`);\n    //     if (BookingNumber[0]?.booking_number) {\n    //         BookingNumber[0].booking_number = this._CommonService.AutoGenerateNumber(BookingNumber[0].booking_number);\n    //     }\n    //     else {\n    //         BookingNumber[0] = {};\n    //         BookingNumber[0]['booking_number'] = \"BK-00001\";\n    //     }\n    //     const _BookingData = new bookings();\n    //     _BookingData.booking_number = BookingNumber[0].booking_number;\n    //     _BookingData.order_id = BookingData.order_id;\n    //     _BookingData.vendor_id = BookingData.vendor_id;\n    //     _BookingData.customer_id = BookingData.customer_id;\n    //     _BookingData.quote_id = BookingData.quote_id;\n    //     _BookingData.amount = BookingData.amount;\n    //     _BookingData.booking_status = BookingData.booking_status;\n    //     _BookingData.driver_id = BookingData.driver_id;\n    //     _BookingData.vehicle_number = BookingData.vehicle_number;\n    //     _BookingData.created_by_id = UserId;\n    //     _BookingData.created_on = new Date();\n\n    //     await bookings.insert(_BookingData);\n    //     const newVendorNotification = new notification();\n    //     newVendorNotification.title = 'New Booking Created';\n    //     newVendorNotification.message = `Booking ${_BookingData.booking_number} has been placed.`;\n    //     newVendorNotification.user_id = _BookingData.vendor_id;\n    //     newVendorNotification.user_type = 'Vendor';\n    //     newVendorNotification.route_module = 'bookings';\n    //     newVendorNotification.route_id = _BookingData.id;\n    //     newVendorNotification.is_read = false;\n    //     newVendorNotification.created_by_id = UserId;\n    //     newVendorNotification.created_on = new Date();\n\n    //     await notification.insert(newVendorNotification);\n\n    //     const newCustomerNotification = new notification();\n    //     newCustomerNotification.title = 'New Booking Created';\n    //     newCustomerNotification.message = `Booking ${_BookingData.booking_number} has been placed.`;\n    //     newCustomerNotification.user_id = _BookingData.customer_id;\n    //     newCustomerNotification.user_type = 'Customer';\n    //     newCustomerNotification.route_module = 'bookings';\n    //     newCustomerNotification.route_id = _BookingData.id;\n    //     newCustomerNotification.is_read = false;\n    //     newCustomerNotification.created_by_id = UserId;\n    //     newCustomerNotification.created_on = new Date();\n    //     await notification.insert(newCustomerNotification);\n\n\n    //     this._AuditLogService.AuditEmitEvent({\n    //         PerformedType: bookings.name,\n    //         ActionType: LogActionEnum.Insert,\n    //         PrimaryId: [_BookingData.id],\n    //         UserIp: UserIp\n    //     });\n\n    //     // In BookingService, after vendor accepts and assigns driver\n    //     await delivery.insert({\n    //         order_id: _BookingData.order_id,\n    //         booking_id: _BookingData.id,\n    //         driver_id: _BookingData.driver_id,\n    //         delivery_status: DeliveryStatusEnum.Assigned,\n    //         start_time: new Date(),\n    //         created_by_id: UserId,\n    //         created_on: new Date()\n    //     });\n\n\n    //     return _BookingData;\n    // }\n\n    // async Update(Id: string, BookingData: BookingModel, UserId: string, UserIp: string) {\n    //     const UpdateData = await bookings.findOne({ where: { id: Id } });\n    //     if (!UpdateData) throw new Error(ResponseEnum.NotFound);\n\n    //     UpdateData.order_id = BookingData.order_id;\n    //     UpdateData.vendor_id = BookingData.vendor_id;\n    //     UpdateData.customer_id = BookingData.customer_id;\n    //     UpdateData.quote_id = BookingData.quote_id;\n    //     UpdateData.amount = BookingData.amount;\n    //     UpdateData.booking_status = BookingData.booking_status;\n    //     UpdateData.driver_id = BookingData.driver_id;\n    //     UpdateData.vehicle_number = BookingData.vehicle_number;\n    //     UpdateData.updated_by_id = UserId;\n    //     UpdateData.updated_on = new Date();\n\n    //     await bookings.update(Id, UpdateData);\n\n    //     const newVendorNotification = new notification();\n    //     newVendorNotification.title = 'Booking Updated';\n    //     newVendorNotification.message = `Booking ${UpdateData.booking_number} has been updated.`;\n    //     newVendorNotification.user_id = UpdateData.vendor_id;\n    //     newVendorNotification.user_type = 'Vendor';\n    //     newVendorNotification.is_read = false;\n    //     newVendorNotification.created_by_id = UserId;\n    //     newVendorNotification.created_on = new Date();\n\n    //     await notification.insert(newVendorNotification);\n\n    //     const newCustomerNotification = new notification();\n    //     newCustomerNotification.title = 'Booking Updated';\n    //     newCustomerNotification.message = `Booking ${UpdateData.booking_number} has been updated.`;\n    //     newCustomerNotification.user_id = UpdateData.customer_id;\n    //     newCustomerNotification.user_type = 'Customer';\n    //     newCustomerNotification.is_read = false;\n    //     newCustomerNotification.created_by_id = UserId;\n    //     newCustomerNotification.created_on = new Date();\n\n    //     await notification.insert(newCustomerNotification);\n\n\n    //     this._AuditLogService.AuditEmitEvent({\n    //         PerformedType: bookings.name,\n    //         ActionType: LogActionEnum.Update,\n    //         PrimaryId: [UpdateData.id],\n    //         UserIp: UserIp\n    //     });\n\n    //     return UpdateData;\n    // }\n\n    // Booking Service\n\n    async Insert(BookingData: BookingModel, UserId: string, UserIp: string) {\n        let BookingNumber = await this._DataSource.query(`\n        SELECT b.booking_number \n        FROM \\`bookings\\` AS b \n        ORDER BY CAST(REGEXP_REPLACE(b.booking_number, '[^0-9]', '') AS UNSIGNED) DESC\n    `);\n\n        if (BookingNumber[0]?.booking_number) {\n            BookingNumber[0].booking_number = this._CommonService.AutoGenerateNumber(BookingNumber[0].booking_number);\n        } else {\n            BookingNumber[0] = { booking_number: \"BK-00001\" };\n        }\n\n        const _BookingData = new bookings();\n        _BookingData.booking_number = BookingNumber[0].booking_number;\n        _BookingData.order_id = BookingData.order_id;\n        _BookingData.vendor_id = BookingData.vendor_id;\n        _BookingData.customer_id = BookingData.customer_id;\n        _BookingData.quote_id = BookingData.quote_id;\n        _BookingData.amount = BookingData.amount;\n        _BookingData.booking_status = BookingStatusEnum.CREATED;\n        _BookingData.driver_id = BookingData.driver_id;\n        _BookingData.vehicle_number = BookingData.vehicle_number;\n        _BookingData.created_by_id = UserId;\n        _BookingData.created_on = new Date();\n        await bookings.insert(_BookingData);\n\n\n        // Vendor Notification\n        const newVendorNotification = new notification();\n        newVendorNotification.title = 'New Booking Created';\n        newVendorNotification.message = `Booking ${_BookingData.booking_number} has been successfully created and assigned to your account.`;\n        newVendorNotification.user_id = _BookingData.vendor_id;\n        newVendorNotification.user_type = 'Vendor';\n        newVendorNotification.route_module = 'bookings';\n        newVendorNotification.route_id = _BookingData.id;\n        newVendorNotification.is_read = false;\n        newVendorNotification.created_by_id = UserId;\n        newVendorNotification.created_on = new Date();\n        await notification.insert(newVendorNotification);\n\n        // Customer Notification\n        const newCustomerNotification = new notification();\n        newCustomerNotification.title = 'New Booking Created';\n        newCustomerNotification.message = `Your booking ${_BookingData.booking_number} has been successfully created.`;\n        newCustomerNotification.user_id = _BookingData.customer_id;\n        newCustomerNotification.user_type = 'Customer';\n        newCustomerNotification.route_module = 'bookings';\n        newCustomerNotification.route_id = _BookingData.id;\n        newCustomerNotification.is_read = false;\n        newCustomerNotification.created_by_id = UserId;\n        newCustomerNotification.created_on = new Date();\n        await notification.insert(newCustomerNotification);\n\n        // Audit log\n        this._AuditLogService.AuditEmitEvent({\n            PerformedType: bookings.name,\n            ActionType: LogActionEnum.Insert,\n            PrimaryId: [_BookingData.id],\n            UserIp: UserIp\n        });\n\n        return _BookingData;\n    }\n\n    // Booking Service Update Method\n    async Update(Id: string, BookingData: BookingModel, UserId: string, UserIp: string) {\n        const UpdateData = await bookings.findOne({ where: { id: Id } });\n        if (!UpdateData) throw new Error(ResponseEnum.NotFound);\n\n        const oldStatus = UpdateData.booking_status;\n        const oldDriverId = UpdateData.driver_id;\n\n        UpdateData.order_id = BookingData.order_id;\n        UpdateData.vendor_id = BookingData.vendor_id;\n        UpdateData.customer_id = BookingData.customer_id;\n        UpdateData.quote_id = BookingData.quote_id;\n        UpdateData.amount = BookingData.amount;\n        UpdateData.booking_status = BookingData.booking_status;\n        UpdateData.driver_id = BookingData.driver_id;\n        UpdateData.vehicle_number = BookingData.vehicle_number;\n        UpdateData.updated_by_id = UserId;\n        UpdateData.updated_on = new Date();\n\n        await bookings.update(Id, UpdateData);\n\n        // If status changed to Confirmed and driver is assigned\n        if (oldStatus !== BookingStatusEnum.CONFIRMED &&\n            BookingData.booking_status === BookingStatusEnum.CONFIRMED &&\n            BookingData.driver_id) {\n\n            // Update order status\n            await this._DataSource.query(`\n            UPDATE \\`order\\` \n            SET order_status = ? \n            WHERE id = ?\n        `, [OrderStatusEnum.Assigned, UpdateData.order_id]);\n\n            // Create or update delivery entry\n            const existingDelivery = await delivery.findOne({\n                where: { booking_id: UpdateData.id }\n            });\n\n            if (existingDelivery) {\n                // Update existing delivery\n                await delivery.update(existingDelivery.id, {\n                    driver_id: BookingData.driver_id,\n                    delivery_status: DeliveryStatusEnum.Assigned,\n                    updated_by_id: UserId,\n                    updated_on: new Date()\n                });\n            } else {\n                // Create new delivery entry\n                await delivery.insert({\n                    order_id: BookingData.order_id,\n                    booking_id: BookingData.id,\n                    driver_id: BookingData.driver_id,\n                    assigned_time: new Date(),\n                    delivery_status: DeliveryStatusEnum.Assigned,\n                    created_by_id: UserId,\n                    created_on: new Date()\n                });\n            }\n\n            // Notify driver\n            const newDriverNotification = new notification();\n            newDriverNotification.title = 'New Booking Assignment';\n            newDriverNotification.message = `You have been assigned to booking ${BookingData.booking_number}. Please check the details.`;\n            newDriverNotification.user_id = BookingData.driver_id;\n            newDriverNotification.user_type = 'Driver';\n            newDriverNotification.route_module = 'bookings';\n            newDriverNotification.route_id = BookingData.id;\n            newDriverNotification.is_read = false;\n            newDriverNotification.created_by_id = UserId;\n            newDriverNotification.created_on = new Date();\n            await notification.insert(newDriverNotification);\n        }\n\n        // If driver changed, update delivery and notify new driver\n        if (oldDriverId !== BookingData.driver_id && BookingData.driver_id) {\n            // Update delivery with new driver\n            await this._DataSource.getRepository(delivery).update(\n                { booking_id: UpdateData.id },\n                {\n                    driver_id: BookingData.driver_id,\n                    updated_by_id: UserId,\n                    updated_on: new Date()\n                }\n            );\n\n            // Notify new driver\n            const newDriverNotification = new notification();\n            newDriverNotification.title = 'Booking Assignment Updated';\n            newDriverNotification.message = `You have been assigned to booking ${BookingData.booking_number}. Please check the details.`;\n            newDriverNotification.user_id = BookingData.driver_id;\n            newDriverNotification.user_type = 'Driver';\n            newDriverNotification.route_module = 'bookings';\n            newDriverNotification.route_id = BookingData.id;\n            newDriverNotification.is_read = false;\n            newDriverNotification.created_by_id = UserId;\n            newDriverNotification.created_on = new Date();\n            await notification.insert(newDriverNotification);\n        }\n\n        // Vendor Notification\n        const newVendorNotification = new notification();\n        newVendorNotification.title = 'Booking Details Updated';\n        newVendorNotification.message = `Booking ${UpdateData.booking_number} details have been updated.`;\n        newVendorNotification.user_id = UpdateData.vendor_id;\n        newVendorNotification.user_type = 'Vendor';\n        newVendorNotification.route_module = 'bookings';\n        newVendorNotification.route_id = UpdateData.id;\n        newVendorNotification.is_read = false;\n        newVendorNotification.created_by_id = UserId;\n        newVendorNotification.created_on = new Date();\n        await notification.insert(newVendorNotification);\n\n        // Customer Notification\n        const newCustomerNotification = new notification();\n        newCustomerNotification.title = 'Booking Details Updated';\n        newCustomerNotification.message = `Your booking ${UpdateData.booking_number} details have been updated.`;\n        newCustomerNotification.user_id = UpdateData.customer_id;\n        newCustomerNotification.user_type = 'Customer';\n        newCustomerNotification.route_module = 'bookings';\n        newCustomerNotification.route_id = UpdateData.id;\n        newCustomerNotification.is_read = false;\n        newCustomerNotification.created_by_id = UserId;\n        newCustomerNotification.created_on = new Date();\n        await notification.insert(newCustomerNotification);\n\n        // Audit log\n        this._AuditLogService.AuditEmitEvent({\n            PerformedType: bookings.name,\n            ActionType: LogActionEnum.Update,\n            PrimaryId: [UpdateData.id],\n            UserIp: UserIp\n        });\n\n        return UpdateData;\n    }\n\n\n    async Delete(Id: string, UserIp: string) {\n        const Data = await bookings.findOne({ where: { id: Id } });\n        if (!Data) throw new Error(ResponseEnum.NotFound);\n\n        await Data.remove();\n        this._AuditLogService.AuditEmitEvent({\n            PerformedType: bookings.name,\n            ActionType: LogActionEnum.Delete,\n            PrimaryId: [Data.id],\n            UserIp: UserIp\n        });\n\n        return true;\n    }\n}\n"],"names":["BookingService","GetAll","bookings","find","relations","GetById","Id","data","findOne","where","id","Error","ResponseEnum","NotFound","Insert","BookingData","UserId","UserIp","BookingNumber","_DataSource","query","booking_number","_CommonService","AutoGenerateNumber","_BookingData","order_id","vendor_id","customer_id","quote_id","amount","booking_status","BookingStatusEnum","CREATED","driver_id","vehicle_number","created_by_id","created_on","Date","insert","newVendorNotification","notification","title","message","user_id","user_type","route_module","route_id","is_read","newCustomerNotification","_AuditLogService","AuditEmitEvent","PerformedType","name","ActionType","LogActionEnum","PrimaryId","Update","UpdateData","oldStatus","oldDriverId","updated_by_id","updated_on","update","CONFIRMED","OrderStatusEnum","Assigned","existingDelivery","delivery","booking_id","delivery_status","DeliveryStatusEnum","assigned_time","newDriverNotification","getRepository","Delete","Data","remove"],"mappings":"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"}