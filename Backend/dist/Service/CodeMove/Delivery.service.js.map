{"version":3,"sources":["../../../src/Service/CodeMove/Delivery.service.ts"],"sourcesContent":["import { Injectable } from \"@nestjs/common\";\nimport { ResponseEnum } from \"@Root/Helper/Enum/ResponseEnum\";\nimport { LogActionEnum } from \"@Root/Helper/Enum/AuditLogEnum\";\nimport { AuditLogService } from \"../Admin/AuditLog.service\";\nimport { delivery } from \"@Root/Database/Table/CodeMove/delivery\";\nimport { DeliveryModel } from \"@Model/CodeMove/Delivery.model\";\nimport { DeliveryStatusEnum } from \"@Root/Helper/Enum/DeliveryStatusEnum\";\nimport { OrderStatusEnum } from \"@Root/Helper/Enum/OrderStatusEnum\";\nimport { DataSource } from \"typeorm\";\nimport { bookings } from \"@Root/Database/Table/CodeMove/bookings\";\nimport { BookingStatusEnum } from \"@Root/Helper/Enum/BookingStatusEnum\";\n\n@Injectable()\nexport class DeliveryService {\n    constructor(private _AuditLogService: AuditLogService, private _DataSource: DataSource) { }\n\n    async GetAll() {\n        return await delivery.find();\n    }\n\n    async GetById(DeliveryId: string) {\n        const DeliveryData = await delivery.findOne({ where: { id: DeliveryId } });\n        if (!DeliveryData) throw new Error(ResponseEnum.NotFound);\n        return DeliveryData;\n    }\n\n    async Insert(DeliveryData: DeliveryModel, UserId: string, UserIp: string) {\n        const _DeliveryData = new delivery();\n        _DeliveryData.order_id = DeliveryData.order_id;\n        _DeliveryData.driver_id = DeliveryData.driver_id;\n        _DeliveryData.booking_id = DeliveryData.booking_id; // Added missing booking_id\n        _DeliveryData.delivery_status = DeliveryData.delivery_status;\n        _DeliveryData.assigned_time = DeliveryData.assigned_time;\n        // Set timestamps based on status\n        if (DeliveryData.delivery_status === DeliveryStatusEnum.Started) {\n            _DeliveryData.start_time = new Date();\n        } else if (DeliveryData.delivery_status === DeliveryStatusEnum.Delivered) {\n            _DeliveryData.start_time = DeliveryData.start_time || new Date();\n            _DeliveryData.end_time = new Date();\n        } else {\n            _DeliveryData.start_time = DeliveryData.start_time;\n            _DeliveryData.end_time = DeliveryData.end_time;\n        }\n\n        _DeliveryData.proof_image = DeliveryData.proof_image;\n        _DeliveryData.signature = DeliveryData.signature;\n        _DeliveryData.created_by_id = UserId;\n        _DeliveryData.created_on = new Date();\n\n        await delivery.insert(_DeliveryData);\n\n        // If delivery status is Delivered, update order and booking status\n        if (DeliveryData.delivery_status === DeliveryStatusEnum.Delivered) {\n            await this._DataSource.query(`\n                UPDATE \\`order\\` \n                SET order_status = ? \n                WHERE id = ?\n            `, [OrderStatusEnum.Delivered, DeliveryData.order_id]);\n\n            await this._DataSource.query(`\n                UPDATE bookings\n                SET booking_status = ? \n                WHERE id = ?\n            `, [BookingStatusEnum.Completed, DeliveryData.booking_id]);\n        }\n\n        this._AuditLogService.AuditEmitEvent({\n            PerformedType: delivery.name,\n            ActionType: LogActionEnum.Insert,\n            PrimaryId: [_DeliveryData.id],\n            UserIp: UserIp\n        });\n\n        return _DeliveryData;\n    }\n\n    async Update(Id: string, DeliveryData: DeliveryModel, UserId: string, UserIp: string) {\n        const DeliveryUpdateData = await delivery.findOne({ where: { id: Id } });\n        if (!DeliveryUpdateData) throw new Error(ResponseEnum.NotFound);\n\n        const oldStatus = DeliveryUpdateData.delivery_status;\n        DeliveryUpdateData.order_id = DeliveryData.order_id;\n        DeliveryUpdateData.driver_id = DeliveryData.driver_id;\n        DeliveryUpdateData.booking_id = DeliveryData.booking_id; // Added missing booking_id\n        DeliveryUpdateData.delivery_status = DeliveryData.delivery_status;\n        DeliveryUpdateData.assigned_time = DeliveryData.assigned_time;\n\n\n        // Update timestamps based on status change\n        if (oldStatus !== DeliveryData.delivery_status) {\n            if (DeliveryData.delivery_status === DeliveryStatusEnum.Started && !DeliveryUpdateData.start_time) {\n                DeliveryUpdateData.start_time = new Date();\n            } else if (DeliveryData.delivery_status === DeliveryStatusEnum.InTransit) {\n                DeliveryUpdateData.in_transit_time = new Date();\n            } else if (DeliveryData.delivery_status === DeliveryStatusEnum.Delivered) {\n                DeliveryUpdateData.end_time = new Date();\n            }\n        } else {\n            // If status didn't change, use provided values\n            DeliveryUpdateData.start_time = DeliveryData.start_time;\n            DeliveryUpdateData.end_time = DeliveryData.end_time;\n        }\n\n        DeliveryUpdateData.proof_image = DeliveryData.proof_image;\n        DeliveryUpdateData.signature = DeliveryData.signature;\n        DeliveryUpdateData.updated_by_id = UserId;\n        DeliveryUpdateData.updated_on = new Date();\n\n        await delivery.update(Id, DeliveryUpdateData);\n\n        // If status changed to Delivered, update order and booking status\n        if (oldStatus !== DeliveryStatusEnum.Delivered && DeliveryData.delivery_status === DeliveryStatusEnum.Delivered) {\n            await this._DataSource.query(`\n                UPDATE \\`order\\` \n                SET order_status = ? \n                WHERE id = ?\n            `, [OrderStatusEnum.Delivered, DeliveryUpdateData.order_id]);\n\n            await this._DataSource.query(`\n                UPDATE bookings\n                SET booking_status = ? \n                WHERE id = ?\n            `, [BookingStatusEnum.Completed, DeliveryUpdateData.booking_id]);\n        }\n\n        this._AuditLogService.AuditEmitEvent({\n            PerformedType: delivery.name,\n            ActionType: LogActionEnum.Update,\n            PrimaryId: [DeliveryUpdateData.id],\n            UserIp: UserIp\n        });\n\n        return DeliveryUpdateData;\n    }\n\n    async Delete(Id: string, UserIp: string) {\n        const DeliveryData = await delivery.findOne({ where: { id: Id } });\n        if (!DeliveryData) throw new Error(ResponseEnum.NotFound);\n\n        await DeliveryData.remove();\n        this._AuditLogService.AuditEmitEvent({\n            PerformedType: delivery.name,\n            ActionType: LogActionEnum.Delete,\n            PrimaryId: [DeliveryData.id],\n            UserIp: UserIp\n        });\n\n        return true;\n    }\n}\n"],"names":["DeliveryService","GetAll","delivery","find","GetById","DeliveryId","DeliveryData","findOne","where","id","Error","ResponseEnum","NotFound","Insert","UserId","UserIp","_DeliveryData","order_id","driver_id","booking_id","delivery_status","assigned_time","DeliveryStatusEnum","Started","start_time","Date","Delivered","end_time","proof_image","signature","created_by_id","created_on","insert","_DataSource","query","OrderStatusEnum","BookingStatusEnum","Completed","_AuditLogService","AuditEmitEvent","PerformedType","name","ActionType","LogActionEnum","PrimaryId","Update","Id","DeliveryUpdateData","oldStatus","InTransit","in_transit_time","updated_by_id","updated_on","update","Delete","remove"],"mappings":";;;;+BAaaA;;;eAAAA;;;wBAbc;8BACE;8BACC;iCACE;0BACP;oCAEU;iCACH;yBACL;mCAEO;;;;;;;;;;AAG3B,IAAA,AAAMA,kBAAN,MAAMA;IAGT,MAAMC,SAAS;QACX,OAAO,MAAMC,kBAAQ,CAACC,IAAI;IAC9B;IAEA,MAAMC,QAAQC,UAAkB,EAAE;QAC9B,MAAMC,eAAe,MAAMJ,kBAAQ,CAACK,OAAO,CAAC;YAAEC,OAAO;gBAAEC,IAAIJ;YAAW;QAAE;QACxE,IAAI,CAACC,cAAc,MAAM,IAAII,MAAMC,0BAAY,CAACC,QAAQ;QACxD,OAAON;IACX;IAEA,MAAMO,OAAOP,YAA2B,EAAEQ,MAAc,EAAEC,MAAc,EAAE;QACtE,MAAMC,gBAAgB,IAAId,kBAAQ;QAClCc,cAAcC,QAAQ,GAAGX,aAAaW,QAAQ;QAC9CD,cAAcE,SAAS,GAAGZ,aAAaY,SAAS;QAChDF,cAAcG,UAAU,GAAGb,aAAaa,UAAU,EAAE,2BAA2B;QAC/EH,cAAcI,eAAe,GAAGd,aAAac,eAAe;QAC5DJ,cAAcK,aAAa,GAAGf,aAAae,aAAa;QACxD,iCAAiC;QACjC,IAAIf,aAAac,eAAe,KAAKE,sCAAkB,CAACC,OAAO,EAAE;YAC7DP,cAAcQ,UAAU,GAAG,IAAIC;QACnC,OAAO,IAAInB,aAAac,eAAe,KAAKE,sCAAkB,CAACI,SAAS,EAAE;YACtEV,cAAcQ,UAAU,GAAGlB,aAAakB,UAAU,IAAI,IAAIC;YAC1DT,cAAcW,QAAQ,GAAG,IAAIF;QACjC,OAAO;YACHT,cAAcQ,UAAU,GAAGlB,aAAakB,UAAU;YAClDR,cAAcW,QAAQ,GAAGrB,aAAaqB,QAAQ;QAClD;QAEAX,cAAcY,WAAW,GAAGtB,aAAasB,WAAW;QACpDZ,cAAca,SAAS,GAAGvB,aAAauB,SAAS;QAChDb,cAAcc,aAAa,GAAGhB;QAC9BE,cAAce,UAAU,GAAG,IAAIN;QAE/B,MAAMvB,kBAAQ,CAAC8B,MAAM,CAAChB;QAEtB,mEAAmE;QACnE,IAAIV,aAAac,eAAe,KAAKE,sCAAkB,CAACI,SAAS,EAAE;YAC/D,MAAM,IAAI,CAACO,WAAW,CAACC,KAAK,CAAC,CAAC;;;;YAI9B,CAAC,EAAE;gBAACC,gCAAe,CAACT,SAAS;gBAAEpB,aAAaW,QAAQ;aAAC;YAErD,MAAM,IAAI,CAACgB,WAAW,CAACC,KAAK,CAAC,CAAC;;;;YAI9B,CAAC,EAAE;gBAACE,oCAAiB,CAACC,SAAS;gBAAE/B,aAAaa,UAAU;aAAC;QAC7D;QAEA,IAAI,CAACmB,gBAAgB,CAACC,cAAc,CAAC;YACjCC,eAAetC,kBAAQ,CAACuC,IAAI;YAC5BC,YAAYC,2BAAa,CAAC9B,MAAM;YAChC+B,WAAW;gBAAC5B,cAAcP,EAAE;aAAC;YAC7BM,QAAQA;QACZ;QAEA,OAAOC;IACX;IAEA,MAAM6B,OAAOC,EAAU,EAAExC,YAA2B,EAAEQ,MAAc,EAAEC,MAAc,EAAE;QAClF,MAAMgC,qBAAqB,MAAM7C,kBAAQ,CAACK,OAAO,CAAC;YAAEC,OAAO;gBAAEC,IAAIqC;YAAG;QAAE;QACtE,IAAI,CAACC,oBAAoB,MAAM,IAAIrC,MAAMC,0BAAY,CAACC,QAAQ;QAE9D,MAAMoC,YAAYD,mBAAmB3B,eAAe;QACpD2B,mBAAmB9B,QAAQ,GAAGX,aAAaW,QAAQ;QACnD8B,mBAAmB7B,SAAS,GAAGZ,aAAaY,SAAS;QACrD6B,mBAAmB5B,UAAU,GAAGb,aAAaa,UAAU,EAAE,2BAA2B;QACpF4B,mBAAmB3B,eAAe,GAAGd,aAAac,eAAe;QACjE2B,mBAAmB1B,aAAa,GAAGf,aAAae,aAAa;QAG7D,2CAA2C;QAC3C,IAAI2B,cAAc1C,aAAac,eAAe,EAAE;YAC5C,IAAId,aAAac,eAAe,KAAKE,sCAAkB,CAACC,OAAO,IAAI,CAACwB,mBAAmBvB,UAAU,EAAE;gBAC/FuB,mBAAmBvB,UAAU,GAAG,IAAIC;YACxC,OAAO,IAAInB,aAAac,eAAe,KAAKE,sCAAkB,CAAC2B,SAAS,EAAE;gBACtEF,mBAAmBG,eAAe,GAAG,IAAIzB;YAC7C,OAAO,IAAInB,aAAac,eAAe,KAAKE,sCAAkB,CAACI,SAAS,EAAE;gBACtEqB,mBAAmBpB,QAAQ,GAAG,IAAIF;YACtC;QACJ,OAAO;YACH,+CAA+C;YAC/CsB,mBAAmBvB,UAAU,GAAGlB,aAAakB,UAAU;YACvDuB,mBAAmBpB,QAAQ,GAAGrB,aAAaqB,QAAQ;QACvD;QAEAoB,mBAAmBnB,WAAW,GAAGtB,aAAasB,WAAW;QACzDmB,mBAAmBlB,SAAS,GAAGvB,aAAauB,SAAS;QACrDkB,mBAAmBI,aAAa,GAAGrC;QACnCiC,mBAAmBK,UAAU,GAAG,IAAI3B;QAEpC,MAAMvB,kBAAQ,CAACmD,MAAM,CAACP,IAAIC;QAE1B,kEAAkE;QAClE,IAAIC,cAAc1B,sCAAkB,CAACI,SAAS,IAAIpB,aAAac,eAAe,KAAKE,sCAAkB,CAACI,SAAS,EAAE;YAC7G,MAAM,IAAI,CAACO,WAAW,CAACC,KAAK,CAAC,CAAC;;;;YAI9B,CAAC,EAAE;gBAACC,gCAAe,CAACT,SAAS;gBAAEqB,mBAAmB9B,QAAQ;aAAC;YAE3D,MAAM,IAAI,CAACgB,WAAW,CAACC,KAAK,CAAC,CAAC;;;;YAI9B,CAAC,EAAE;gBAACE,oCAAiB,CAACC,SAAS;gBAAEU,mBAAmB5B,UAAU;aAAC;QACnE;QAEA,IAAI,CAACmB,gBAAgB,CAACC,cAAc,CAAC;YACjCC,eAAetC,kBAAQ,CAACuC,IAAI;YAC5BC,YAAYC,2BAAa,CAACE,MAAM;YAChCD,WAAW;gBAACG,mBAAmBtC,EAAE;aAAC;YAClCM,QAAQA;QACZ;QAEA,OAAOgC;IACX;IAEA,MAAMO,OAAOR,EAAU,EAAE/B,MAAc,EAAE;QACrC,MAAMT,eAAe,MAAMJ,kBAAQ,CAACK,OAAO,CAAC;YAAEC,OAAO;gBAAEC,IAAIqC;YAAG;QAAE;QAChE,IAAI,CAACxC,cAAc,MAAM,IAAII,MAAMC,0BAAY,CAACC,QAAQ;QAExD,MAAMN,aAAaiD,MAAM;QACzB,IAAI,CAACjB,gBAAgB,CAACC,cAAc,CAAC;YACjCC,eAAetC,kBAAQ,CAACuC,IAAI;YAC5BC,YAAYC,2BAAa,CAACW,MAAM;YAChCV,WAAW;gBAACtC,aAAaG,EAAE;aAAC;YAC5BM,QAAQA;QACZ;QAEA,OAAO;IACX;IAtIA,YAAY,AAAQuB,gBAAiC,EAAE,AAAQL,WAAuB,CAAE;aAApEK,mBAAAA;aAA2CL,cAAAA;IAA2B;AAuI9F"}