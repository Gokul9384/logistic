{"version":3,"sources":["../../../src/Service/CodeMove/Quote.service.ts"],"sourcesContent":["import { Injectable } from \"@nestjs/common\";\nimport { ResponseEnum } from \"@Root/Helper/Enum/ResponseEnum\";\nimport { LogActionEnum } from \"@Root/Helper/Enum/AuditLogEnum\";\nimport { AuditLogService } from \"../Admin/AuditLog.service\";\nimport { quote } from \"@Root/Database/Table/CodeMove/quote\";\nimport { QuoteModel } from \"@Model/CodeMove/Quote.model\";\nimport { DataSource } from \"typeorm\";\nimport { CommonService } from \"../Common.service\";\nimport { user } from \"@Root/Database/Table/Admin/user\";\nimport { notification } from \"@Root/Database/Table/CodeMove/notification\";\nimport { QuoteStatusEnum } from \"@Root/Helper/Enum/QuoteEnum\";\nimport { requirement } from \"@Root/Database/Table/CodeMove/requirement\";\nimport { OrderStatusEnum } from \"@Root/Helper/Enum/OrderStatusEnum\";\n\n@Injectable()\nexport class QuoteService {\n    constructor(\n        private _AuditLogService: AuditLogService,\n        private _CommonService: CommonService,\n        private _DataSource: DataSource\n    ) { }\n\n    async GetAll() {\n        const data = await quote.find({ relations: [\"requirement\"] })\n        return data;\n    }\n\n    async QuoteDetail() {\n        const data = await this._DataSource.query(`\n    SELECT \n      q.id as quote_id,\n      q.*,\n      r.id as req_id,\n      r.*,\n      o.id as ord_id,\n      o.*,\n      v.company_name as vendor_name\n    FROM\n      quote q\n    LEFT JOIN\n      requirement r ON r.id = q.requirement_id\n    LEFT JOIN \n      \\`order\\` o ON o.id = r.order_id\n    LEFT JOIN\n\t  vendor v ON v.id = r.vendor_id;\n  `);\n\n        return data;\n    }\n\n\n    async GetById(QuoteId: string) {\n        const QuoteData = await quote.findOne({\n            where: { id: QuoteId }\n        });\n        if (!QuoteData) throw new Error(ResponseEnum.NotFound);\n        return QuoteData;\n    }\n\n    // async Insert(QuoteData: QuoteModel, UserId: string, UserIp: string) {\n    //     const AdminData = await user.findOne({ where: { first_name: 'Admin' } });\n\n    //     let QuoteNumber = await this._DataSource.query(\n    //         `SELECT q.quote_number FROM \\`quote\\` AS q ORDER BY CAST(REGEXP_REPLACE(q.quote_number, '[^0-9]', '') AS UNSIGNED) DESC`\n    //     );\n\n    //     if (QuoteNumber[0]?.quote_number) {\n    //         QuoteNumber[0].quote_number = this._CommonService.AutoGenerateNumber(QuoteNumber[0].quote_number);\n    //     } else {\n    //         QuoteNumber[0] = { quote_number: \"QT-00001\" };\n    //     }\n\n    //     const _QuoteData = new quote();\n    //     _QuoteData.requirement_id = QuoteData.requirement_id;\n    //     _QuoteData.quote_number = QuoteNumber[0].quote_number;\n    //     _QuoteData.quote_amount = QuoteData.quote_amount;\n    //     _QuoteData.quote_status = QuoteData.quote_status;\n    //     _QuoteData.created_by_id = UserId;\n    //     _QuoteData.created_on = new Date();\n\n    //     await quote.insert(_QuoteData);\n\n    //     // ðŸ”” Notification\n    //     const newNotification = new notification();\n    //     newNotification.title = 'New Quote Created';\n    //     newNotification.message = `Quote ${_QuoteData.quote_number} has been placed.`;\n    //     newNotification.user_id = AdminData.id;\n    //     newNotification.user_type = 'Admin';\n    //     newNotification.route_id = _QuoteData.id;\n    //     newNotification.route_module = \"quotes\";\n    //     newNotification.is_read = false;\n    //     newNotification.created_by_id = UserId;\n    //     newNotification.created_on = new Date();\n\n    //     await notification.insert(newNotification);\n\n    //     // ðŸ§¾ Audit log\n    //     this._AuditLogService.AuditEmitEvent({\n    //         PerformedType: quote.name,\n    //         ActionType: LogActionEnum.Insert,\n    //         PrimaryId: [_QuoteData.id],\n    //         UserIp: UserIp\n    //     });\n\n    //     return _QuoteData;\n    // }\n\n    // async Update(Id: string, QuoteData: QuoteModel, UserId: string, UserIp: string) {\n    //     const QuoteUpdateData = await quote.findOne({ where: { id: Id } });\n    //     if (!QuoteUpdateData) throw new Error(ResponseEnum.NotFound);\n\n    //     const AdminData = await user.findOne({ where: { first_name: 'Admin' } });\n\n    //     QuoteUpdateData.requirement_id = QuoteData.requirement_id;\n    //     QuoteUpdateData.quote_amount = QuoteData.quote_amount;\n    //     QuoteUpdateData.quote_status = QuoteData.quote_status;\n    //     QuoteUpdateData.updated_by_id = UserId;\n    //     QuoteUpdateData.updated_on = new Date();\n\n    //     await quote.update(Id, QuoteUpdateData);\n\n    //     // ðŸ”” Notification\n    //     const newNotification = new notification();\n    //     newNotification.title = 'Quote Updated';\n    //     newNotification.message = `Quote ${QuoteUpdateData.quote_number} has been updated.`;\n    //     newNotification.user_id = AdminData.id;\n    //     newNotification.user_type = 'Admin';\n    //     newNotification.is_read = false;\n    //     newNotification.created_by_id = UserId;\n    //     newNotification.created_on = new Date();\n\n    //     await notification.insert(newNotification);\n\n    //     // ðŸ§¾ Audit log\n    //     this._AuditLogService.AuditEmitEvent({\n    //         PerformedType: quote.name,\n    //         ActionType: LogActionEnum.Update,\n    //         PrimaryId: [QuoteUpdateData.id],\n    //         UserIp: UserIp\n    //     });\n\n    //     return QuoteUpdateData;\n    // }\n\n    // Quote Service\n    async Insert(QuoteData: QuoteModel, UserId: string, UserIp: string) {\n        const AdminData = await user.findOne({ where: { first_name: 'Admin' } });\n        let QuoteNumber = await this._DataSource.query(\n            `SELECT q.quote_number FROM \\`quote\\` AS q ORDER BY CAST(REGEXP_REPLACE(q.quote_number, '[^0-9]', '') AS UNSIGNED) DESC`\n        );\n        if (QuoteNumber[0]?.quote_number) {\n            QuoteNumber[0].quote_number = this._CommonService.AutoGenerateNumber(QuoteNumber[0].quote_number);\n        } else {\n            QuoteNumber[0] = { quote_number: \"QT-00001\" };\n        }\n        const _QuoteData = new quote();\n        _QuoteData.requirement_id = QuoteData.requirement_id;\n        _QuoteData.quote_number = QuoteNumber[0].quote_number;\n        _QuoteData.quote_amount = QuoteData.quote_amount;\n        // Set initial status to Requested when quote is created\n        _QuoteData.quote_status = QuoteStatusEnum.Sent;\n        _QuoteData.created_by_id = UserId;\n        _QuoteData.created_on = new Date();\n        await quote.insert(_QuoteData);\n\n        // ðŸ”” Notification\n        const newNotification = new notification();\n        newNotification.title = 'New Quote Created';\n        newNotification.message = `Quote ${_QuoteData.quote_number} has been placed.`;\n        newNotification.user_id = AdminData.id;\n        newNotification.user_type = 'Admin';\n        newNotification.route_id = _QuoteData.id;\n        newNotification.route_module = \"quotes\";\n        newNotification.is_read = false;\n        newNotification.created_by_id = UserId;\n        newNotification.created_on = new Date();\n        await notification.insert(newNotification);\n\n        // ðŸ§¾ Audit log\n        this._AuditLogService.AuditEmitEvent({\n            PerformedType: quote.name,\n            ActionType: LogActionEnum.Insert,\n            PrimaryId: [_QuoteData.id],\n            UserIp: UserIp\n        });\n        return _QuoteData;\n    }\n\n    async Update(Id: string, QuoteData: QuoteModel, UserId: string, UserIp: string) {\n        const QuoteUpdateData = await quote.findOne({ where: { id: Id } });\n        if (!QuoteUpdateData) throw new Error(ResponseEnum.NotFound);\n        const AdminData = await user.findOne({ where: { first_name: 'Admin' } });\n\n        const oldStatus = QuoteUpdateData.quote_status;\n        QuoteUpdateData.requirement_id = QuoteData.requirement_id;\n        QuoteUpdateData.quote_amount = QuoteData.quote_amount;\n        QuoteUpdateData.quote_status = QuoteData.quote_status;\n        QuoteUpdateData.updated_by_id = UserId;\n        QuoteUpdateData.updated_on = new Date();\n        await quote.update(Id, QuoteUpdateData);\n\n        // // If status changed to Accepted, update order status to Confirmed\n        // if (oldStatus !== QuoteStatusEnum.Accepted && QuoteData.quote_status === QuoteStatusEnum.Accepted) {\n        //     // Get order_id from requirement\n        //     const requirementData = await requirement.findOne({ where: { id: QuoteUpdateData.requirement_id } });\n        //     if (requirementData) {\n        //         await this._DataSource.query(`\n        //         UPDATE \\`order\\` \n        //         SET order_status = ? \n        //         WHERE id = ?\n        //     `, [OrderStatusEnum.Quoted, requirementData.order_id]);\n        //     }\n        // }\n\n        // ðŸ”” Notification\n        const newNotification = new notification();\n        newNotification.title = 'Quote Updated';\n        newNotification.message = `Quote ${QuoteUpdateData.quote_number} has been updated.`;\n        newNotification.user_id = AdminData.id;\n        newNotification.user_type = 'Admin';\n        newNotification.route_id = QuoteUpdateData.id;\n        newNotification.route_module = \"quotes\";\n        newNotification.is_read = false;\n        newNotification.created_by_id = UserId;\n        newNotification.created_on = new Date();\n        await notification.insert(newNotification);\n\n        // ðŸ§¾ Audit log\n        this._AuditLogService.AuditEmitEvent({\n            PerformedType: quote.name,\n            ActionType: LogActionEnum.Update,\n            PrimaryId: [QuoteUpdateData.id],\n            UserIp: UserIp\n        });\n        return QuoteUpdateData;\n    }\n\n    async Delete(Id: string, UserIp: string) {\n        const QuoteData = await quote.findOne({ where: { id: Id } });\n        if (!QuoteData) throw new Error(ResponseEnum.NotFound);\n\n        await QuoteData.remove();\n        this._AuditLogService.AuditEmitEvent({\n            PerformedType: quote.name,\n            ActionType: LogActionEnum.Delete,\n            PrimaryId: [QuoteData.id],\n            UserIp: UserIp\n        });\n\n        return true;\n    }\n}\n"],"names":["QuoteService","GetAll","data","quote","find","relations","QuoteDetail","_DataSource","query","GetById","QuoteId","QuoteData","findOne","where","id","Error","ResponseEnum","NotFound","Insert","UserId","UserIp","AdminData","user","first_name","QuoteNumber","quote_number","_CommonService","AutoGenerateNumber","_QuoteData","requirement_id","quote_amount","quote_status","QuoteStatusEnum","Sent","created_by_id","created_on","Date","insert","newNotification","notification","title","message","user_id","user_type","route_id","route_module","is_read","_AuditLogService","AuditEmitEvent","PerformedType","name","ActionType","LogActionEnum","PrimaryId","Update","Id","QuoteUpdateData","oldStatus","updated_by_id","updated_on","update","Delete","remove"],"mappings":"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"}