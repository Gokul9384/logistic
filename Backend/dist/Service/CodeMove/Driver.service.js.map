{"version":3,"sources":["../../../src/Service/CodeMove/Driver.service.ts"],"sourcesContent":["import { Injectable } from \"@nestjs/common\";\nimport { ResponseEnum } from \"@Root/Helper/Enum/ResponseEnum\";\nimport { LogActionEnum } from \"@Root/Helper/Enum/AuditLogEnum\";\nimport { AuditLogService } from \"../Admin/AuditLog.service\";\nimport { driver } from \"@Root/Database/Table/CodeMove/driver\";\nimport { DriverModel } from \"@Model/CodeMove/Driver.model\";\nimport { user } from \"@Root/Database/Table/Admin/user\";\nimport { user_role } from \"@Root/Database/Table/Admin/user_role\";\nimport { EncryptionService } from \"../Encryption.service\";\n\n@Injectable()\nexport class DriverService {\n    constructor(private _AuditLogService: AuditLogService, private _EncryptionService: EncryptionService) { }\n\n    async GetAll() {\n        return await driver.find({ relations: ['vendor'] });\n    }\n\n    async GetById(DriverId: string) {\n        const DriverData = await driver.findOne({ where: { id: DriverId } });\n        if (!DriverData) throw new Error(ResponseEnum.NotFound);\n        return DriverData;\n    }\n\n    // async Insert(DriverData: DriverModel, UserId: string, UserIp: string) {\n\n    //     const UserRoleData = await user_role.findOne({ where: { name: \"Driver\" } });\n    //     if (!UserRoleData) {\n    //         throw new Error(ResponseEnum.NotFound);\n    //     }\n    //     const _userData = new user();\n    //     _userData.user_role_id = UserRoleData.id;\n    //     _userData.first_name = DriverData.name;\n    //     _userData.email = DriverData.email;\n    //     _userData.password = this._EncryptionService.Encrypt(DriverData.password);\n    //     _userData.mobile = DriverData.mobile;\n    //     _userData.created_by_id = UserId;\n    //     _userData.created_on = new Date();\n    //     await user.insert(_userData);\n\n    //     const _DriverData = new driver();\n    //     _DriverData.user_id = _userData.id;\n    //     _DriverData.vendor_id = DriverData.vendor_id;\n    //     _DriverData.email = DriverData.email;\n    //     _DriverData.name = DriverData.name;\n    //     _DriverData.mobile = DriverData.mobile;\n    //     _DriverData.license_number = DriverData.license_number;\n    //     _DriverData.vehicle_number = DriverData.vehicle_number;\n    //     _DriverData.created_by_id = UserId;\n    //     _DriverData.created_on = new Date();\n\n    //     await driver.insert(_DriverData);\n    //     this._AuditLogService.AuditEmitEvent({\n    //         PerformedType: driver.name,\n    //         ActionType: LogActionEnum.Insert,\n    //         PrimaryId: [_DriverData.id],\n    //         UserIp: UserIp\n    //     });\n\n    //     return _DriverData;\n    // }\n\n    // async Update(Id: string, DriverData: DriverModel, UserId: string, UserIp: string) {\n    //     const DriverUpdateData = await driver.findOne({ where: { id: Id } });\n    //     if (!DriverUpdateData) throw new Error(ResponseEnum.NotFound);\n\n    //     DriverUpdateData.vendor_id = DriverData.vendor_id;\n    //     DriverUpdateData.name = DriverData.name;\n    //     DriverUpdateData.email = DriverData.email;\n    //     DriverUpdateData.mobile = DriverData.mobile;\n    //     DriverUpdateData.license_number = DriverData.license_number;\n    //     DriverUpdateData.vehicle_number = DriverData.vehicle_number;\n    //     DriverUpdateData.updated_by_id = UserId;\n    //     DriverUpdateData.updated_on = new Date();\n\n    //     await driver.update(Id, DriverUpdateData);\n    //     this._AuditLogService.AuditEmitEvent({\n    //         PerformedType: driver.name,\n    //         ActionType: LogActionEnum.Update,\n    //         PrimaryId: [DriverUpdateData.id],\n    //         UserIp: UserIp\n    //     });\n\n    //     return DriverUpdateData;\n    // }\n\n    // Driver Service (no status changes needed)\n    async Insert(DriverData: DriverModel, UserId: string, UserIp: string) {\n        const UserRoleData = await user_role.findOne({ where: { name: \"Driver\" } });\n        if (!UserRoleData) {\n            throw new Error(ResponseEnum.NotFound);\n        }\n        const _userData = new user();\n        _userData.user_role_id = UserRoleData.id;\n        _userData.first_name = DriverData.name;\n        _userData.email = DriverData.email;\n        _userData.password = this._EncryptionService.Encrypt(DriverData.password);\n        _userData.mobile = DriverData.mobile;\n        _userData.created_by_id = UserId;\n        _userData.created_on = new Date();\n        await user.insert(_userData);\n        const _DriverData = new driver();\n        _DriverData.user_id = _userData.id;\n        _DriverData.vendor_id = DriverData.vendor_id;\n        _DriverData.email = DriverData.email;\n        _DriverData.name = DriverData.name;\n        _DriverData.mobile = DriverData.mobile;\n        _DriverData.license_number = DriverData.license_number;\n        _DriverData.vehicle_number = DriverData.vehicle_number;\n        _DriverData.created_by_id = UserId;\n        _DriverData.created_on = new Date();\n        await driver.insert(_DriverData);\n        this._AuditLogService.AuditEmitEvent({\n            PerformedType: driver.name,\n            ActionType: LogActionEnum.Insert,\n            PrimaryId: [_DriverData.id],\n            UserIp: UserIp\n        });\n        return _DriverData;\n    }\n\n    async Update(Id: string, DriverData: DriverModel, UserId: string, UserIp: string) {\n        const DriverUpdateData = await driver.findOne({ where: { id: Id } });\n        if (!DriverUpdateData) throw new Error(ResponseEnum.NotFound);\n        DriverUpdateData.vendor_id = DriverData.vendor_id;\n        DriverUpdateData.name = DriverData.name;\n        DriverUpdateData.email = DriverData.email;\n        DriverUpdateData.mobile = DriverData.mobile;\n        DriverUpdateData.license_number = DriverData.license_number;\n        DriverUpdateData.vehicle_number = DriverData.vehicle_number;\n        DriverUpdateData.updated_by_id = UserId;\n        DriverUpdateData.updated_on = new Date();\n        await driver.update(Id, DriverUpdateData);\n        this._AuditLogService.AuditEmitEvent({\n            PerformedType: driver.name,\n            ActionType: LogActionEnum.Update,\n            PrimaryId: [DriverUpdateData.id],\n            UserIp: UserIp\n        });\n        return DriverUpdateData;\n    }\n\n    async Delete(Id: string, UserIp: string) {\n        const DriverData = await driver.findOne({ where: { id: Id } });\n        if (!DriverData) throw new Error(ResponseEnum.NotFound);\n\n        await DriverData.remove();\n        this._AuditLogService.AuditEmitEvent({\n            PerformedType: driver.name,\n            ActionType: LogActionEnum.Delete,\n            PrimaryId: [DriverData.id],\n            UserIp: UserIp\n        });\n\n        return true;\n    }\n}\n"],"names":["DriverService","GetAll","driver","find","relations","GetById","DriverId","DriverData","findOne","where","id","Error","ResponseEnum","NotFound","Insert","UserId","UserIp","UserRoleData","user_role","name","_userData","user","user_role_id","first_name","email","password","_EncryptionService","Encrypt","mobile","created_by_id","created_on","Date","insert","_DriverData","user_id","vendor_id","license_number","vehicle_number","_AuditLogService","AuditEmitEvent","PerformedType","ActionType","LogActionEnum","PrimaryId","Update","Id","DriverUpdateData","updated_by_id","updated_on","update","Delete","remove"],"mappings":"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"}