{"version":3,"sources":["../../../src/Service/CodeMove/Order.service.ts"],"sourcesContent":["import { Injectable } from \"@nestjs/common\";\nimport { ResponseEnum } from \"@Root/Helper/Enum/ResponseEnum\";\nimport { LogActionEnum } from \"@Root/Helper/Enum/AuditLogEnum\";\nimport { AuditLogService } from \"../Admin/AuditLog.service\";\nimport { order } from \"@Root/Database/Table/CodeMove/order\";\nimport { OrderModel } from \"@Model/CodeMove/Order.model\";\nimport { CommonService } from \"../Common.service\";\nimport { DataSource } from \"typeorm\";\nimport { notification } from \"@Root/Database/Table/CodeMove/notification\";\nimport { user } from \"@Root/Database/Table/Admin/user\";\nimport { OrderStatusEnum } from \"@Root/Helper/Enum/OrderStatusEnum\";\n\n@Injectable()\nexport class OrderService {\n    constructor(\n        private _AuditLogService: AuditLogService,\n        private _CommonService: CommonService,\n        private _DataSource: DataSource\n    ) { }\n\n    async GetAll() {\n        return await order.find({ relations: [\"customer\"] });\n    }\n\n    async GetById(OrderId: string) {\n        const OrderData = await order.findOne({ where: { id: OrderId } });\n        if (!OrderData) throw new Error(ResponseEnum.NotFound);\n        return OrderData;\n    }\n\n    // async Insert(OrderData: OrderModel, UserId: string, UserIp: string) {\n    //     const AdminData = await user.findOne({ where: { first_name: 'Admin' } });\n\n    //     let OrderNumber = await this._DataSource.query(`SELECT o.order_number FROM \\`order\\` AS o ORDER BY CAST(REGEXP_REPLACE(o.order_number, '[^0-9]', '') AS UNSIGNED) DESC`);\n    //     if (OrderNumber[0]?.order_number) {\n    //         OrderNumber[0].order_number = this._CommonService.AutoGenerateNumber(OrderNumber[0].order_number);\n    //     }\n    //     else {\n    //         OrderNumber[0] = {};\n    //         OrderNumber[0]['order_number'] = \"OR-00001\";\n    //     }\n    //     const _OrderData = new order();\n    //     _OrderData.order_number = OrderNumber[0].order_number;\n    //     _OrderData.customer_id = OrderData.customer_id;\n    //     _OrderData.material = OrderData.material;\n    //     _OrderData.source_location = OrderData.source_location;\n    //     _OrderData.destination_location = OrderData.destination_location;\n    //     _OrderData.weight = OrderData.weight;\n    //     _OrderData.priority = OrderData.priority;\n    //     _OrderData.expected_date = OrderData.expected_date;\n    //     _OrderData.order_status = OrderData.order_status;\n    //     _OrderData.created_by_id = UserId;\n    //     _OrderData.created_on = new Date();\n\n    //     await order.insert(_OrderData);\n    //     const newNotification = new notification();\n    //     newNotification.title = 'New Order Created';\n    //     newNotification.message = `Order ${_OrderData.order_number} has been placed.`;\n    //     newNotification.user_id = AdminData.id;\n    //     newNotification.user_type = 'Admin';\n    //     newNotification.route_id = _OrderData.id;\n    //     newNotification.route_module = \"orders\";\n    //     newNotification.is_read = false;\n    //     newNotification.created_by_id = UserId;\n    //     newNotification.created_on = new Date();\n\n    //     await notification.insert(newNotification);\n\n    //     this._AuditLogService.AuditEmitEvent({\n    //         PerformedType: order.name,\n    //         ActionType: LogActionEnum.Insert,\n    //         PrimaryId: [_OrderData.id],\n    //         UserIp: UserIp\n    //     });\n\n    //     return _OrderData;\n    // }\n\n    // async Update(Id: string, OrderData: OrderModel, UserId: string, UserIp: string) {\n    //     const OrderUpdateData = await order.findOne({ where: { id: Id } });\n    //     if (!OrderUpdateData) throw new Error(ResponseEnum.NotFound);\n\n    //     const AdminData = await user.findOne({ where: { first_name: 'Admin' } });\n\n    //     OrderUpdateData.customer_id = OrderData.customer_id;\n    //     OrderUpdateData.material = OrderData.material;\n    //     OrderUpdateData.source_location = OrderData.source_location;\n    //     OrderUpdateData.destination_location = OrderData.destination_location;\n    //     OrderUpdateData.weight = OrderData.weight;\n    //     OrderUpdateData.priority = OrderData.priority;\n    //     OrderUpdateData.expected_date = OrderData.expected_date;\n    //     OrderUpdateData.order_status = OrderData.order_status;\n    //     OrderUpdateData.updated_by_id = UserId;\n    //     OrderUpdateData.updated_on = new Date();\n\n    //     await order.update(Id, OrderUpdateData);\n\n    //     //Notification for Update\n    //     const newNotification = new notification();\n    //     newNotification.title = 'Order Updated';\n    //     newNotification.message = `Order ${OrderUpdateData.order_number} has been updated.`;\n    //     newNotification.user_id = AdminData.id;\n    //     newNotification.user_type = 'Admin';\n    //     newNotification.is_read = false;\n    //     newNotification.created_by_id = UserId;\n    //     newNotification.created_on = new Date();\n\n    //     await notification.insert(newNotification);\n\n    //     this._AuditLogService.AuditEmitEvent({\n    //         PerformedType: order.name,\n    //         ActionType: LogActionEnum.Update,\n    //         PrimaryId: [OrderUpdateData.id],\n    //         UserIp: UserIp\n    //     });\n\n    //     return OrderUpdateData;\n    // }\n\n    // Order Service\n    async Insert(OrderData: OrderModel, UserId: string, UserIp: string) {\n        const AdminData = await user.findOne({ where: { first_name: 'Admin' } });\n        let OrderNumber = await this._DataSource.query(`SELECT o.order_number FROM \\`order\\` AS o ORDER BY CAST(REGEXP_REPLACE(o.order_number, '[^0-9]', '') AS UNSIGNED) DESC`);\n        if (OrderNumber[0]?.order_number) {\n            OrderNumber[0].order_number = this._CommonService.AutoGenerateNumber(OrderNumber[0].order_number);\n        }\n        else {\n            OrderNumber[0] = {};\n            OrderNumber[0]['order_number'] = \"OR-00001\";\n        }\n        const _OrderData = new order();\n        _OrderData.order_number = OrderNumber[0].order_number;\n        _OrderData.customer_id = OrderData.customer_id;\n        _OrderData.material = OrderData.material;\n        _OrderData.source_location = OrderData.source_location;\n        _OrderData.destination_location = OrderData.destination_location;\n        _OrderData.weight = OrderData.weight;\n        _OrderData.priority = OrderData.priority;\n        _OrderData.expected_date = OrderData.expected_date;\n        _OrderData.order_date = OrderData.order_date;\n        _OrderData.pickup_date = OrderData.pickup_date;\n        _OrderData.pickup_time = OrderData.pickup_time;\n        // Set initial status to Pending when order is created\n        _OrderData.order_status = OrderStatusEnum.New;\n        _OrderData.created_by_id = UserId;\n        _OrderData.created_on = new Date();\n        await order.insert(_OrderData);\n\n        const newNotification = new notification();\n        newNotification.title = 'New Order Created';\n        newNotification.message = `Order ${_OrderData.order_number} has been placed.`;\n        newNotification.user_id = AdminData.id;\n        newNotification.user_type = 'Admin';\n        newNotification.route_id = _OrderData.id;\n        newNotification.route_module = \"orders\";\n        newNotification.is_read = false;\n        newNotification.created_by_id = UserId;\n        newNotification.created_on = new Date();\n        await notification.insert(newNotification);\n\n        this._AuditLogService.AuditEmitEvent({\n            PerformedType: order.name,\n            ActionType: LogActionEnum.Insert,\n            PrimaryId: [_OrderData.id],\n            UserIp: UserIp\n        });\n        return _OrderData;\n    }\n\n    async Update(Id: string, OrderData: OrderModel, UserId: string, UserIp: string) {\n        const OrderUpdateData = await order.findOne({ where: { id: Id } });\n        if (!OrderUpdateData) throw new Error(ResponseEnum.NotFound);\n        const AdminData = await user.findOne({ where: { first_name: 'Admin' } });\n\n        const oldStatus = OrderUpdateData.order_status;\n        OrderUpdateData.customer_id = OrderData.customer_id;\n        OrderUpdateData.material = OrderData.material;\n        OrderUpdateData.source_location = OrderData.source_location;\n        OrderUpdateData.destination_location = OrderData.destination_location;\n        OrderUpdateData.weight = OrderData.weight;\n        OrderUpdateData.priority = OrderData.priority;\n        OrderUpdateData.expected_date = OrderData.expected_date;\n        OrderUpdateData.order_status = OrderData.order_status;\n        OrderUpdateData.order_date = OrderData.order_date;\n        OrderUpdateData.pickup_date = OrderData.pickup_date;\n        OrderUpdateData.pickup_time = OrderData.pickup_time;\n        OrderUpdateData.updated_by_id = UserId;\n        OrderUpdateData.updated_on = new Date();\n        await order.update(Id, OrderUpdateData);\n\n        //Notification for Update\n        const newNotification = new notification();\n        newNotification.title = 'Order Updated';\n        newNotification.message = `Order ${OrderUpdateData.order_number} has been updated.`;\n        newNotification.user_id = AdminData.id;\n        newNotification.user_type = 'Admin';\n        newNotification.route_id = OrderUpdateData.id;\n        newNotification.route_module = \"orders\";\n        newNotification.is_read = false;\n        newNotification.created_by_id = UserId;\n        newNotification.created_on = new Date();\n        await notification.insert(newNotification);\n\n        this._AuditLogService.AuditEmitEvent({\n            PerformedType: order.name,\n            ActionType: LogActionEnum.Update,\n            PrimaryId: [OrderUpdateData.id],\n            UserIp: UserIp\n        });\n        return OrderUpdateData;\n    }\n\n\n    async Delete(Id: string, UserIp: string) {\n        const OrderData = await order.findOne({ where: { id: Id } });\n        if (!OrderData) throw new Error(ResponseEnum.NotFound);\n\n        await OrderData.remove();\n        this._AuditLogService.AuditEmitEvent({\n            PerformedType: order.name,\n            ActionType: LogActionEnum.Delete,\n            PrimaryId: [OrderData.id],\n            UserIp: UserIp\n        });\n\n        return true;\n    }\n}\n"],"names":["OrderService","GetAll","order","find","relations","GetById","OrderId","OrderData","findOne","where","id","Error","ResponseEnum","NotFound","Insert","UserId","UserIp","AdminData","user","first_name","OrderNumber","_DataSource","query","order_number","_CommonService","AutoGenerateNumber","_OrderData","customer_id","material","source_location","destination_location","weight","priority","expected_date","order_date","pickup_date","pickup_time","order_status","OrderStatusEnum","New","created_by_id","created_on","Date","insert","newNotification","notification","title","message","user_id","user_type","route_id","route_module","is_read","_AuditLogService","AuditEmitEvent","PerformedType","name","ActionType","LogActionEnum","PrimaryId","Update","Id","OrderUpdateData","oldStatus","updated_by_id","updated_on","update","Delete","remove"],"mappings":"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"}