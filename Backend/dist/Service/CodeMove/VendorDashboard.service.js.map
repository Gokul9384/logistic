{"version":3,"sources":["../../../src/Service/CodeMove/VendorDashboard.service.ts"],"sourcesContent":["import { Injectable } from \"@nestjs/common\";\nimport { DataSource } from \"typeorm\";\n\n@Injectable()\nexport class VendorDashboardService {\n    constructor(private dataSource: DataSource) { }\n\n    async getStats(vendorId: string) {\n        const vendorStats = await this.dataSource.query(\n            `\n            SELECT \n                SUM(CASE WHEN r.requirement_status = 'Accepted' THEN 1 ELSE 0 END) AS accepted_requirements,\n                SUM(CASE WHEN q.quote_status = 'Sent' THEN 1 ELSE 0 END) AS pending_quotes,\n                SUM(CASE WHEN b.booking_status = 'Confirmed' THEN 1 ELSE 0 END) AS active_bookings,\n                SUM(CASE WHEN d.delivery_status = 'Assigned' THEN 1 ELSE 0 END) AS pending_deliveries\n            FROM requirement r\n            LEFT JOIN quote q ON q.requirement_id = r.id\n            LEFT JOIN bookings b ON b.quote_id = q.id\n            LEFT JOIN delivery d ON d.order_id = r.order_id\n            WHERE r.vendor_id = ?\n            `,\n            [vendorId]\n        );\n\n        return vendorStats?.[0] || {\n            accepted_requirements: 0,\n            pending_quotes: 0,\n            active_bookings: 0,\n            pending_deliveries: 0\n        };\n    }\n\n    async getRecentRequirements(vendorId: string, startDate?: string, endDate?: string) {\n        let query = `\n            SELECT \n                r.id, \n                r.requirement_number, \n                r.requirement_status, \n                r.created_on,\n                o.order_number\n            FROM requirement r\n            JOIN \\`order\\` o ON o.id = r.order_id\n            WHERE r.vendor_id = ?\n        `;\n\n        const params: any[] = [vendorId];\n\n        if (startDate && endDate) {\n            query += ` AND DATE(r.created_on) BETWEEN ? AND ? `;\n            params.push(startDate, endDate);\n        }\n\n        query += ` ORDER BY r.created_on DESC LIMIT 10`;\n\n        return this.dataSource.query(query, params);\n    }\n}\n"],"names":["VendorDashboardService","getStats","vendorId","vendorStats","dataSource","query","accepted_requirements","pending_quotes","active_bookings","pending_deliveries","getRecentRequirements","startDate","endDate","params","push"],"mappings":";;;;+BAIaA;;;eAAAA;;;wBAJc;yBACA;;;;;;;;;;AAGpB,IAAA,AAAMA,yBAAN,MAAMA;IAGT,MAAMC,SAASC,QAAgB,EAAE;QAC7B,MAAMC,cAAc,MAAM,IAAI,CAACC,UAAU,CAACC,KAAK,CAC3C,CAAC;;;;;;;;;;;YAWD,CAAC,EACD;YAACH;SAAS;QAGd,OAAOC,aAAa,CAAC,EAAE,IAAI;YACvBG,uBAAuB;YACvBC,gBAAgB;YAChBC,iBAAiB;YACjBC,oBAAoB;QACxB;IACJ;IAEA,MAAMC,sBAAsBR,QAAgB,EAAES,SAAkB,EAAEC,OAAgB,EAAE;QAChF,IAAIP,QAAQ,CAAC;;;;;;;;;;QAUb,CAAC;QAED,MAAMQ,SAAgB;YAACX;SAAS;QAEhC,IAAIS,aAAaC,SAAS;YACtBP,SAAS,CAAC,wCAAwC,CAAC;YACnDQ,OAAOC,IAAI,CAACH,WAAWC;QAC3B;QAEAP,SAAS,CAAC,oCAAoC,CAAC;QAE/C,OAAO,IAAI,CAACD,UAAU,CAACC,KAAK,CAACA,OAAOQ;IACxC;IAlDA,YAAY,AAAQT,UAAsB,CAAE;aAAxBA,aAAAA;IAA0B;AAmDlD"}