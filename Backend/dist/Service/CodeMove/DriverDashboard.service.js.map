{"version":3,"sources":["../../../src/Service/CodeMove/DriverDashboard.service.ts"],"sourcesContent":["import { Injectable } from \"@nestjs/common\";\nimport { DataSource } from \"typeorm\";\n\n@Injectable()\nexport class DriverDashboardService {\n    constructor(private dataSource: DataSource) { }\n\n    async getDriverStats(driverId: string) {\n        const stats = await this.dataSource.query(\n            `\n    SELECT\n      (SELECT COUNT(id) FROM bookings WHERE driver_id = ? AND booking_status = 'Confirmed') AS assigned_booking,\n      (SELECT COUNT(id) FROM delivery WHERE driver_id = ? AND delivery_status != 'Delivered') AS pending_delivery,\n      (SELECT COUNT(id) FROM delivery WHERE driver_id = ? AND delivery_status = 'In Transit') AS in_transit,\n      (SELECT COUNT(id) FROM delivery WHERE driver_id = ? AND delivery_status = 'Delivered') AS complete\n    `,\n            [driverId, driverId, driverId, driverId]\n        );\n\n        return stats?.[0] || {\n            assigned_booking: 0,\n            pending_delivery: 0,\n            in_transit: 0,\n            complete: 0,\n        };\n    }\n\n\n    async getDriverOrders(driverId: string, startDate: string) {\n        const orders = await this.dataSource.query(\n            `\n        SELECT \n            o.id AS order_id,\n            o.order_number,\n            o.order_date,\n            o.pickup_date,\n            o.pickup_time,\n            o.source_location,\n            o.destination_location,\n            b.booking_number,\n            b.booking_status,\n            b.driver_id AS driver_id,\n            d.id AS delivery_id,\n            d.delivery_status,\n            d.start_time,\n            d.end_time,\n            d.created_on\n        FROM\n            \\`order\\` o \n        LEFT JOIN\t\n            bookings b ON b.order_id = o.id\n        LEFT JOIN \n            delivery d ON d.booking_id = b.id\n        WHERE \n            b.driver_id = ?\n            AND DATE(d.created_on) = ?\n        `,\n            [driverId, startDate]\n        );\n\n        console.log(orders, \"query\");\n        return orders;\n    }\n\n\n\n    async GetAllDeliverys(driverId: string) {\n        const query = await this.dataSource.query(`\n            SELECT \n                o.id as order_id,\n                o.order_number,\n                o.order_date,\n                o.pickup_date,\n                o.pickup_time,\n                o.source_location,\n                o.destination_location,\n                b.booking_number,\n                b.booking_status,\n                b.driver_id as driver_id,\n                d.id as delivery_id,\n                d.delivery_status,\n                d.start_time,\n                d.end_time,\n                d.assigned_time  \n            FROM\n            \\`order\\` o \n            LEFT JOIN\n                bookings b ON b.order_id = o.id\n            left join \n                delivery d on d.booking_id = b.id\n            WHERE\n               b.driver_id = ?`,\n            [driverId]\n\n        );\n        return query;\n\n    }\n\n\n\n}\n\n"],"names":["DriverDashboardService","getDriverStats","driverId","stats","dataSource","query","assigned_booking","pending_delivery","in_transit","complete","getDriverOrders","startDate","orders","console","log","GetAllDeliverys"],"mappings":";;;;+BAIaA;;;eAAAA;;;wBAJc;yBACA;;;;;;;;;;AAGpB,IAAA,AAAMA,yBAAN,MAAMA;IAGT,MAAMC,eAAeC,QAAgB,EAAE;QACnC,MAAMC,QAAQ,MAAM,IAAI,CAACC,UAAU,CAACC,KAAK,CACrC,CAAC;;;;;;IAMT,CAAC,EACO;YAACH;YAAUA;YAAUA;YAAUA;SAAS;QAG5C,OAAOC,OAAO,CAAC,EAAE,IAAI;YACjBG,kBAAkB;YAClBC,kBAAkB;YAClBC,YAAY;YACZC,UAAU;QACd;IACJ;IAGA,MAAMC,gBAAgBR,QAAgB,EAAES,SAAiB,EAAE;QACvD,MAAMC,SAAS,MAAM,IAAI,CAACR,UAAU,CAACC,KAAK,CACtC,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;QA0BL,CAAC,EACG;YAACH;YAAUS;SAAU;QAGzBE,QAAQC,GAAG,CAACF,QAAQ;QACpB,OAAOA;IACX;IAIA,MAAMG,gBAAgBb,QAAgB,EAAE;QACpC,MAAMG,QAAQ,MAAM,IAAI,CAACD,UAAU,CAACC,KAAK,CAAC,CAAC;;;;;;;;;;;;;;;;;;;;;;;;8BAwBrB,CAAC,EACnB;YAACH;SAAS;QAGd,OAAOG;IAEX;IA5FA,YAAY,AAAQD,UAAsB,CAAE;aAAxBA,aAAAA;IAA0B;AAgGlD"}