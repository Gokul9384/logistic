{"version":3,"sources":["../../../src/Service/CodeMove/Customer.service.ts"],"sourcesContent":["import { Injectable } from \"@nestjs/common\";\nimport { LogActionEnum } from \"@Root/Helper/Enum/AuditLogEnum\";\nimport { AuditLogService } from \"../Admin/AuditLog.service\";\nimport { customer } from \"@Root/Database/Table/CodeMove/customer\";\nimport { ResponseEnum } from \"@Root/Helper/Enum/ResponseEnum\";\nimport { CustomerModel } from \"@Model/CodeMove/Customer.model\";\nimport { use } from \"passport\";\nimport { user } from \"@Root/Database/Table/Admin/user\";\nimport { user_role } from \"@Root/Database/Table/Admin/user_role\";\nimport _ from \"lodash\";\nimport { EncryptionService } from \"../Encryption.service\";\n\n@Injectable()\nexport class CustomerService {\n    constructor(private _AuditLogService: AuditLogService, private _EncryptionService: EncryptionService) { }\n\n    async GetAll() {\n        return await customer.find();\n    }\n\n    async GetById(CustomerId: string) {\n        const CustomerData = await customer.findOne({ where: { id: CustomerId } });\n        if (!CustomerData) throw new Error(ResponseEnum.NotFound);\n        return CustomerData;\n    }\n\n    async Insert(CustomerData: CustomerModel, UserId: string, UserIp: string) {\n        const UserRoleData = await user_role.findOne({ where: { name: \"Customer\" } });\n        if (!UserRoleData) {\n            throw new Error(ResponseEnum.NotFound);\n        }\n        const _userData = new user();\n        _userData.first_name = CustomerData.name;\n        _userData.user_role_id = UserRoleData.id;\n        _userData.email = CustomerData.email;\n        _userData.password = this._EncryptionService.Encrypt(CustomerData.password);\n        _userData.mobile = CustomerData.mobile;\n        _userData.created_by_id = UserId;\n        _userData.created_on = new Date();\n        await user.insert(_userData);\n\n\n        const _CustomerData = new customer();\n        _CustomerData.user_id = _userData.id;\n        _CustomerData.name = CustomerData.name;\n        _CustomerData.email = CustomerData.email;\n        _CustomerData.mobile = CustomerData.mobile;\n        _CustomerData.gst_number = CustomerData.gst_number;\n        _CustomerData.latitude = CustomerData.latitude;\n        _CustomerData.longitude = CustomerData.longitude;\n        _CustomerData.formatted_address = CustomerData.formatted_address;\n        _CustomerData.created_by_id = UserId;\n        _CustomerData.created_on = new Date();\n\n        await customer.insert(_CustomerData);\n        await user.update({ id: _CustomerData.user_id }, { is_profile_updated: true });\n        this._AuditLogService.AuditEmitEvent({\n            PerformedType: customer.name,\n            ActionType: LogActionEnum.Insert,\n            PrimaryId: [_CustomerData.id],\n            UserIp: UserIp\n        });\n\n        return _CustomerData;\n    }\n\n    async Update(Id: string, CustomerData: CustomerModel, UserId: string, UserIp: string) {\n        const CustomerUpdateData = await customer.findOne({ where: { id: Id } });\n        if (!CustomerUpdateData) throw new Error(ResponseEnum.NotFound);\n\n        CustomerUpdateData.name = CustomerData.name;\n        CustomerUpdateData.email = CustomerData.email;\n        CustomerUpdateData.mobile = CustomerData.mobile;\n        CustomerUpdateData.gst_number = CustomerData.gst_number;\n        CustomerUpdateData.latitude = CustomerData.latitude;\n        CustomerUpdateData.longitude = CustomerData.longitude;\n        CustomerUpdateData.formatted_address = CustomerData.formatted_address;\n        CustomerUpdateData.updated_by_id = UserId;\n        CustomerUpdateData.updated_on = new Date();\n\n        await customer.update(Id, CustomerUpdateData);\n        await user.update({ id: CustomerUpdateData.user_id }, { is_profile_updated: true });\n        this._AuditLogService.AuditEmitEvent({\n            PerformedType: customer.name,\n            ActionType: LogActionEnum.Update,\n            PrimaryId: [CustomerUpdateData.id],\n            UserIp: UserIp\n        });\n\n        return CustomerUpdateData;\n    }\n\n    async Delete(Id: string, UserIp: string) {\n        const CustomerData = await customer.findOne({ where: { id: Id } });\n        if (!CustomerData) throw new Error(ResponseEnum.NotFound);\n\n        await CustomerData.remove();\n        this._AuditLogService.AuditEmitEvent({\n            PerformedType: customer.name,\n            ActionType: LogActionEnum.Delete,\n            PrimaryId: [CustomerData.id],\n            UserIp: UserIp\n        });\n\n        return true;\n    }\n}\n"],"names":["CustomerService","GetAll","customer","find","GetById","CustomerId","CustomerData","findOne","where","id","Error","ResponseEnum","NotFound","Insert","UserId","UserIp","UserRoleData","user_role","name","_userData","user","first_name","user_role_id","email","password","_EncryptionService","Encrypt","mobile","created_by_id","created_on","Date","insert","_CustomerData","user_id","gst_number","latitude","longitude","formatted_address","update","is_profile_updated","_AuditLogService","AuditEmitEvent","PerformedType","ActionType","LogActionEnum","PrimaryId","Update","Id","CustomerUpdateData","updated_by_id","updated_on","Delete","remove"],"mappings":"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"}