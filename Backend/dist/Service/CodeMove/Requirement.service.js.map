{"version":3,"sources":["../../../src/Service/CodeMove/Requirement.service.ts"],"sourcesContent":["// src/Service/CodeMove/Requirement.service.ts\nimport { Injectable } from \"@nestjs/common\";\nimport { ResponseEnum } from \"@Root/Helper/Enum/ResponseEnum\";\nimport { LogActionEnum } from \"@Root/Helper/Enum/AuditLogEnum\";\nimport { AuditLogService } from \"../Admin/AuditLog.service\";\nimport { requirement } from \"@Root/Database/Table/CodeMove/requirement\";\nimport { RequirementModel } from \"@Model/CodeMove/Requirement.model\";\nimport { DataSource } from \"typeorm\";\nimport { CommonService } from \"../Common.service\";\nimport { notification } from \"@Root/Database/Table/CodeMove/notification\";\nimport { order } from \"@Root/Database/Table/CodeMove/order\";\nimport { OrderStatusEnum } from \"@Root/Helper/Enum/OrderStatusEnum\";\nimport { RequirementEnum } from \"@Root/Helper/Enum/QuoteEnum\";\n\n@Injectable()\nexport class RequirementService {\n    constructor(\n        private _AuditLogService: AuditLogService,\n        private _CommonService: CommonService,\n        private _DataSource: DataSource\n\n    ) { }\n\n    async GetAll() {\n        return await requirement.find({ relations: [\"order\", \"vendor\"] });\n    }\n\n    async RequirementDetail() {\n        const RequirementData = await this._DataSource.query(`\n    SELECT \n    r.id,\n\tr.order_id,\n\tr.vendor_id,\n    v.company_name as vendor_name,\n\tr.requirement_number,\n    r.requirement_status,\n    o.order_number,\n    o.source_location,\n    o.destination_location,\n    o.material,\n    o.expected_date,\n    o.order_status,\n    o.priority,\n    o.weight,\n    o.pickup_date,\n    o.pickup_time,\n    o.order_date\n    FROM \n      requirement r\n    LEFT JOIN \n      \\`order\\` o ON o.id = r.order_id\n    LEFT JOIN \t\n\t   vendor v ON v.id = r.vendor_id\n\n  `);\n        return RequirementData;\n    }\n\n    async GetById(Id: string) {\n        const RequirementData = await requirement.findOne({\n            where: { id: Id },\n            relations: [\"order\", \"vendor\"]\n        });\n        if (!RequirementData) throw new Error(ResponseEnum.NotFound);\n        return RequirementData;\n    }\n    //     let RequirementNumber = await this._DataSource.query(`\n    //     SELECT r.requirement_number \n    //     FROM \\`requirement\\` AS r \n    //     ORDER BY CAST(REGEXP_REPLACE(r.requirement_number, '[^0-9]', '') AS UNSIGNED) DESC\n    // `);\n\n    //     if (RequirementNumber[0]?.requirement_number) {\n    //         RequirementNumber[0].requirement_number = this._CommonService.AutoGenerateNumber(RequirementNumber[0].requirement_number);\n    //     } else {\n    //         RequirementNumber[0] = { requirement_number: \"RQ-00001\" };\n    //     }\n\n    //     const _RequirementData = new requirement();\n    //     _RequirementData.requirement_number = RequirementNumber[0].requirement_number;\n    //     _RequirementData.order_id = RequirementData.order_id;\n    //     _RequirementData.vendor_id = RequirementData.vendor_id;\n    //     _RequirementData.requirement_status = RequirementData.requirement_status;\n    //     _RequirementData.created_by_id = UserId;\n    //     _RequirementData.created_on = new Date();\n\n    //     await requirement.insert(_RequirementData);\n    //     const _order = new order();\n    //     _order.order_status = OrderStatusEnum.Assigned;\n    //     await order.update(_RequirementData.order_id, _order);\n\n\n    //     // ðŸ”” Notification\n    //     const newNotification = new notification();\n    //     newNotification.title = 'New Requirement Created';\n    //     newNotification.message = `Requirement ${_RequirementData.requirement_number} has been added.`;\n    //     newNotification.user_id = _RequirementData.vendor_id;\n    //     newNotification.user_type = 'Vendor';\n    //     newNotification.route_id = _RequirementData.id;\n    //     newNotification.route_module = 'requirements';\n    //     newNotification.is_read = false;\n    //     newNotification.created_by_id = UserId;\n    //     newNotification.created_on = new Date();\n\n    //     await notification.insert(newNotification);\n\n    //     this._AuditLogService.AuditEmitEvent({\n    //         PerformedType: requirement.name,\n    //         ActionType: LogActionEnum.Insert,\n    //         PrimaryId: [_RequirementData.id],\n    //         UserIp: UserIp\n    //     });\n\n    //     return _RequirementData;\n    // }\n    // async Update(Id: string, RequirementData: RequirementModel, UserId: string, UserIp: string) {\n    //     const RequirementUpdateData = await requirement.findOne({ where: { id: Id } });\n    //     if (!RequirementUpdateData) throw new Error(ResponseEnum.NotFound);\n\n\n    //     RequirementUpdateData.order_id = RequirementData.order_id;\n    //     RequirementUpdateData.vendor_id = RequirementData.vendor_id;\n    //     RequirementUpdateData.requirement_status = RequirementData.requirement_status;\n    //     RequirementUpdateData.updated_by_id = UserId;\n    //     RequirementUpdateData.updated_on = new Date();\n\n    //     await requirement.update(Id, RequirementUpdateData);\n\n    //     // ðŸ”” Notification\n    //     const newNotification = new notification();\n    //     newNotification.title = 'Requirement Updated';\n    //     newNotification.message = `Requirement ${RequirementUpdateData.requirement_number} has been updated.`;\n    //     newNotification.user_id = RequirementUpdateData?.vendor_id;\n    //     newNotification.user_type = 'Vendor';\n    //     newNotification.is_read = false;\n    //     newNotification.created_by_id = UserId;\n    //     newNotification.created_on = new Date();\n\n    //     await notification.insert(newNotification);\n\n    //     this._AuditLogService.AuditEmitEvent({\n    //         PerformedType: requirement.name,\n    //         ActionType: LogActionEnum.Update,\n    //         PrimaryId: [RequirementUpdateData.id],\n    //         UserIp: UserIp\n    //     });\n\n    //     return RequirementUpdateData;\n    // }\n\n    // Requirement Service\n\n    async Insert(RequirementData: RequirementModel, UserId: string, UserIp: string) {\n        let RequirementNumber = await this._DataSource.query(`\n            SELECT r.requirement_number \n            FROM \\`requirement\\` AS r \n            ORDER BY CAST(REGEXP_REPLACE(r.requirement_number, '[^0-9]', '') AS UNSIGNED) DESC\n          `);\n        if (RequirementNumber[0]?.requirement_number) {\n            RequirementNumber[0].requirement_number = this._CommonService.AutoGenerateNumber(RequirementNumber[0].requirement_number);\n        } else {\n            RequirementNumber[0] = { requirement_number: \"RQ-00001\" };\n        }\n        const _RequirementData = new requirement();\n        _RequirementData.requirement_number = RequirementNumber[0].requirement_number;\n        _RequirementData.order_id = RequirementData.order_id;\n        _RequirementData.vendor_id = RequirementData.vendor_id;\n        // Set initial status to Pending when requirement is created\n        _RequirementData.requirement_status = RequirementEnum.Sent;\n        _RequirementData.created_by_id = UserId;\n        _RequirementData.created_on = new Date();\n        await requirement.insert(_RequirementData);\n\n        // ðŸ”” Notification\n        const newNotification = new notification();\n        newNotification.title = 'New Requirement Created';\n        newNotification.message = `Requirement ${_RequirementData.requirement_number} has been added.`;\n        newNotification.user_id = _RequirementData.vendor_id;\n        newNotification.user_type = 'Vendor';\n        newNotification.route_id = _RequirementData.id;\n        newNotification.route_module = 'requirements';\n        newNotification.is_read = false;\n        newNotification.created_by_id = UserId;\n        newNotification.created_on = new Date();\n        await notification.insert(newNotification);\n\n        this._AuditLogService.AuditEmitEvent({\n            PerformedType: requirement.name,\n            ActionType: LogActionEnum.Insert,\n            PrimaryId: [_RequirementData.id],\n            UserIp: UserIp\n        });\n        return _RequirementData;\n    }\n\n    async Update(Id: string, RequirementData: RequirementModel, UserId: string, UserIp: string) {\n        const RequirementUpdateData = await requirement.findOne({ where: { id: Id } });\n        if (!RequirementUpdateData) throw new Error(ResponseEnum.NotFound);\n\n        const oldStatus = RequirementUpdateData.requirement_status;\n        RequirementUpdateData.order_id = RequirementData.order_id;\n        RequirementUpdateData.vendor_id = RequirementData.vendor_id;\n        RequirementUpdateData.requirement_status = RequirementData.requirement_status;\n        RequirementUpdateData.updated_by_id = UserId;\n        RequirementUpdateData.updated_on = new Date();\n        await requirement.update(Id, RequirementUpdateData);\n\n        // If status changed to Sent, update order status to Quoted\n        if (oldStatus !== RequirementEnum.Accepted && RequirementData.requirement_status === RequirementEnum.Accepted) {\n            await this._DataSource.query(`\n            UPDATE \\`order\\` \n            SET order_status = ? \n            WHERE id = ?\n        `, [OrderStatusEnum.Requested, RequirementUpdateData.order_id]);\n        }\n\n        // ðŸ”” Notification\n        const newNotification = new notification();\n        newNotification.title = 'Requirement Updated';\n        newNotification.message = `Requirement ${RequirementUpdateData.requirement_number} has been updated.`;\n        newNotification.user_id = RequirementUpdateData?.vendor_id;\n        newNotification.user_type = 'Vendor';\n        newNotification.route_id = RequirementUpdateData.id;\n        newNotification.route_module = 'requirements';\n\n        newNotification.is_read = false;\n        newNotification.created_by_id = UserId;\n        newNotification.created_on = new Date();\n        await notification.insert(newNotification);\n\n        this._AuditLogService.AuditEmitEvent({\n            PerformedType: requirement.name,\n            ActionType: LogActionEnum.Update,\n            PrimaryId: [RequirementUpdateData.id],\n            UserIp: UserIp\n        });\n        return RequirementUpdateData;\n    }\n\n\n    async Delete(Id: string, UserIp: string) {\n        const RequirementData = await requirement.findOne({ where: { id: Id } });\n        if (!RequirementData) throw new Error(ResponseEnum.NotFound);\n\n        await RequirementData.remove();\n        this._AuditLogService.AuditEmitEvent({\n            PerformedType: requirement.name,\n            ActionType: LogActionEnum.Delete,\n            PrimaryId: [RequirementData.id],\n            UserIp: UserIp\n        });\n\n        return true;\n    }\n}\n"],"names":["RequirementService","GetAll","requirement","find","relations","RequirementDetail","RequirementData","_DataSource","query","GetById","Id","findOne","where","id","Error","ResponseEnum","NotFound","Insert","UserId","UserIp","RequirementNumber","requirement_number","_CommonService","AutoGenerateNumber","_RequirementData","order_id","vendor_id","requirement_status","RequirementEnum","Sent","created_by_id","created_on","Date","insert","newNotification","notification","title","message","user_id","user_type","route_id","route_module","is_read","_AuditLogService","AuditEmitEvent","PerformedType","name","ActionType","LogActionEnum","PrimaryId","Update","RequirementUpdateData","oldStatus","updated_by_id","updated_on","update","Accepted","OrderStatusEnum","Requested","Delete","remove"],"mappings":"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"}