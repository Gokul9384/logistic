{"version":3,"sources":["../../../src/Service/CodeMove/CustomerQuote.service.ts"],"sourcesContent":["import { Injectable } from \"@nestjs/common\";\nimport { DataSource } from \"typeorm\";\nimport { customer_quote } from \"@Root/Database/Table/CodeMove/customer_quote\";\nimport { CustomerQuoteModel } from \"@Model/CodeMove/CustomerQuote.model\";\nimport { ResponseEnum } from \"@Root/Helper/Enum/ResponseEnum\";\nimport { LogActionEnum } from \"@Root/Helper/Enum/AuditLogEnum\";\nimport { AuditLogService } from \"../Admin/AuditLog.service\";\nimport { notification } from \"@Root/Database/Table/CodeMove/notification\";\nimport { CommonService } from \"../Common.service\";\nimport { QuoteStatusEnum } from \"@Root/Helper/Enum/QuoteEnum\";\nimport { OrderStatusEnum } from \"@Root/Helper/Enum/OrderStatusEnum\";\nimport { user } from \"@Root/Database/Table/Admin/user\";\n\n@Injectable()\nexport class CustomerQuoteService {\n    constructor(\n        private _AuditLogService: AuditLogService,\n        private _CommonService: CommonService,\n        private _DataSource: DataSource\n    ) { }\n\n    async GetAll() {\n        return await customer_quote.find({ relations: [\"quote\", \"order\", \"customer\"] });\n    }\n\n    async GetById(CustomerQuoteId: string) {\n        const CustomerQuoteData = await customer_quote.findOne({\n            where: { id: CustomerQuoteId },\n            relations: [\"quote\", \"order\", \"customer\"]\n        });\n        if (!CustomerQuoteData) throw new Error(ResponseEnum.NotFound);\n        return CustomerQuoteData;\n    }\n\n    // async Insert(CustomerQuoteData: CustomerQuoteModel, UserId: string, UserIp: string) {\n\n    //     let CustomerQuoteNumber = await this._DataSource.query(\n    //         `SELECT cq.customer_quote_number \n    //          FROM customer_quote AS cq \n    //          ORDER BY CAST(REGEXP_REPLACE(cq.customer_quote_number, '[^0-9]', '') AS UNSIGNED) DESC \n    //          LIMIT 1`\n    //     );\n\n    //     if (CustomerQuoteNumber[0]?.customer_quote_number) {\n    //         CustomerQuoteNumber[0].customer_quote_number =\n    //             this._CommonService.AutoGenerateNumber(CustomerQuoteNumber[0].customer_quote_number);\n    //     } else {\n    //         CustomerQuoteNumber[0] = { customer_quote_number: \"CQT-00001\" };\n    //     }\n\n    //     const _CustomerQuoteData = new customer_quote();\n    //     _CustomerQuoteData.quote_id = CustomerQuoteData.quote_id;\n    //     _CustomerQuoteData.order_id = CustomerQuoteData.order_id;\n    //     _CustomerQuoteData.customer_id = CustomerQuoteData.customer_id;\n    //     _CustomerQuoteData.customer_quote_number = CustomerQuoteNumber[0].customer_quote_number;\n    //     _CustomerQuoteData.customer_quote_amount = CustomerQuoteData.customer_quote_amount;\n    //     _CustomerQuoteData.customer_quote_status = CustomerQuoteData.customer_quote_status;\n    //     _CustomerQuoteData.created_by_id = UserId;\n    //     _CustomerQuoteData.created_on = new Date();\n\n    //     await customer_quote.insert(_CustomerQuoteData);\n\n    //     const newNotification = new notification();\n    //     newNotification.title = 'New Customer Quote Created';\n    //     newNotification.message = `Customer Quote ${_CustomerQuoteData.customer_quote_number} has been created.`;\n    //     newNotification.user_id = _CustomerQuoteData.customer_id;\n    //     newNotification.user_type = 'Admin';\n    //     newNotification.route_id = _CustomerQuoteData.id;\n    //     newNotification.route_module = 'customer-quotes';\n    //     newNotification.is_read = false;\n    //     newNotification.created_by_id = UserId;\n    //     newNotification.created_on = new Date();\n\n    //     await notification.insert(newNotification);\n\n    //     this._AuditLogService.AuditEmitEvent({\n    //         PerformedType: customer_quote.name,\n    //         ActionType: LogActionEnum.Insert,\n    //         PrimaryId: [_CustomerQuoteData.id],\n    //         UserIp: UserIp\n    //     });\n\n    //     return _CustomerQuoteData;\n    // }\n\n    // async Update(Id: string, CustomerQuoteData: CustomerQuoteModel, UserId: string, UserIp: string) {\n    //     const CustomerQuoteUpdateData = await customer_quote.findOne({ where: { id: Id } });\n    //     if (!CustomerQuoteUpdateData) throw new Error(ResponseEnum.NotFound);\n\n\n    //     CustomerQuoteUpdateData.quote_id = CustomerQuoteData.quote_id;\n    //     CustomerQuoteUpdateData.order_id = CustomerQuoteData.order_id;\n    //     CustomerQuoteUpdateData.customer_id = CustomerQuoteData.customer_id;\n    //     CustomerQuoteUpdateData.customer_quote_amount = CustomerQuoteData.customer_quote_amount;\n    //     CustomerQuoteUpdateData.customer_quote_status = CustomerQuoteData.customer_quote_status;\n    //     CustomerQuoteUpdateData.updated_by_id = UserId;\n    //     CustomerQuoteUpdateData.updated_on = new Date();\n\n    //     await customer_quote.update(Id, CustomerQuoteUpdateData);\n\n    //     const newNotification = new notification();\n    //     newNotification.title = 'Customer Quote Updated';\n    //     newNotification.message = `Customer Quote ${CustomerQuoteUpdateData.customer_quote_number} has been updated.`;\n    //     newNotification.user_id = CustomerQuoteUpdateData.customer_id;\n    //     newNotification.user_type = 'Admin';\n    //     newNotification.is_read = false;\n    //     newNotification.created_by_id = UserId;\n    //     newNotification.created_on = new Date();\n\n    //     await notification.insert(newNotification);\n\n    //     this._AuditLogService.AuditEmitEvent({\n    //         PerformedType: customer_quote.name,\n    //         ActionType: LogActionEnum.Update,\n    //         PrimaryId: [CustomerQuoteUpdateData.id],\n    //         UserIp: UserIp\n    //     });\n\n    //     return CustomerQuoteUpdateData;\n    // }\n\n\n\n    // Customer Quote Service\n\n\n    async Insert(CustomerQuoteData: CustomerQuoteModel, UserId: string, UserIp: string) {\n        let CustomerQuoteNumber = await this._DataSource.query(\n            `SELECT cq.customer_quote_number \n         FROM customer_quote AS cq \n         ORDER BY CAST(REGEXP_REPLACE(cq.customer_quote_number, '[^0-9]', '') AS UNSIGNED) DESC \n         LIMIT 1`\n        );\n        if (CustomerQuoteNumber[0]?.customer_quote_number) {\n            CustomerQuoteNumber[0].customer_quote_number =\n                this._CommonService.AutoGenerateNumber(CustomerQuoteNumber[0].customer_quote_number);\n        } else {\n            CustomerQuoteNumber[0] = { customer_quote_number: \"CQT-00001\" };\n        }\n        const _CustomerQuoteData = new customer_quote();\n        const oldStatus = CustomerQuoteData.customer_quote_status;\n\n        _CustomerQuoteData.quote_id = CustomerQuoteData.quote_id;\n        _CustomerQuoteData.order_id = CustomerQuoteData.order_id;\n        _CustomerQuoteData.customer_id = CustomerQuoteData.customer_id;\n        _CustomerQuoteData.customer_quote_number = CustomerQuoteNumber[0].customer_quote_number;\n        _CustomerQuoteData.customer_quote_amount = CustomerQuoteData.customer_quote_amount;\n        // Set initial status to Requested when customer quote is created\n        _CustomerQuoteData.customer_quote_status = QuoteStatusEnum.Sent;\n        _CustomerQuoteData.created_by_id = UserId;\n        _CustomerQuoteData.created_on = new Date();\n        await customer_quote.insert(_CustomerQuoteData);\n        // If status changed to Accepted, update order status to Confirmed\n        if (CustomerQuoteData.customer_quote_status === QuoteStatusEnum.Sent) {\n            await this._DataSource.query(`\n            UPDATE \\`order\\` \n            SET order_status = ? \n            WHERE id = ?\n        `, [OrderStatusEnum.Quoted, CustomerQuoteData.order_id]);\n        }\n\n\n        const newNotification = new notification();\n        newNotification.title = 'New Customer Quote Created';\n        newNotification.message = `Customer Quote ${_CustomerQuoteData.customer_quote_number} has been created.`;\n        newNotification.user_id = _CustomerQuoteData.customer_id;\n        newNotification.user_type = 'Admin';\n        newNotification.route_id = _CustomerQuoteData.id;\n        newNotification.route_module = 'customer-quotes';\n        newNotification.is_read = false;\n        newNotification.created_by_id = UserId;\n        newNotification.created_on = new Date();\n        await notification.insert(newNotification);\n\n        this._AuditLogService.AuditEmitEvent({\n            PerformedType: customer_quote.name,\n            ActionType: LogActionEnum.Insert,\n            PrimaryId: [_CustomerQuoteData.id],\n            UserIp: UserIp\n        });\n        return _CustomerQuoteData;\n    }\n\n    async Update(Id: string, CustomerQuoteData: CustomerQuoteModel, UserId: string, UserIp: string) {\n        const AdminData = await user.findOne({ where: { first_name: 'Admin' } });\n\n        const CustomerQuoteUpdateData = await customer_quote.findOne({ where: { id: Id } });\n        if (!CustomerQuoteUpdateData) throw new Error(ResponseEnum.NotFound);\n\n        const oldStatus = CustomerQuoteUpdateData.customer_quote_status;\n        CustomerQuoteUpdateData.quote_id = CustomerQuoteData.quote_id;\n        CustomerQuoteUpdateData.order_id = CustomerQuoteData.order_id;\n        CustomerQuoteUpdateData.customer_id = CustomerQuoteData.customer_id;\n        CustomerQuoteUpdateData.customer_quote_amount = CustomerQuoteData.customer_quote_amount;\n        CustomerQuoteUpdateData.customer_quote_status = CustomerQuoteData.customer_quote_status;\n        CustomerQuoteUpdateData.updated_by_id = UserId;\n        CustomerQuoteUpdateData.updated_on = new Date();\n        await customer_quote.update(Id, CustomerQuoteUpdateData);\n\n        // If status changed to Accepted, update order status to Confirmed\n        if (oldStatus !== QuoteStatusEnum.Accepted && CustomerQuoteData.customer_quote_status === QuoteStatusEnum.Accepted) {\n            await this._DataSource.query(`\n            UPDATE \\`order\\` \n            SET order_status = ? \n            WHERE id = ?\n        `, [OrderStatusEnum.Quoted, CustomerQuoteUpdateData.order_id]);\n        }\n\n        const newNotification = new notification();\n        newNotification.title = 'Customer Quote Updated';\n        newNotification.message = `Customer Quote ${CustomerQuoteUpdateData.customer_quote_number} has been updated.`;\n        newNotification.user_id = AdminData.id;\n        newNotification.user_type = 'Admin';\n        newNotification.route_id = CustomerQuoteUpdateData.id;\n        newNotification.route_module = 'customer-quotes';\n        newNotification.is_read = false;\n        newNotification.created_by_id = UserId;\n        newNotification.created_on = new Date();\n        await notification.insert(newNotification);\n\n        this._AuditLogService.AuditEmitEvent({\n            PerformedType: customer_quote.name,\n            ActionType: LogActionEnum.Update,\n            PrimaryId: [CustomerQuoteUpdateData.id],\n            UserIp: UserIp\n        });\n        return CustomerQuoteUpdateData;\n    }\n\n    async Delete(Id: string, UserIp: string) {\n        const CustomerQuoteData = await customer_quote.findOne({ where: { id: Id } });\n        if (!CustomerQuoteData) throw new Error(ResponseEnum.NotFound);\n\n        await CustomerQuoteData.remove();\n\n        this._AuditLogService.AuditEmitEvent({\n            PerformedType: customer_quote.name,\n            ActionType: LogActionEnum.Delete,\n            PrimaryId: [CustomerQuoteData.id],\n            UserIp: UserIp\n        });\n\n        return true;\n    }\n}\n"],"names":["CustomerQuoteService","GetAll","customer_quote","find","relations","GetById","CustomerQuoteId","CustomerQuoteData","findOne","where","id","Error","ResponseEnum","NotFound","Insert","UserId","UserIp","CustomerQuoteNumber","_DataSource","query","customer_quote_number","_CommonService","AutoGenerateNumber","_CustomerQuoteData","oldStatus","customer_quote_status","quote_id","order_id","customer_id","customer_quote_amount","QuoteStatusEnum","Sent","created_by_id","created_on","Date","insert","OrderStatusEnum","Quoted","newNotification","notification","title","message","user_id","user_type","route_id","route_module","is_read","_AuditLogService","AuditEmitEvent","PerformedType","name","ActionType","LogActionEnum","PrimaryId","Update","Id","AdminData","user","first_name","CustomerQuoteUpdateData","updated_by_id","updated_on","update","Accepted","Delete","remove"],"mappings":"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"}