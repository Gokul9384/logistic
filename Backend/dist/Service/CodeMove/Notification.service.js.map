{"version":3,"sources":["../../../src/Service/CodeMove/Notification.service.ts"],"sourcesContent":["import { Injectable } from \"@nestjs/common\";\nimport { notification } from \"@Root/Database/Table/CodeMove/notification\";\nimport { NotificationModel } from \"@Model/CodeMove/Notification.model\";\nimport { ResponseEnum } from \"@Root/Helper/Enum/ResponseEnum\";\nimport { LogActionEnum } from \"@Root/Helper/Enum/AuditLogEnum\";\nimport { AuditLogService } from \"../Admin/AuditLog.service\";\nimport { vendor } from \"@Root/Database/Table/CodeMove/vendor\";\nimport { customer } from \"@Root/Database/Table/CodeMove/customer\";\nimport { driver } from \"@Root/Database/Table/CodeMove/driver\";\n\n@Injectable()\nexport class NotificationService {\n    constructor(private _AuditLogService: AuditLogService) { }\n\n    // List notifications by user_id\n    async GetAllByUserId(user_id: string) {\n\n        let Notification_id = user_id;\n\n        const VendorData = await vendor.findOne({ where: { user_id } });\n        if (VendorData) {\n            Notification_id = VendorData.id;\n        }\n\n        const CustomerData = await customer.findOne({ where: { user_id } });\n        if (CustomerData) {\n            Notification_id = CustomerData.id;\n        }\n\n        const DriverData = await driver.findOne({ where: { user_id } });\n        if (DriverData) {\n            Notification_id = DriverData.id;\n        }\n\n        return await notification.find({\n            where: { user_id: Notification_id },\n            order: { created_on: \"DESC\" }\n        });\n    }\n\n    // Insert new notification\n    async Insert(data: NotificationModel, createdById: string, userIp: string) {\n        const _notification = new notification();\n        _notification.title = data.title;\n        _notification.message = data.message;\n        _notification.user_id = data.user_id;\n        _notification.user_type = data.user_type;\n        _notification.is_read = data.is_read ?? false;\n        _notification.created_by_id = createdById;\n        _notification.created_on = new Date();\n\n        await notification.insert(_notification);\n\n        this._AuditLogService.AuditEmitEvent({\n            PerformedType: notification.name,\n            ActionType: LogActionEnum.Insert,\n            PrimaryId: [_notification.id],\n            UserIp: userIp\n        });\n\n        return _notification;\n    }\n\n    // Optional: mark as read\n    async MarkAsRead(notificationId: string, userId: string) {\n        const note = await notification.findOne({ where: { id: notificationId, user_id: userId } });\n        if (!note) throw new Error(ResponseEnum.NotFound);\n\n        note.is_read = true;\n        await note.save();\n        return note;\n    }\n\n    // Optional: delete\n    async Delete(notificationId: string, userId: string, userIp: string) {\n        const note = await notification.findOne({ where: { id: notificationId, user_id: userId } });\n        if (!note) throw new Error(ResponseEnum.NotFound);\n\n        await note.remove();\n\n        this._AuditLogService.AuditEmitEvent({\n            PerformedType: notification.name,\n            ActionType: LogActionEnum.Delete,\n            PrimaryId: [note.id],\n            UserIp: userIp\n        });\n\n        return true;\n    }\n}\n"],"names":["NotificationService","GetAllByUserId","user_id","Notification_id","VendorData","vendor","findOne","where","id","CustomerData","customer","DriverData","driver","notification","find","order","created_on","Insert","data","createdById","userIp","_notification","title","message","user_type","is_read","created_by_id","Date","insert","_AuditLogService","AuditEmitEvent","PerformedType","name","ActionType","LogActionEnum","PrimaryId","UserIp","MarkAsRead","notificationId","userId","note","Error","ResponseEnum","NotFound","save","Delete","remove"],"mappings":";;;;+BAWaA;;;eAAAA;;;wBAXc;8BACE;8BAEA;8BACC;iCACE;wBACT;0BACE;wBACF;;;;;;;;;;AAGhB,IAAA,AAAMA,sBAAN,MAAMA;IAGT,gCAAgC;IAChC,MAAMC,eAAeC,OAAe,EAAE;QAElC,IAAIC,kBAAkBD;QAEtB,MAAME,aAAa,MAAMC,cAAM,CAACC,OAAO,CAAC;YAAEC,OAAO;gBAAEL;YAAQ;QAAE;QAC7D,IAAIE,YAAY;YACZD,kBAAkBC,WAAWI,EAAE;QACnC;QAEA,MAAMC,eAAe,MAAMC,kBAAQ,CAACJ,OAAO,CAAC;YAAEC,OAAO;gBAAEL;YAAQ;QAAE;QACjE,IAAIO,cAAc;YACdN,kBAAkBM,aAAaD,EAAE;QACrC;QAEA,MAAMG,aAAa,MAAMC,cAAM,CAACN,OAAO,CAAC;YAAEC,OAAO;gBAAEL;YAAQ;QAAE;QAC7D,IAAIS,YAAY;YACZR,kBAAkBQ,WAAWH,EAAE;QACnC;QAEA,OAAO,MAAMK,0BAAY,CAACC,IAAI,CAAC;YAC3BP,OAAO;gBAAEL,SAASC;YAAgB;YAClCY,OAAO;gBAAEC,YAAY;YAAO;QAChC;IACJ;IAEA,0BAA0B;IAC1B,MAAMC,OAAOC,IAAuB,EAAEC,WAAmB,EAAEC,MAAc,EAAE;QACvE,MAAMC,iBAAgB,IAAIR,0BAAY;QACtCQ,eAAcC,KAAK,GAAGJ,KAAKI,KAAK;QAChCD,eAAcE,OAAO,GAAGL,KAAKK,OAAO;QACpCF,eAAcnB,OAAO,GAAGgB,KAAKhB,OAAO;QACpCmB,eAAcG,SAAS,GAAGN,KAAKM,SAAS;QACxCH,eAAcI,OAAO,GAAGP,KAAKO,OAAO,IAAI;QACxCJ,eAAcK,aAAa,GAAGP;QAC9BE,eAAcL,UAAU,GAAG,IAAIW;QAE/B,MAAMd,0BAAY,CAACe,MAAM,CAACP;QAE1B,IAAI,CAACQ,gBAAgB,CAACC,cAAc,CAAC;YACjCC,eAAelB,0BAAY,CAACmB,IAAI;YAChCC,YAAYC,2BAAa,CAACjB,MAAM;YAChCkB,WAAW;gBAACd,eAAcb,EAAE;aAAC;YAC7B4B,QAAQhB;QACZ;QAEA,OAAOC;IACX;IAEA,yBAAyB;IACzB,MAAMgB,WAAWC,cAAsB,EAAEC,MAAc,EAAE;QACrD,MAAMC,OAAO,MAAM3B,0BAAY,CAACP,OAAO,CAAC;YAAEC,OAAO;gBAAEC,IAAI8B;gBAAgBpC,SAASqC;YAAO;QAAE;QACzF,IAAI,CAACC,MAAM,MAAM,IAAIC,MAAMC,0BAAY,CAACC,QAAQ;QAEhDH,KAAKf,OAAO,GAAG;QACf,MAAMe,KAAKI,IAAI;QACf,OAAOJ;IACX;IAEA,mBAAmB;IACnB,MAAMK,OAAOP,cAAsB,EAAEC,MAAc,EAAEnB,MAAc,EAAE;QACjE,MAAMoB,OAAO,MAAM3B,0BAAY,CAACP,OAAO,CAAC;YAAEC,OAAO;gBAAEC,IAAI8B;gBAAgBpC,SAASqC;YAAO;QAAE;QACzF,IAAI,CAACC,MAAM,MAAM,IAAIC,MAAMC,0BAAY,CAACC,QAAQ;QAEhD,MAAMH,KAAKM,MAAM;QAEjB,IAAI,CAACjB,gBAAgB,CAACC,cAAc,CAAC;YACjCC,eAAelB,0BAAY,CAACmB,IAAI;YAChCC,YAAYC,2BAAa,CAACW,MAAM;YAChCV,WAAW;gBAACK,KAAKhC,EAAE;aAAC;YACpB4B,QAAQhB;QACZ;QAEA,OAAO;IACX;IA5EA,YAAY,AAAQS,gBAAiC,CAAE;aAAnCA,mBAAAA;IAAqC;AA6E7D"}