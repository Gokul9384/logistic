{"version":3,"sources":["../../../src/Database/Seeds/CommonSeeder.service.ts"],"sourcesContent":["import { DataSource } from 'typeorm';\r\nimport { user_role } from '../Table/Admin/user_role';\r\nimport { user } from '../Table/Admin/user';\r\nimport { currency } from '../Table/Admin/currency';\r\nimport { country } from '../Table/Admin/country';\r\nimport { company } from '../Table/Admin/company';\r\nimport { Injectable } from '@nestjs/common';\r\nimport { EncryptionService } from '@Service/Encryption.service';\r\n\r\n@Injectable()\r\nexport class CommonSeederService {\r\n  constructor(\r\n    private readonly _EncryptionService: EncryptionService,\r\n    private _DataSource: DataSource\r\n  ) {\r\n  }\r\n  async Run() {\r\n    try {\r\n      await this.UserRoleSeed();\r\n    }\r\n    catch (e) {\r\n      console.log(e);\r\n    }\r\n    try {\r\n      await this.UserSeed();\r\n    }\r\n    catch (e) {\r\n      console.log(e);\r\n    }\r\n\r\n    try {\r\n      await this.CurrencySeed();\r\n    }\r\n    catch (e) {\r\n      console.log(e);\r\n    }\r\n\r\n    try {\r\n      await this.CountrySeed();\r\n    }\r\n    catch (e) {\r\n      console.log(e);\r\n    }\r\n\r\n    try {\r\n      await this.CompanySeed();\r\n    }\r\n    catch (e) {\r\n      console.log(e);\r\n    }\r\n\r\n\r\n  }\r\n\r\n\r\n  // UserRoleSeed = async () => {\r\n  //   await this._DataSource.manager.createQueryBuilder()\r\n  //     .insert()\r\n  //     .into(user_role)\r\n  //     .values([\r\n  //       { name: 'Super Admin', code: '', created_by_id: \"0\", created_on: new Date() },\r\n  //       { name: 'Admin', code: 'admin', created_by_id: \"0\", created_on: new Date() }\r\n\r\n  //     ])\r\n  //     .execute()\r\n  // }\r\n\r\n  UserRoleSeed = async () => {\r\n    await this._DataSource.manager.createQueryBuilder()\r\n      .insert()\r\n      .into(user_role)\r\n      .values([\r\n        { name: 'Super Admin', code: '', created_by_id: \"0\", created_on: new Date() },\r\n        { name: 'Admin', code: 'A', created_by_id: \"1\", created_on: new Date(), landing_page: \"/admin_dashboard\" },\r\n        { name: 'Customer', code: 'C', created_by_id: \"1\", created_on: new Date(), landing_page: \"/customer_dashboard\" },\r\n        { name: 'Vendor', code: 'V', created_by_id: \"1\", created_on: new Date(), landing_page: \"/vendor_dashboard\" },\r\n        { name: 'Driver', code: 'D', created_by_id: \"1\", created_on: new Date(), landing_page: \"/driver_dashboard\" }\r\n      ])\r\n      .execute();\r\n  }\r\n\r\n\r\n  UserSeed = async () => {\r\n    // Fetch roles for Super Admin and Admin\r\n    const SuperAdminRoleData = await user_role.findOne({ where: { name: \"Super Admin\" } });\r\n    const AdminRoleData = await user_role.findOne({ where: { name: \"Admin\" } });\r\n\r\n    if (!SuperAdminRoleData || !AdminRoleData) {\r\n      throw new Error('Required roles not found: Super Admin or Admin');\r\n    }\r\n\r\n    await this._DataSource.manager.createQueryBuilder()\r\n      .insert()\r\n      .into(user)\r\n      .values([\r\n        {\r\n          user_role_id: SuperAdminRoleData.id,\r\n          first_name: 'Super Admin',\r\n          email: 'admin@user.com',\r\n          password: this._EncryptionService.Encrypt('Login123!!'),\r\n          created_by_id: \"0\",\r\n          created_on: new Date()\r\n        },\r\n        {\r\n          user_role_id: AdminRoleData.id,\r\n          first_name: 'Admin',\r\n          email: 'admin@gmail.com',\r\n          password: this._EncryptionService.Encrypt('123456'),\r\n          created_by_id: \"0\",\r\n          created_on: new Date()\r\n        },\r\n      ])\r\n      .orIgnore() // optional: skip if email already exists (based on DB constraint)\r\n      .execute();\r\n  };\r\n\r\n\r\n  CurrencySeed = async () => {\r\n    await this._DataSource.manager.createQueryBuilder()\r\n      .insert()\r\n      .into(currency)\r\n      .values([\r\n        {\r\n          name: 'Pound sterling',\r\n          code: 'GBP',\r\n          symbol: 'Â£',\r\n          created_by_id: \"0\",\r\n          created_on: new Date()\r\n        }\r\n      ])\r\n      .execute()\r\n  }\r\n\r\n  CountrySeed = async () => {\r\n    const CurrencyData = await currency.findOne({ where: { name: \"Pound sterling\" } });\r\n    await this._DataSource.manager.createQueryBuilder()\r\n      .insert()\r\n      .into(country)\r\n      .values([\r\n        {\r\n          name: 'United Kingdom',\r\n          code: 'UK',\r\n          currency_id: CurrencyData.id,\r\n          created_by_id: \"0\",\r\n          created_on: new Date()\r\n        }\r\n      ])\r\n      .execute()\r\n  }\r\n\r\n  CompanySeed = async () => {\r\n    const CurrencyData = await currency.findOne({ where: { name: \"Pound sterling\" } });\r\n    const CountryData = await country.findOne({ where: { name: \"United Kingdom\" } });\r\n    await this._DataSource.manager.createQueryBuilder()\r\n      .insert()\r\n      .into(company)\r\n      .values([\r\n        {\r\n          name: \"BoilerPlate\",\r\n          address: \"BoilerPlate\",\r\n          postal_code: \"BoilerPlate\",\r\n          country_id: CountryData.id,\r\n          currency_id: CurrencyData.id,\r\n          email: \"Demo\",\r\n          website: \"Demo\",\r\n          invoice_footer: \"BoilerPlate\",\r\n          created_by_id: \"0\",\r\n          created_on: new Date()\r\n        }\r\n      ])\r\n      .execute()\r\n  }\r\n\r\n}\r\n\r\n"],"names":["CommonSeederService","Run","UserRoleSeed","e","console","log","UserSeed","CurrencySeed","CountrySeed","CompanySeed","_EncryptionService","_DataSource","manager","createQueryBuilder","insert","into","user_role","values","name","code","created_by_id","created_on","Date","landing_page","execute","SuperAdminRoleData","findOne","where","AdminRoleData","Error","user","user_role_id","id","first_name","email","password","Encrypt","orIgnore","currency","symbol","CurrencyData","country","currency_id","CountryData","company","address","postal_code","country_id","website","invoice_footer"],"mappings":"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"}