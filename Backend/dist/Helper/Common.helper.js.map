{"version":3,"sources":["../../src/Helper/Common.helper.ts"],"sourcesContent":["import { createParamDecorator, ExecutionContext } from '@nestjs/common';\r\nimport { format, differenceInDays } from 'date-fns';\r\nimport \"reflect-metadata\";\r\n\r\nexport const CurrentUser = createParamDecorator((data, req) => {\r\n  if (req.args[0].user.user_id) {\r\n    return req.args[0].user.user_id;\r\n  } else {\r\n    return 0;\r\n  }\r\n});\r\n\r\nexport const UserIp = createParamDecorator((data: unknown, ctx: ExecutionContext) => {\r\n  const request = ctx.switchToHttp().getRequest();\r\n  const ip = request.headers['ip'] || request.headers['x-forwarded-for'] || request.connection.remoteAddress;\r\n  return ip || \"127.0.0.1\";\r\n});\r\n\r\nexport const RandomValue = (min: any, max: any) => {\r\n  return Math.floor(\r\n    Math.random() * (max - min) + min\r\n  )\r\n}\r\n\r\nexport const DateFormatForDB = (SourceDate: Date | null) => {\r\n  if (SourceDate) {\r\n    SourceDate = new Date(SourceDate);\r\n    let FormattedDate = \"\";\r\n    if (SourceDate?.getDate()) {\r\n      FormattedDate = format(SourceDate, \"yyyy-MM-dd\");\r\n    }\r\n    return FormattedDate;\r\n  }\r\n  else {\r\n    return null;\r\n  }\r\n}\r\n\r\nexport const DBDateTimeStart = (SourceDate: Date | null) => {\r\n  if (SourceDate) {\r\n    let FormattedDate;\r\n    if (SourceDate?.getDate()) {\r\n      SourceDate.setHours(0);\r\n      SourceDate.setMinutes(0);\r\n      SourceDate.setSeconds(0);\r\n      SourceDate.setMilliseconds(0);\r\n      FormattedDate = format(SourceDate, \"yyyy-MM-dd HH:mm\");\r\n    }\r\n    return FormattedDate;\r\n  }\r\n  else {\r\n    return null;\r\n  }\r\n}\r\n\r\nexport const DBDateTimeEnd = (SourceDate: Date | null) => {\r\n  if (SourceDate) {\r\n    let FormattedDate;\r\n    if (SourceDate?.getDate()) {\r\n      SourceDate.setHours(23);\r\n      SourceDate.setMinutes(59);\r\n      SourceDate.setSeconds(59);\r\n      SourceDate.setMilliseconds(0);\r\n      FormattedDate = format(SourceDate, \"yyyy-MM-dd HH:mm\");\r\n    }\r\n    return FormattedDate;\r\n  }\r\n  else {\r\n    return null;\r\n  }\r\n}\r\n\r\nexport const DateFormatForReport = (SourceDate: Date | null) => {\r\n  if (SourceDate) {\r\n    let FormattedDate = \"\";\r\n    if (SourceDate?.getDate()) {\r\n      FormattedDate = format(SourceDate, \"dd-MMM-yyyy\");\r\n    }\r\n    return FormattedDate;\r\n  }\r\n  else {\r\n    return null;\r\n  }\r\n}\r\n\r\nexport const DateComparison = (StartDate: Date, EndDate: Date) => {\r\n  if (StartDate && EndDate) {\r\n    if (differenceInDays(EndDate, StartDate) < 0) {\r\n      return false;\r\n    }\r\n    else {\r\n      return true;\r\n    }\r\n  }\r\n  else {\r\n    return true;\r\n  }\r\n}\r\n\r\nexport const SetLastDateOfMonth = (StartDate: Date) => {\r\n  StartDate = new Date(StartDate);\r\n  StartDate.setMonth(StartDate.getMonth() + 1);\r\n  StartDate.setDate(StartDate.getDate() - 1);\r\n  return DateFormatForDB(StartDate);\r\n}\r\n\r\nexport const EmptyUuid = \"00000000-0000-0000-0000-00000000000\";\r\n"],"names":["CurrentUser","DBDateTimeEnd","DBDateTimeStart","DateComparison","DateFormatForDB","DateFormatForReport","EmptyUuid","RandomValue","SetLastDateOfMonth","UserIp","createParamDecorator","data","req","args","user","user_id","ctx","request","switchToHttp","getRequest","ip","headers","connection","remoteAddress","min","max","Math","floor","random","SourceDate","Date","FormattedDate","getDate","format","setHours","setMinutes","setSeconds","setMilliseconds","StartDate","EndDate","differenceInDays","setMonth","getMonth","setDate"],"mappings":";;;;;;;;;;;QAIaA;eAAAA;;QAmDAC;eAAAA;;QAjBAC;eAAAA;;QA+CAC;eAAAA;;QA7DAC;eAAAA;;QAgDAC;eAAAA;;QAkCAC;eAAAA;;QAxFAC;eAAAA;;QAiFAC;eAAAA;;QAvFAC;eAAAA;;;wBAZ0C;yBACd;QAClC;AAEA,MAAMT,cAAcU,IAAAA,4BAAoB,EAAC,CAACC,MAAMC;IACrD,IAAIA,IAAIC,IAAI,CAAC,EAAE,CAACC,IAAI,CAACC,OAAO,EAAE;QAC5B,OAAOH,IAAIC,IAAI,CAAC,EAAE,CAACC,IAAI,CAACC,OAAO;IACjC,OAAO;QACL,OAAO;IACT;AACF;AAEO,MAAMN,SAASC,IAAAA,4BAAoB,EAAC,CAACC,MAAeK;IACzD,MAAMC,UAAUD,IAAIE,YAAY,GAAGC,UAAU;IAC7C,MAAMC,KAAKH,QAAQI,OAAO,CAAC,KAAK,IAAIJ,QAAQI,OAAO,CAAC,kBAAkB,IAAIJ,QAAQK,UAAU,CAACC,aAAa;IAC1G,OAAOH,MAAM;AACf;AAEO,MAAMb,cAAc,CAACiB,KAAUC;IACpC,OAAOC,KAAKC,KAAK,CACfD,KAAKE,MAAM,KAAMH,CAAAA,MAAMD,GAAE,IAAKA;AAElC;AAEO,MAAMpB,kBAAkB,CAACyB;IAC9B,IAAIA,YAAY;QACdA,aAAa,IAAIC,KAAKD;QACtB,IAAIE,gBAAgB;QACpB,IAAIF,YAAYG,WAAW;YACzBD,gBAAgBE,IAAAA,eAAM,EAACJ,YAAY;QACrC;QACA,OAAOE;IACT,OACK;QACH,OAAO;IACT;AACF;AAEO,MAAM7B,kBAAkB,CAAC2B;IAC9B,IAAIA,YAAY;QACd,IAAIE;QACJ,IAAIF,YAAYG,WAAW;YACzBH,WAAWK,QAAQ,CAAC;YACpBL,WAAWM,UAAU,CAAC;YACtBN,WAAWO,UAAU,CAAC;YACtBP,WAAWQ,eAAe,CAAC;YAC3BN,gBAAgBE,IAAAA,eAAM,EAACJ,YAAY;QACrC;QACA,OAAOE;IACT,OACK;QACH,OAAO;IACT;AACF;AAEO,MAAM9B,gBAAgB,CAAC4B;IAC5B,IAAIA,YAAY;QACd,IAAIE;QACJ,IAAIF,YAAYG,WAAW;YACzBH,WAAWK,QAAQ,CAAC;YACpBL,WAAWM,UAAU,CAAC;YACtBN,WAAWO,UAAU,CAAC;YACtBP,WAAWQ,eAAe,CAAC;YAC3BN,gBAAgBE,IAAAA,eAAM,EAACJ,YAAY;QACrC;QACA,OAAOE;IACT,OACK;QACH,OAAO;IACT;AACF;AAEO,MAAM1B,sBAAsB,CAACwB;IAClC,IAAIA,YAAY;QACd,IAAIE,gBAAgB;QACpB,IAAIF,YAAYG,WAAW;YACzBD,gBAAgBE,IAAAA,eAAM,EAACJ,YAAY;QACrC;QACA,OAAOE;IACT,OACK;QACH,OAAO;IACT;AACF;AAEO,MAAM5B,iBAAiB,CAACmC,WAAiBC;IAC9C,IAAID,aAAaC,SAAS;QACxB,IAAIC,IAAAA,yBAAgB,EAACD,SAASD,aAAa,GAAG;YAC5C,OAAO;QACT,OACK;YACH,OAAO;QACT;IACF,OACK;QACH,OAAO;IACT;AACF;AAEO,MAAM9B,qBAAqB,CAAC8B;IACjCA,YAAY,IAAIR,KAAKQ;IACrBA,UAAUG,QAAQ,CAACH,UAAUI,QAAQ,KAAK;IAC1CJ,UAAUK,OAAO,CAACL,UAAUN,OAAO,KAAK;IACxC,OAAO5B,gBAAgBkC;AACzB;AAEO,MAAMhC,YAAY"}